{
	"id": 0,
	"name": "preshape",
	"kind": 0,
	"flags": {},
	"children": [
		{
			"id": 39,
			"name": "\"Alert/Alert\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "/Users/harry/Projects/personal/preshape/src/Alert/Alert.tsx",
			"children": [
				{
					"id": 40,
					"name": "AlertProps",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "Alert component for bringing attention to a message."
					},
					"children": [
						{
							"id": 44,
							"name": "absolute",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Quick way of absolutely position to common places"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 58,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "fullscreen"
									},
									{
										"type": "stringLiteral",
										"value": "top"
									},
									{
										"type": "stringLiteral",
										"value": "top-left"
									},
									{
										"type": "stringLiteral",
										"value": "top-right"
									},
									{
										"type": "stringLiteral",
										"value": "bottom"
									},
									{
										"type": "stringLiteral",
										"value": "bottom-left"
									},
									{
										"type": "stringLiteral",
										"value": "bottom-right"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.absolute",
								"id": 3
							}
						},
						{
							"id": 45,
							"name": "backgroundColor",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Background colour to be applied, shades are taken from the current\ntheme."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 70,
									"character": 17
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeColor",
								"id": 30
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.backgroundColor",
								"id": 4
							}
						},
						{
							"id": 46,
							"name": "borderColor",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Border colour to be applied, shades are taken from the current\ntheme."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 75,
									"character": 13
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeColor",
								"id": 30
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.borderColor",
								"id": 5
							}
						},
						{
							"id": 47,
							"name": "borderRadius",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Adds styling of a border radius to one of the size multiples."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 79,
									"character": 14
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "x1"
									},
									{
										"type": "stringLiteral",
										"value": "x2"
									},
									{
										"type": "stringLiteral",
										"value": "x3"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.borderRadius",
								"id": 6
							}
						},
						{
							"id": 48,
							"name": "borderSize",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Thickness of the border to be applied"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 81,
									"character": 12
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "x1"
									},
									{
										"type": "stringLiteral",
										"value": "x2"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.borderSize",
								"id": 7
							}
						},
						{
							"id": 49,
							"name": "clickable",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Adds styling to indicate that the element is clickable"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 83,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.clickable",
								"id": 8
							}
						},
						{
							"id": 41,
							"name": "color",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Colour that is applied to the Alert to indicate the type of action"
							},
							"sources": [
								{
									"fileName": "src/Alert/Alert.tsx",
									"line": 11,
									"character": 7
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "accent"
									},
									{
										"type": "stringLiteral",
										"value": "negative"
									},
									{
										"type": "stringLiteral",
										"value": "positive"
									}
								]
							}
						},
						{
							"id": 50,
							"name": "container",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies relative positioning to contain child elements."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 85,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.container",
								"id": 9
							}
						},
						{
							"id": 51,
							"name": "display",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies display styling"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 87,
									"character": 9
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "block"
									},
									{
										"type": "stringLiteral",
										"value": "inline-block"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.display",
								"id": 10
							}
						},
						{
							"id": 42,
							"name": "fill",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Appies a filled in style to the alert."
							},
							"sources": [
								{
									"fileName": "src/Alert/Alert.tsx",
									"line": 13,
									"character": 6
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							}
						},
						{
							"id": 52,
							"name": "fixed",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Quick way of absolutely position to common places"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 89,
									"character": 7
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "fullscreen"
									},
									{
										"type": "stringLiteral",
										"value": "top"
									},
									{
										"type": "stringLiteral",
										"value": "top-left"
									},
									{
										"type": "stringLiteral",
										"value": "top-right"
									},
									{
										"type": "stringLiteral",
										"value": "bottom"
									},
									{
										"type": "stringLiteral",
										"value": "bottom-left"
									},
									{
										"type": "stringLiteral",
										"value": "bottom-right"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.fixed",
								"id": 11
							}
						},
						{
							"id": 43,
							"name": "flash",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Whether the alert is flashing, a great way to give it extra attention."
							},
							"sources": [
								{
									"fileName": "src/Alert/Alert.tsx",
									"line": 15,
									"character": 7
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							}
						},
						{
							"id": 53,
							"name": "height",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Fixed height applied through inline styling"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 98,
									"character": 8
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.height",
								"id": 12
							}
						},
						{
							"id": 54,
							"name": "margin",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Margins applied for the global spacing variables"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 100,
									"character": 8
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeSize",
								"id": 31
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.margin",
								"id": 13
							}
						},
						{
							"id": 55,
							"name": "maxWidth",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Max width applied through inline styling"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 102,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.maxWidth",
								"id": 14
							}
						},
						{
							"id": 56,
							"name": "minHeight",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Max height applied through inline styling"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 104,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.minHeight",
								"id": 15
							}
						},
						{
							"id": 57,
							"name": "minWidth",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Min width applied through inline style"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 106,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.minWidth",
								"id": 16
							}
						},
						{
							"id": 58,
							"name": "overflow",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Overflow"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 108,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "stringLiteral",
										"value": "hidden"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.overflow",
								"id": 17
							}
						},
						{
							"id": 59,
							"name": "padding",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Padding applied for the global spacing variables"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 110,
									"character": 9
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeSize",
								"id": 31
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.padding",
								"id": 18
							}
						},
						{
							"id": 60,
							"name": "paddingHorizontal",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Horizontal padding applied for the global spacing variables"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 112,
									"character": 19
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeSize",
								"id": 31
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.paddingHorizontal",
								"id": 19
							}
						},
						{
							"id": 61,
							"name": "paddingVertical",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Vertical pa?dding applied for the global spacing variables"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 114,
									"character": 17
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeSize",
								"id": 31
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.paddingVertical",
								"id": 20
							}
						},
						{
							"id": 62,
							"name": "scrollable",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies overflow styling to enable/disable scrolling."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 116,
									"character": 12
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.scrollable",
								"id": 21
							}
						},
						{
							"id": 63,
							"name": "tag",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Any valid HTML or SVG element tag.",
								"tags": [
									{
										"tag": "reference",
										"text": "false\n"
									}
								]
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 122,
									"character": 5
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeAllElementTags",
								"id": 34
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.tag",
								"id": 22
							}
						},
						{
							"id": 64,
							"name": "textColor",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Text colour to be applied."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 126,
									"character": 11
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeColor",
								"id": 30
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.textColor",
								"id": 23
							}
						},
						{
							"id": 65,
							"name": "theme",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Theme applied to this element and inherited for child elements (until\na descendant theme is applied)."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 131,
									"character": 7
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeTheme",
								"id": 35
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.theme",
								"id": 24
							}
						},
						{
							"id": 66,
							"name": "width",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Fixed width applied through inline styling"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 133,
									"character": 7
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.width",
								"id": 25
							}
						},
						{
							"id": 67,
							"name": "zIndex",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "z-index number for layering elements."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 135,
									"character": 8
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "number"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.zIndex",
								"id": 26
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								44,
								45,
								46,
								47,
								48,
								49,
								41,
								50,
								51,
								42,
								52,
								43,
								53,
								54,
								55,
								56,
								57,
								58,
								59,
								60,
								61,
								62,
								63,
								64,
								65,
								66,
								67
							]
						}
					],
					"sources": [
						{
							"fileName": "src/Alert/Alert.tsx",
							"line": 9,
							"character": 27
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"name": "BaseProps",
							"id": 2
						}
					]
				},
				{
					"id": 68,
					"name": "Alert",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "src/Alert/Alert.tsx",
							"line": 18,
							"character": 11
						}
					],
					"type": {
						"type": "reference",
						"name": "ForwardRefExoticComponent",
						"typeArguments": [
							{
								"type": "intersection",
								"types": [
									{
										"type": "reference",
										"name": "AlertProps",
										"id": 40
									},
									{
										"type": "reflection",
										"declaration": {
											"id": 69,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {}
										}
									},
									{
										"type": "reference",
										"name": "RefAttributes",
										"typeArguments": [
											{
												"type": "reference",
												"name": "HTMLDivElement"
											}
										]
									}
								]
							}
						]
					},
					"defaultValue": " React.forwardRef<HTMLDivElement, Attributes<HTMLDivElement, AlertProps>>((props, ref) => {\n  const { color, fill, flash, ...rest } = props;\n  const classes = classnames('Alert', `Alert--${color}`, {\n    'Alert--fill': fill,\n    'Alert--flash': flash,\n  });\n\n  return (\n    <Base { ...rest }\n        borderSize=\"x2\"\n        className={ classes }\n        ref={ ref } />\n  );\n})"
				}
			],
			"groups": [
				{
					"title": "Interfaces",
					"kind": 256,
					"children": [
						40
					]
				},
				{
					"title": "Variables",
					"kind": 32,
					"children": [
						68
					]
				}
			],
			"sources": [
				{
					"fileName": "src/Alert/Alert.tsx",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 276,
			"name": "\"Appear/Appear\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "/Users/harry/Projects/personal/preshape/src/Appear/Appear.tsx",
			"children": [
				{
					"id": 277,
					"name": "AppearProps",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"children": [
						{
							"id": 399,
							"name": "_dragTransitionControls",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"tags": [
									{
										"tag": "internal",
										"text": "\n"
									}
								]
							},
							"sources": [
								{
									"fileName": "node_modules/framer-motion/dist/framer-motion.d.ts",
									"line": 875,
									"character": 27
								}
							],
							"type": {
								"type": "reference",
								"name": "AnimationControls"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "DraggableProps._dragTransitionControls"
							}
						},
						{
							"id": 397,
							"name": "_dragValueX",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"tags": [
									{
										"tag": "internalremarks",
										"text": "\n\n_dragValueX, _dragValueY and _dragTransitionControls are a way of allowing this\ncomponent to be a drag target for another element.\n"
									},
									{
										"tag": "internal",
										"text": "\n"
									}
								]
							},
							"sources": [
								{
									"fileName": "node_modules/framer-motion/dist/framer-motion.d.ts",
									"line": 867,
									"character": 15
								}
							],
							"type": {
								"type": "reference",
								"name": "MotionValue",
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "number"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "DraggableProps._dragValueX"
							}
						},
						{
							"id": 398,
							"name": "_dragValueY",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"tags": [
									{
										"tag": "internal",
										"text": "\n"
									}
								]
							},
							"sources": [
								{
									"fileName": "node_modules/framer-motion/dist/framer-motion.d.ts",
									"line": 871,
									"character": 15
								}
							],
							"type": {
								"type": "reference",
								"name": "MotionValue",
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "number"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "DraggableProps._dragValueY"
							}
						},
						{
							"id": 299,
							"name": "absolute",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Quick way of absolutely position to common places"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 58,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "fullscreen"
									},
									{
										"type": "stringLiteral",
										"value": "top"
									},
									{
										"type": "stringLiteral",
										"value": "top-left"
									},
									{
										"type": "stringLiteral",
										"value": "top-right"
									},
									{
										"type": "stringLiteral",
										"value": "bottom"
									},
									{
										"type": "stringLiteral",
										"value": "bottom-left"
									},
									{
										"type": "stringLiteral",
										"value": "bottom-right"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.absolute",
								"id": 3
							}
						},
						{
							"id": 289,
							"name": "alignChildren",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Short cut child alignment property for both alignChildrenHorizontal and\nalignChildrenVertical."
							},
							"sources": [
								{
									"fileName": "src/Flex/Flex.tsx",
									"line": 11,
									"character": 15
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "start"
									},
									{
										"type": "stringLiteral",
										"value": "middle"
									},
									{
										"type": "stringLiteral",
										"value": "end"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "FlexProps.alignChildren",
								"id": 240
							}
						},
						{
							"id": 290,
							"name": "alignChildrenHorizontal",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Horizontal alignment of children flex items."
							},
							"sources": [
								{
									"fileName": "src/Flex/Flex.tsx",
									"line": 13,
									"character": 25
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "start"
									},
									{
										"type": "stringLiteral",
										"value": "middle"
									},
									{
										"type": "stringLiteral",
										"value": "end"
									},
									{
										"type": "stringLiteral",
										"value": "around"
									},
									{
										"type": "stringLiteral",
										"value": "between"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "FlexProps.alignChildrenHorizontal",
								"id": 241
							}
						},
						{
							"id": 291,
							"name": "alignChildrenVertical",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Vertical alignment of children flex items."
							},
							"sources": [
								{
									"fileName": "src/Flex/Flex.tsx",
									"line": 15,
									"character": 23
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "start"
									},
									{
										"type": "stringLiteral",
										"value": "middle"
									},
									{
										"type": "stringLiteral",
										"value": "end"
									},
									{
										"type": "stringLiteral",
										"value": "around"
									},
									{
										"type": "stringLiteral",
										"value": "between"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "FlexProps.alignChildrenVertical",
								"id": 242
							}
						},
						{
							"id": 292,
							"name": "alignSelf",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Flex item alignment property (changes with parent direction)."
							},
							"sources": [
								{
									"fileName": "src/Flex/Flex.tsx",
									"line": 17,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "start"
									},
									{
										"type": "stringLiteral",
										"value": "middle"
									},
									{
										"type": "stringLiteral",
										"value": "end"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "FlexProps.alignSelf",
								"id": 243
							}
						},
						{
							"id": 333,
							"name": "animate",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Values to animate to, variant label(s), or `AnimationControls`.",
								"tags": [
									{
										"tag": "library",
										"text": "\n\n```jsx\n// As values\n<Frame animate={{ opacity: 1 }} />\n\n// As variant\n<Frame animate=\"visible\" variants={variants} />\n\n// Multiple variants\n<Frame animate={[\"visible\", \"active\"]} variants={variants} />\n\n// AnimationControls\n<Frame animate={animation} />\n```\n"
									},
									{
										"tag": "motion",
										"text": "\n\n```jsx\n// As values\n<motion.div animate={{ opacity: 1 }} />\n\n// As variant\n<motion.div animate=\"visible\" variants={variants} />\n\n// Multiple variants\n<motion.div animate={[\"visible\", \"active\"]} variants={variants} />\n\n// AnimationControls\n<motion.div animate={animation} />\n```\n"
									}
								]
							},
							"sources": [
								{
									"fileName": "node_modules/framer-motion/dist/framer-motion.d.ts",
									"line": 377,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"name": "AnimationControls"
									},
									{
										"type": "reference",
										"name": "TargetAndTransition"
									},
									{
										"type": "reference",
										"name": "VariantLabels"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AnimationProps.animate"
							}
						},
						{
							"id": 278,
							"name": "animation",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Type of animation that is applied when appearing and disappearing.",
								"tags": [
									{
										"tag": "default",
										"text": "\"FadeSlideUp\"\n"
									}
								]
							},
							"sources": [
								{
									"fileName": "src/Appear/Appear.tsx",
									"line": 39,
									"character": 11
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeAnimation",
								"id": 424
							}
						},
						{
							"id": 300,
							"name": "backgroundColor",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Background colour to be applied, shades are taken from the current\ntheme."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 70,
									"character": 17
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeColor",
								"id": 30
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.backgroundColor",
								"id": 4
							}
						},
						{
							"id": 293,
							"name": "basis",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Initial width to flex from for a child item."
							},
							"sources": [
								{
									"fileName": "src/Flex/Flex.tsx",
									"line": 19,
									"character": 7
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "content"
									},
									{
										"type": "stringLiteral",
										"value": "container"
									},
									{
										"type": "stringLiteral",
										"value": "none"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "FlexProps.basis",
								"id": 244
							}
						},
						{
							"id": 301,
							"name": "borderColor",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Border colour to be applied, shades are taken from the current\ntheme."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 75,
									"character": 13
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeColor",
								"id": 30
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.borderColor",
								"id": 5
							}
						},
						{
							"id": 302,
							"name": "borderRadius",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Adds styling of a border radius to one of the size multiples."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 79,
									"character": 14
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "x1"
									},
									{
										"type": "stringLiteral",
										"value": "x2"
									},
									{
										"type": "stringLiteral",
										"value": "x3"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.borderRadius",
								"id": 6
							}
						},
						{
							"id": 303,
							"name": "borderSize",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Thickness of the border to be applied"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 81,
									"character": 12
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "x1"
									},
									{
										"type": "stringLiteral",
										"value": "x2"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.borderSize",
								"id": 7
							}
						},
						{
							"id": 304,
							"name": "clickable",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Adds styling to indicate that the element is clickable"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 83,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.clickable",
								"id": 8
							}
						},
						{
							"id": 305,
							"name": "container",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies relative positioning to contain child elements."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 85,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.container",
								"id": 9
							}
						},
						{
							"id": 419,
							"name": "custom",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPublic": true,
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Custom data to use to resolve dynamic variants differently for each animating component.",
								"tags": [
									{
										"tag": "library",
										"text": "\n\n```jsx\nconst variants = {\n  visible: (custom) => ({\n    opacity: 1,\n    transition: { delay: custom * 0.2 }\n  })\n}\n\n<Frame custom={0} animate=\"visible\" variants={variants} />\n<Frame custom={1} animate=\"visible\" variants={variants} />\n<Frame custom={2} animate=\"visible\" variants={variants} />\n```\n"
									},
									{
										"tag": "motion",
										"text": "\n\n```jsx\nconst variants = {\n  visible: (custom) => ({\n    opacity: 1,\n    transition: { delay: custom * 0.2 }\n  })\n}\n\n<motion.div custom={0} animate=\"visible\" variants={variants} />\n<motion.div custom={1} animate=\"visible\" variants={variants} />\n<motion.div custom={2} animate=\"visible\" variants={variants} />\n```\n"
									}
								]
							},
							"sources": [
								{
									"fileName": "node_modules/framer-motion/dist/framer-motion.d.ts",
									"line": 2008,
									"character": 10
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "any"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "MotionAdvancedProps.custom"
							}
						},
						{
							"id": 279,
							"name": "delay",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Time (in milliseconds) that the appearance/disappearance animation is delayed for.",
								"tags": [
									{
										"tag": "default",
										"text": "0\n"
									}
								]
							},
							"sources": [
								{
									"fileName": "src/Appear/Appear.tsx",
									"line": 46,
									"character": 7
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "number"
									}
								]
							}
						},
						{
							"id": 294,
							"name": "direction",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Direction on which way to flex items."
							},
							"sources": [
								{
									"fileName": "src/Flex/Flex.tsx",
									"line": 21,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "horizontal"
									},
									{
										"type": "stringLiteral",
										"value": "vertical"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "FlexProps.direction",
								"id": 245
							}
						},
						{
							"id": 306,
							"name": "display",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies display styling"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 87,
									"character": 9
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "block"
									},
									{
										"type": "stringLiteral",
										"value": "inline-block"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.display",
								"id": 10
							}
						},
						{
							"id": 385,
							"name": "drag",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Enable dragging for this element. Set to `false` by default.\nSet `true` to drag in both directions.\nSet `\"x\"` or `\"y\"` to only drag in a specific direction.",
								"tags": [
									{
										"tag": "library",
										"text": "\n\n```jsx\n<Frame drag=\"x\" />\n```\n"
									},
									{
										"tag": "motion",
										"text": "\n\n```jsx\n<motion.div drag=\"x\" />\n```\n"
									}
								]
							},
							"sources": [
								{
									"fileName": "node_modules/framer-motion/dist/framer-motion.d.ts",
									"line": 696,
									"character": 8
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "boolean"
									},
									{
										"type": "stringLiteral",
										"value": "x"
									},
									{
										"type": "stringLiteral",
										"value": "y"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "DraggableProps.drag"
							}
						},
						{
							"id": 388,
							"name": "dragConstraints",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "An object of optional `top`, `left`, `right`, `bottom` pixel values,\nbeyond which dragging is constrained.",
								"text": "Another component can be used as drag constraints by creating a `ref` with React's `useRef`.hook.\nThis `ref` should be passed to that component's `ref` prop and to this component's `dragConstraints` prop.\n",
								"tags": [
									{
										"tag": "library",
										"text": "\n\n```jsx\n// In pixels\n<Frame\n  drag=\"x\"\n  dragConstraints={{ left: 0, right: 300 }}\n/>\n\n// As a ref to another component\nfunction MyComponent() {\n  const constraintsRef = useRef(null)\n\n  return (\n     <Frame ref={constraintsRef} width={400} height={400}>\n         <Frame drag dragConstraints={constraintsRef} />\n     </Frame>\n  )\n}\n```\n"
									},
									{
										"tag": "motion",
										"text": "\n\n```jsx\n// In pixels\n<motion.div\n  drag=\"x\"\n  dragConstraints={{ left: 0, right: 300 }}\n/>\n\n// As a ref to another component\nconst MyComponent = () => {\n  const constraintsRef = useRef(null)\n\n  return (\n     <motion.div ref={constraintsRef}>\n         <motion.div drag dragConstraints={constraintsRef} />\n     </motion.div>\n  )\n}\n```\n"
									}
								]
							},
							"sources": [
								{
									"fileName": "node_modules/framer-motion/dist/framer-motion.d.ts",
									"line": 779,
									"character": 19
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "reflection",
										"declaration": {
											"id": 389,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"children": [
												{
													"id": 392,
													"name": "bottom",
													"kind": 32,
													"kindString": "Variable",
													"flags": {
														"isOptional": true
													},
													"sources": [
														{
															"fileName": "node_modules/framer-motion/dist/framer-motion.d.ts",
															"line": 782,
															"character": 14
														}
													],
													"type": {
														"type": "union",
														"types": [
															{
																"type": "intrinsic",
																"name": "undefined"
															},
															{
																"type": "intrinsic",
																"name": "number"
															}
														]
													}
												},
												{
													"id": 393,
													"name": "left",
													"kind": 32,
													"kindString": "Variable",
													"flags": {
														"isOptional": true
													},
													"sources": [
														{
															"fileName": "node_modules/framer-motion/dist/framer-motion.d.ts",
															"line": 783,
															"character": 12
														}
													],
													"type": {
														"type": "union",
														"types": [
															{
																"type": "intrinsic",
																"name": "undefined"
															},
															{
																"type": "intrinsic",
																"name": "number"
															}
														]
													}
												},
												{
													"id": 391,
													"name": "right",
													"kind": 32,
													"kindString": "Variable",
													"flags": {
														"isOptional": true
													},
													"sources": [
														{
															"fileName": "node_modules/framer-motion/dist/framer-motion.d.ts",
															"line": 781,
															"character": 13
														}
													],
													"type": {
														"type": "union",
														"types": [
															{
																"type": "intrinsic",
																"name": "undefined"
															},
															{
																"type": "intrinsic",
																"name": "number"
															}
														]
													}
												},
												{
													"id": 390,
													"name": "top",
													"kind": 32,
													"kindString": "Variable",
													"flags": {
														"isOptional": true
													},
													"sources": [
														{
															"fileName": "node_modules/framer-motion/dist/framer-motion.d.ts",
															"line": 780,
															"character": 11
														}
													],
													"type": {
														"type": "union",
														"types": [
															{
																"type": "intrinsic",
																"name": "undefined"
															},
															{
																"type": "intrinsic",
																"name": "number"
															}
														]
													}
												}
											],
											"groups": [
												{
													"title": "Variables",
													"kind": 32,
													"children": [
														392,
														393,
														391,
														390
													]
												}
											],
											"sources": [
												{
													"fileName": "node_modules/framer-motion/dist/framer-motion.d.ts",
													"line": 779,
													"character": 29
												}
											]
										}
									},
									{
										"type": "reference",
										"name": "RefObject",
										"typeArguments": [
											{
												"type": "reference",
												"name": "Element"
											}
										]
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "DraggableProps.dragConstraints"
							}
						},
						{
							"id": 386,
							"name": "dragDirectionLock",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "If `true`, this will lock dragging to the initially-detected direction. Defaults to `false`.",
								"tags": [
									{
										"tag": "library",
										"text": "\n\n```jsx\n<Frame drag={true} dragDirectionLock={true} />\n```\n"
									},
									{
										"tag": "motion",
										"text": "\n\n```jsx\n<motion.div drag dragDirectionLock />\n```\n"
									}
								]
							},
							"sources": [
								{
									"fileName": "node_modules/framer-motion/dist/framer-motion.d.ts",
									"line": 712,
									"character": 21
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "DraggableProps.dragDirectionLock"
							}
						},
						{
							"id": 394,
							"name": "dragElastic",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "The degree of movement allowed outside constraints. 0 = no movement, 1 =\nfull movement. Set to `0.5` by default.",
								"tags": [
									{
										"tag": "library",
										"text": "\n\n```jsx\n<Frame\n  drag={true}\n  dragConstraints={{ left: 0, right: 300 }}\n  dragElastic={0.2}\n/>\n```\n"
									},
									{
										"tag": "motion",
										"text": "\n\n```jsx\n<motion.div\n  drag\n  dragConstraints={{ left: 0, right: 300 }}\n  dragElastic={0.2}\n/>\n```\n"
									}
								]
							},
							"sources": [
								{
									"fileName": "node_modules/framer-motion/dist/framer-motion.d.ts",
									"line": 809,
									"character": 15
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "boolean"
									},
									{
										"type": "intrinsic",
										"name": "number"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "DraggableProps.dragElastic"
							}
						},
						{
							"id": 395,
							"name": "dragMomentum",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Apply momentum from the pan gesture to the component when dragging\nfinishes. Set to `true` by default.",
								"tags": [
									{
										"tag": "library",
										"text": "\n\n```jsx\n<Frame\n  drag={true}\n  dragConstraints={{ left: 0, right: 300 }}\n  dragMomentum={false}\n/>\n```\n"
									},
									{
										"tag": "motion",
										"text": "\n\n```jsx\n<motion.div\n  drag\n  dragConstraints={{ left: 0, right: 300 }}\n  dragMomentum={false}\n/>\n```\n"
									}
								]
							},
							"sources": [
								{
									"fileName": "node_modules/framer-motion/dist/framer-motion.d.ts",
									"line": 834,
									"character": 16
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "DraggableProps.dragMomentum"
							}
						},
						{
							"id": 400,
							"name": "dragOriginX",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPublic": true,
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Drag position is calculated by applying the pan offset to the x/y origin\nmeasured when the drag gesture begins.",
								"text": "By manually creating `dragOriginX` as a `MotionValue`, it can be updated\nwhile the gesture is active, for instance to visually offset any movement should\nthe component change layout.\n",
								"tags": [
									{
										"tag": "library",
										"text": "\n\n```jsx\nconst dragOriginX = useMotionValue(0)\n\nreturn <Frame dragOriginX={dragOriginX} />\n```\n"
									},
									{
										"tag": "motion",
										"text": "\n\n```jsx\nconst dragOriginX = useMotionValue(0)\n\nreturn <motion.div dragOriginX={dragOriginX} />\n```\n"
									}
								]
							},
							"sources": [
								{
									"fileName": "node_modules/framer-motion/dist/framer-motion.d.ts",
									"line": 902,
									"character": 15
								}
							],
							"type": {
								"type": "reference",
								"name": "MotionValue",
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "number"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "DraggableProps.dragOriginX"
							}
						},
						{
							"id": 401,
							"name": "dragOriginY",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPublic": true,
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Drag position is calculated by applying the pan offset to the x/y origin\nmeasured when the drag gesture begins.",
								"text": "By manually creating `dragOriginY` as a `MotionValue`, it can be updated\nwhile the gesture is active, for instance to visually offset any movement should\nthe component change layout.\n",
								"tags": [
									{
										"tag": "library",
										"text": "\n\n```jsx\nconst dragOriginY = useMotionValue(0)\n\nreturn <Frame dragOriginY={dragOriginY} />\n```\n"
									},
									{
										"tag": "motion",
										"text": "\n\n```jsx\nconst dragOriginY = useMotionValue(0)\n\nreturn <motion.div dragOriginY={dragOriginY} />\n```\n"
									}
								]
							},
							"sources": [
								{
									"fileName": "node_modules/framer-motion/dist/framer-motion.d.ts",
									"line": 929,
									"character": 15
								}
							],
							"type": {
								"type": "reference",
								"name": "MotionValue",
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "number"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "DraggableProps.dragOriginY"
							}
						},
						{
							"id": 387,
							"name": "dragPropagation",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Allows drag gesture propagation to child components. Set to `false` by\ndefault.",
								"tags": [
									{
										"tag": "library",
										"text": "\n\n```jsx\n<Frame drag=\"x\" dragPropagation={true} />\n```\n"
									},
									{
										"tag": "motion",
										"text": "\n\n```jsx\n<motion.div drag=\"x\" dragPropagation />\n```\n"
									}
								]
							},
							"sources": [
								{
									"fileName": "node_modules/framer-motion/dist/framer-motion.d.ts",
									"line": 729,
									"character": 19
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "DraggableProps.dragPropagation"
							}
						},
						{
							"id": 396,
							"name": "dragTransition",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Allows you to change dragging inertia parameters.\nWhen releasing a draggable Frame, an animation with type `inertia` starts. The animation is based on your dragging velocity. This property allows you to customize it.\nSee {@link https://framer.com/api/animation/#inertia | Inertia} for all properties you can use.",
								"tags": [
									{
										"tag": "library",
										"text": "\n\n```jsx\n<Frame\n  drag={true}\n  dragTransition={{ bounceStiffness: 600, bounceDamping: 10 }}\n/>\n```\n"
									},
									{
										"tag": "motion",
										"text": "\n\n```jsx\n<motion.div\n  drag\n  dragTransition={{ bounceStiffness: 600, bounceDamping: 10 }}\n/>\n```\n"
									}
								]
							},
							"sources": [
								{
									"fileName": "node_modules/framer-motion/dist/framer-motion.d.ts",
									"line": 858,
									"character": 18
								}
							],
							"type": {
								"type": "reference",
								"name": "InertiaOptions"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "DraggableProps.dragTransition"
							}
						},
						{
							"id": 280,
							"name": "duration",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"tags": [
									{
										"tag": "default",
										"text": "200\n"
									}
								]
							},
							"sources": [
								{
									"fileName": "src/Appear/Appear.tsx",
									"line": 50,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "number"
									}
								]
							}
						},
						{
							"id": 334,
							"name": "exit",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "A target to animate to when this component is removed from the tree.",
								"text": "This component **must** be the first animatable child of an `AnimatePresence` to enable this exit animation.\n\nThis limitation exists because React doesn't allow components to defer unmounting until after\nan animation is complete. Once this limitation is fixed, the `AnimatePresence` component will be unnecessary.\n",
								"tags": [
									{
										"tag": "library",
										"text": "\n\n```jsx\nimport { Frame, AnimatePresence } from 'framer'\n\nexport function MyComponent(props) {\n  return (\n    <AnimatePresence>\n       {props.isVisible && (\n         <Frame\n           initial={{ opacity: 0 }}\n           animate={{ opacity: 1 }}\n           exit={{ opacity: 0 }}\n         />\n       )}\n    </AnimatePresence>\n  )\n}\n```\n"
									},
									{
										"tag": "motion",
										"text": "\n\n```jsx\nimport { AnimatePresence, motion } from 'framer-motion'\n\nexport const MyComponent = ({ isVisible }) => {\n  return (\n    <AnimatePresence>\n       {isVisible && (\n         <motion.div\n           initial={{ opacity: 0 }}\n           animate={{ opacity: 1 }}\n           exit={{ opacity: 0 }}\n         />\n       )}\n    </AnimatePresence>\n  )\n}\n```\n"
									}
								]
							},
							"sources": [
								{
									"fileName": "node_modules/framer-motion/dist/framer-motion.d.ts",
									"line": 426,
									"character": 8
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"name": "TargetAndTransition"
									},
									{
										"type": "reference",
										"name": "VariantLabels"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AnimationProps.exit"
							}
						},
						{
							"id": 307,
							"name": "fixed",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Quick way of absolutely position to common places"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 89,
									"character": 7
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "fullscreen"
									},
									{
										"type": "stringLiteral",
										"value": "top"
									},
									{
										"type": "stringLiteral",
										"value": "top-left"
									},
									{
										"type": "stringLiteral",
										"value": "top-right"
									},
									{
										"type": "stringLiteral",
										"value": "bottom"
									},
									{
										"type": "stringLiteral",
										"value": "bottom-left"
									},
									{
										"type": "stringLiteral",
										"value": "bottom-right"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.fixed",
								"id": 11
							}
						},
						{
							"id": 295,
							"name": "gap",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Spacing applied between child flex items, values are global spacing variables."
							},
							"sources": [
								{
									"fileName": "src/Flex/Flex.tsx",
									"line": 23,
									"character": 5
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeSize",
								"id": 31
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "FlexProps.gap",
								"id": 246
							}
						},
						{
							"id": 296,
							"name": "grow",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Flex item property if it should grow with available space."
							},
							"sources": [
								{
									"fileName": "src/Flex/Flex.tsx",
									"line": 25,
									"character": 6
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "FlexProps.grow",
								"id": 247
							}
						},
						{
							"id": 308,
							"name": "height",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Fixed height applied through inline styling"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 98,
									"character": 8
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.height",
								"id": 12
							}
						},
						{
							"id": 420,
							"name": "inherit",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPublic": true,
								"isExported": true,
								"isOptional": true
							},
							"comment": {},
							"sources": [
								{
									"fileName": "node_modules/framer-motion/dist/framer-motion.d.ts",
									"line": 2013,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "MotionAdvancedProps.inherit"
							}
						},
						{
							"id": 323,
							"name": "initial",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Properties, variant label or array of variant labels to start in.",
								"text": "Set to `false` to initialise with the values in `animate` (disabling the mount animation)\n",
								"tags": [
									{
										"tag": "library",
										"text": "\n\n```jsx\n// As values\n<Frame initial={{ opacity: 1 }} />\n\n// As variant\n<Frame initial=\"visible\" variants={variants} />\n\n// Multiple variants\n<Frame initial={[\"visible\", \"active\"]} variants={variants} />\n\n// As false (disable mount animation)\n<Frame initial={false} animate={{ opacity: 0 }} />\n```\n"
									},
									{
										"tag": "motion",
										"text": "\n\n```jsx\n// As values\n<motion.div initial={{ opacity: 1 }} />\n\n// As variant\n<motion.div initial=\"visible\" variants={variants} />\n\n// Multiple variants\n<motion.div initial={[\"visible\", \"active\"]} variants={variants} />\n\n// As false (disable mount animation)\n<motion.div initial={false} animate={{ opacity: 0 }} />\n```\n"
									}
								]
							},
							"sources": [
								{
									"fileName": "node_modules/framer-motion/dist/framer-motion.d.ts",
									"line": 2189,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "boolean"
									},
									{
										"type": "reference",
										"name": "Target"
									},
									{
										"type": "reference",
										"name": "VariantLabels"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "MotionProps.initial"
							}
						},
						{
							"id": 338,
							"name": "layoutTransition",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"tags": [
									{
										"tag": "library",
										"text": "\n\nWhen a `Frame` is the child of a `Stack`, the `Stack` is responsible for its layout. This makes it\ndifficult for to know when the layout changes and smoothly animate components to their new positions.\n\nBy adding `layoutTransition` to a child `Frame`, it'll automatically animate to its new position\nwhen it moves in the `Stack`, whether the `Stack` layout has changed, or the `Frame` has changed order within it.\n\nIt can either be set as a `Transition`, or just `true` to use the default layout transition.\n\nAnimating size with `scale` can introduce visual distortion to the component's children. If unwanted,\nthe `useInvertedScale` function can be used to undo this distortion.\n\n```jsx\nfunction MyComponent({ distribution = \"space-around\" }) {\n  const spring = {\n    type: \"spring\",\n    damping: 10,\n    stiffness: 100\n  }\n\n  return (\n    <Stack distribution={distribution}>\n      <Frame layoutTransition={spring} />\n    </Stack>\n  )\n}\n```\n"
									},
									{
										"tag": "motion",
										"text": "\n\nIf `layoutTransition` is defined on a `motion` component, the component will automatically\nanimate any changes to its position **and** size.\n\nIt will do so using performant transforms. So if a `motion` component changes position, it'll animate\nto its new position using `x` and `y`. If it changes size, it'll animate using `scaleX` and `scaleY`.\n\nAnimating size with `scale` can introduce visual distortion to the component's children. If unwanted,\nthe `useInvertedScale` function can be used to undo this distortion.\n\n`layoutTransition` can either be set as a `Transition`, or just `true` to use the default layout transition,\nwhich is a smooth `0.8` second ease.\n\nIt can also be set as a function that will resolve when the component has changed layout. This function\nshould return either a `Transition`, or `true`. For advanced use-cases where you want the component\nto visually stay in its previous position, this function can also return `false`. This function will receive\nthe `delta` of the changed layout.\n\n```jsx\nconst spring = {\n  type: \"spring\",\n  damping: 10,\n  stiffness: 100\n}\n\n// This component will animate between sizes when `isVisible` is toggled.\nconst MyComponent = ({ isVisible }) => {\n  return (\n    <motion.div layoutTransition={spring}>\n      {isVisible && <Content />}\n    </motion.div>\n  )\n}\n```\n"
									},
									{
										"tag": "beta",
										"text": "\n"
									}
								]
							},
							"sources": [
								{
									"fileName": "node_modules/framer-motion/dist/framer-motion.d.ts",
									"line": 633,
									"character": 20
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"name": "Transition"
									},
									{
										"type": "intrinsic",
										"name": "boolean"
									},
									{
										"type": "reference",
										"name": "ResolveLayoutTransition"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AnimationProps.layoutTransition"
							}
						},
						{
							"id": 309,
							"name": "margin",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Margins applied for the global spacing variables"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 100,
									"character": 8
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeSize",
								"id": 31
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.margin",
								"id": 13
							}
						},
						{
							"id": 310,
							"name": "maxWidth",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Max width applied through inline styling"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 102,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.maxWidth",
								"id": 14
							}
						},
						{
							"id": 311,
							"name": "minHeight",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Max height applied through inline styling"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 104,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.minHeight",
								"id": 15
							}
						},
						{
							"id": 312,
							"name": "minWidth",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Min width applied through inline style"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 106,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.minWidth",
								"id": 16
							}
						},
						{
							"id": 281,
							"name": "onAnimationEnd",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {},
							"sources": [
								{
									"fileName": "src/Appear/Appear.tsx",
									"line": 52,
									"character": 16
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "reflection",
										"declaration": {
											"id": 282,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"signatures": [
												{
													"id": 283,
													"name": "__call",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								]
							}
						},
						{
							"id": 284,
							"name": "onAnimationStart",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {},
							"sources": [
								{
									"fileName": "src/Appear/Appear.tsx",
									"line": 54,
									"character": 18
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "reflection",
										"declaration": {
											"id": 285,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"signatures": [
												{
													"id": 286,
													"name": "__call",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								]
							},
							"overwrites": {
								"type": "reference",
								"name": "MotionCallbacks.onAnimationStart"
							}
						},
						{
							"id": 313,
							"name": "overflow",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Overflow"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 108,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "stringLiteral",
										"value": "hidden"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.overflow",
								"id": 17
							}
						},
						{
							"id": 314,
							"name": "padding",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Padding applied for the global spacing variables"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 110,
									"character": 9
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeSize",
								"id": 31
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.padding",
								"id": 18
							}
						},
						{
							"id": 315,
							"name": "paddingHorizontal",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Horizontal padding applied for the global spacing variables"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 112,
									"character": 19
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeSize",
								"id": 31
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.paddingHorizontal",
								"id": 19
							}
						},
						{
							"id": 316,
							"name": "paddingVertical",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Vertical pa?dding applied for the global spacing variables"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 114,
									"character": 17
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeSize",
								"id": 31
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.paddingVertical",
								"id": 20
							}
						},
						{
							"id": 337,
							"name": "positionTransition",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPublic": true,
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"tags": [
									{
										"tag": "library",
										"text": "\n\nWhen a `Frame` is the child of a `Stack`, the `Stack` is responsible for its layout. This makes it harder\nfor us to know when a `Frame`'s position changes within the `Stack` and make it animate to its new position.\n\nBy adding `positionTransition` to a `Frame`, it'll automatically animate to its new position in the `Stack`,\nwhether the `Stack` layout has changed or the `Frame` has changed its order within it.\n\nIt can either be set as a `Transition`, or just `true` to use the default layout transition.\n\n```jsx\nfunction MyComponent({ distribution = \"space-around\" }) {\n  const spring = {\n    type: \"spring\",\n    damping: 10,\n    stiffness: 100\n  }\n\n  return (\n    <Stack distribution={distribution}>\n      <Frame layoutTransition={spring} />\n    </Stack>\n  )\n}\n```\n"
									},
									{
										"tag": "motion",
										"text": "\n\nIf `positionTransition` is defined on a `motion` component, it will automatically animate any changes to its layout\nusing a performant `x`/`y` transform.\n\n`positionTransition` can either be set as a `Transition`, or just `true` to use the default position transition, which is a snappy spring.\n\nIt can also be set as a function that will resolve when the component has changed layout. This function\nshould return either a `Transition`, or `true`. For advanced use-cases where you want the component\nto visually stay in its previous position, this function can also return `false`. This function will receive\nthe `delta` of the changed layout.\n\n```jsx\nconst spring = {\n  type: \"spring\",\n  damping: 10,\n  stiffness: 100\n}\n\n// This component will animate position when `isVisible` is toggled.\nconst MyComponent = ({ isOpen }) => {\n  return (\n    <motion.div positionTransition={spring} style={{ left: isOpen ? 0 : 100 }} />\n  )\n}\n\n// This component will animate items to their new position if its place in `items` changes order.\nconst MyComponent = ({ items }) => {\n  return items.map((item) => (\n    <motion.div key={item.id} positionTransition={spring} />\n  ))\n}\n```\n"
									}
								]
							},
							"sources": [
								{
									"fileName": "node_modules/framer-motion/dist/framer-motion.d.ts",
									"line": 564,
									"character": 22
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"name": "Transition"
									},
									{
										"type": "intrinsic",
										"name": "boolean"
									},
									{
										"type": "reference",
										"name": "ResolveLayoutTransition"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AnimationProps.positionTransition"
							}
						},
						{
							"id": 317,
							"name": "scrollable",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies overflow styling to enable/disable scrolling."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 116,
									"character": 12
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.scrollable",
								"id": 21
							}
						},
						{
							"id": 297,
							"name": "shrink",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Flex item property if it should shrink."
							},
							"sources": [
								{
									"fileName": "src/Flex/Flex.tsx",
									"line": 27,
									"character": 8
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "FlexProps.shrink",
								"id": 248
							}
						},
						{
							"id": 421,
							"name": "static",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"tags": [
									{
										"tag": "internal",
										"text": "\nSet to `true` to block rendering motion values (`animate`, gestures, etcetera)\non the component. This can be used to temporarily disable animations for performance reasons.\n"
									}
								]
							},
							"sources": [
								{
									"fileName": "node_modules/framer-motion/dist/framer-motion.d.ts",
									"line": 2019,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "MotionAdvancedProps.static"
							}
						},
						{
							"id": 324,
							"name": "style",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"tags": [
									{
										"tag": "library",
										"text": "\n\nThe React DOM `style` prop, useful for setting CSS properties that aren't explicitly exposed by `Frame` props.\n\n```jsx\n<Frame style={{ mixBlendMode: \"difference\" }}  />\n```\n"
									},
									{
										"tag": "motion",
										"text": "\n\nThe React DOM `style` prop, enhanced with support for `MotionValue`s and separate `transform` values.\n\n```jsx\nexport const MyComponent = () => {\n  const x = useMotionValue(0)\n\n  return <motion.div style={{ x, opacity: 1, scale: 0.5 }} />\n}\n```\n"
									}
								]
							},
							"sources": [
								{
									"fileName": "node_modules/framer-motion/dist/framer-motion.d.ts",
									"line": 2211,
									"character": 9
								}
							],
							"type": {
								"type": "reference",
								"name": "MotionStyle"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "MotionProps.style"
							}
						},
						{
							"id": 318,
							"name": "tag",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Any valid HTML or SVG element tag.",
								"tags": [
									{
										"tag": "reference",
										"text": "false\n"
									}
								]
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 122,
									"character": 5
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeAllElementTags",
								"id": 34
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.tag",
								"id": 22
							}
						},
						{
							"id": 319,
							"name": "textColor",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Text colour to be applied."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 126,
									"character": 11
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeColor",
								"id": 30
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.textColor",
								"id": 23
							}
						},
						{
							"id": 320,
							"name": "theme",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Theme applied to this element and inherited for child elements (until\na descendant theme is applied)."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 131,
									"character": 7
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeTheme",
								"id": 35
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.theme",
								"id": 24
							}
						},
						{
							"id": 336,
							"name": "transition",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Default transition. If no `transition` is defined in `animate`, it will use the transition defined here.",
								"tags": [
									{
										"tag": "library",
										"text": "\n\n```jsx\nconst spring = {\n  type: \"spring\",\n  damping: 10,\n  stiffness: 100\n}\n\n<Frame transition={spring} animate={{ scale: 1.2 }} />\n```\n"
									},
									{
										"tag": "motion",
										"text": "\n\n```jsx\nconst spring = {\n  type: \"spring\",\n  damping: 10,\n  stiffness: 100\n}\n\n<motion.div transition={spring} animate={{ scale: 1.2 }} />\n```\n"
									}
								]
							},
							"sources": [
								{
									"fileName": "node_modules/framer-motion/dist/framer-motion.d.ts",
									"line": 500,
									"character": 14
								}
							],
							"type": {
								"type": "reference",
								"name": "Transition"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AnimationProps.transition"
							}
						},
						{
							"id": 335,
							"name": "variants",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Variants allow you to define animation states and organise them by name. They allow\nyou to control animations throughout a component tree by switching a single `animate` prop.",
								"text": "Using `transition` options like `delayChildren` and `staggerChildren`, you can orchestrate\nwhen children animations play relative to their parent.\n",
								"tags": [
									{
										"tag": "library",
										"text": "\n\nAfter passing variants to one or more `Frame`'s `variants` prop, these variants\ncan be used in place of values on the `animate`, `initial`, `whileTap` and `whileHover` props.\n\n```jsx\nconst variants = {\n  active: {\n    backgroundColor: \"#f00\"\n  },\n  inactive: {\n    backgroundColor: \"#fff\",\n    transition: { duration: 2 }\n  }\n}\n\n<Frame variants={variants} animate=\"active\" />\n```\n"
									},
									{
										"tag": "motion",
										"text": "\n\nAfter passing variants to one or more `motion` component's `variants` prop, these variants\ncan be used in place of values on the `animate`, `initial`, `whileTap` and `whileHover` props.\n\n```jsx\nconst variants = {\n  active: {\n      backgroundColor: \"#f00\"\n  },\n  inactive: {\n    backgroundColor: \"#fff\",\n    transition: { duration: 2 }\n  }\n}\n\n<motion.div variants={variants} animate=\"active\" />\n```\n"
									}
								]
							},
							"sources": [
								{
									"fileName": "node_modules/framer-motion/dist/framer-motion.d.ts",
									"line": 472,
									"character": 12
								}
							],
							"type": {
								"type": "reference",
								"name": "Variants"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "AnimationProps.variants"
							}
						},
						{
							"id": 287,
							"name": "visible",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Trigger for appearance/disappearance animation.",
								"tags": [
									{
										"tag": "default",
										"text": "true\n"
									}
								]
							},
							"sources": [
								{
									"fileName": "src/Appear/Appear.tsx",
									"line": 60,
									"character": 9
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							}
						},
						{
							"id": 288,
							"name": "visibleInitially",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"tags": [
									{
										"tag": "default",
										"text": "false\n"
									}
								]
							},
							"sources": [
								{
									"fileName": "src/Appear/Appear.tsx",
									"line": 64,
									"character": 18
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							}
						},
						{
							"id": 376,
							"name": "whileHover",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Properties or variant label to animate to while the hover gesture is recognised.",
								"tags": [
									{
										"tag": "library",
										"text": "\n\n```jsx\n<Frame whileHover={{ scale: 1.2 }} />\n```\n"
									},
									{
										"tag": "motion",
										"text": "\n\n```jsx\n<motion.div whileHover={{ scale: 1.2 }} />\n```\n"
									}
								]
							},
							"sources": [
								{
									"fileName": "node_modules/framer-motion/dist/framer-motion.d.ts",
									"line": 1152,
									"character": 14
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "reference",
										"name": "TargetAndTransition"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "HoverHandlers.whileHover"
							}
						},
						{
							"id": 375,
							"name": "whileTap",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Properties or variant label to animate to while the component is pressed.",
								"tags": [
									{
										"tag": "library",
										"text": "\n\n```jsx\n<Frame whileTap={{ scale: 0.8 }} />\n```\n"
									},
									{
										"tag": "motion",
										"text": "\n\n```jsx\n<motion.div whileTap={{ scale: 0.8 }} />\n```\n"
									}
								]
							},
							"sources": [
								{
									"fileName": "node_modules/framer-motion/dist/framer-motion.d.ts",
									"line": 3693,
									"character": 12
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "reference",
										"name": "TargetAndTransition"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TapHandlers.whileTap"
							}
						},
						{
							"id": 321,
							"name": "width",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Fixed width applied through inline styling"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 133,
									"character": 7
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.width",
								"id": 25
							}
						},
						{
							"id": 298,
							"name": "wrap",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Flag to allow flex items to wrap over to new lines"
							},
							"sources": [
								{
									"fileName": "src/Flex/Flex.tsx",
									"line": 29,
									"character": 6
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "FlexProps.wrap",
								"id": 249
							}
						},
						{
							"id": 322,
							"name": "zIndex",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "z-index number for layering elements."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 135,
									"character": 8
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "number"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.zIndex",
								"id": 26
							}
						},
						{
							"id": 345,
							"name": "onAnimationComplete",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"signatures": [
								{
									"id": 346,
									"name": "onAnimationComplete",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Callback when animation defined in `animate` is complete.",
										"tags": [
											{
												"tag": "library",
												"text": "\n\n```jsx\nfunction onComplete() {\n  console.log(\"Animation completed\")\n}\n\n<Frame animate={{ x: 100 }} onAnimationComplete={onComplete} />\n```\n"
											},
											{
												"tag": "motion",
												"text": "\n\n```jsx\nfunction onComplete() {\n  console.log(\"Animation completed\")\n}\n\n<motion.div animate={{ x: 100 }} onAnimationComplete={onComplete} />\n```\n"
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "MotionCallbacks.onAnimationComplete"
									}
								}
							],
							"sources": [
								{
									"fileName": "node_modules/framer-motion/dist/framer-motion.d.ts",
									"line": 2099,
									"character": 23
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "MotionCallbacks.onAnimationComplete"
							}
						},
						{
							"id": 414,
							"name": "onDirectionLock",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"signatures": [
								{
									"id": 415,
									"name": "onDirectionLock",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Callback function that fires a drag direction is determined.",
										"tags": [
											{
												"tag": "library",
												"text": "\n\n```jsx\nfunction onDirectionLock(axis) {\n  console.log(axis)\n}\n\n<Frame\n  drag\n  dragDirectionLock\n  onDirectionLock={onDirectionLock}\n/>\n```\n"
											},
											{
												"tag": "motion",
												"text": "\n\n```jsx\n<motion.div\n  drag\n  dragDirectionLock\n  onDirectionLock={axis => console.log(axis)}\n/>\n```\n"
											}
										]
									},
									"parameters": [
										{
											"id": 416,
											"name": "axis",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "stringLiteral",
														"value": "x"
													},
													{
														"type": "stringLiteral",
														"value": "y"
													}
												]
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "DragHandlers.onDirectionLock"
									}
								}
							],
							"sources": [
								{
									"fileName": "node_modules/framer-motion/dist/framer-motion.d.ts",
									"line": 1036,
									"character": 19
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "DragHandlers.onDirectionLock"
							}
						},
						{
							"id": 410,
							"name": "onDrag",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"signatures": [
								{
									"id": 411,
									"name": "onDrag",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Callback function that fires when the component is dragged.",
										"tags": [
											{
												"tag": "library",
												"text": "\n\n```jsx\nfunction onDrag(event, info) {\n  console.log(info.point.x, info.point.y)\n}\n\n<Frame drag onDrag={onDrag} />\n```\n"
											},
											{
												"tag": "motion",
												"text": "\n\n```jsx\n<motion.div\n  drag\n  onDrag={\n    (event, info) => console.log(info.point.x, info.point.y)\n  }\n/>\n```\n"
											}
										]
									},
									"parameters": [
										{
											"id": 412,
											"name": "event",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"name": "MouseEvent"
													},
													{
														"type": "reference",
														"name": "TouchEvent"
													},
													{
														"type": "reference",
														"name": "PointerEvent"
													}
												]
											}
										},
										{
											"id": 413,
											"name": "info",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "PanInfo"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "DragHandlers.onDrag"
									}
								}
							],
							"sources": [
								{
									"fileName": "node_modules/framer-motion/dist/framer-motion.d.ts",
									"line": 1008,
									"character": 10
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "DragHandlers.onDrag"
							}
						},
						{
							"id": 406,
							"name": "onDragEnd",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"signatures": [
								{
									"id": 407,
									"name": "onDragEnd",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Callback function that fires when dragging ends.",
										"tags": [
											{
												"tag": "library",
												"text": "\n\n```jsx\nfunction onDragEnd(event, info) {\n  console.log(info.point.x, info.point.y)\n}\n\n<Frame drag onDragEnd={onDragEnd} />\n```\n"
											},
											{
												"tag": "motion",
												"text": "\n\n```jsx\n<motion.div\n  drag\n  onDragEnd={\n    (event, info) => console.log(info.point.x, info.point.y)\n  }\n/>\n```\n"
											}
										]
									},
									"parameters": [
										{
											"id": 408,
											"name": "event",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"name": "MouseEvent"
													},
													{
														"type": "reference",
														"name": "TouchEvent"
													},
													{
														"type": "reference",
														"name": "PointerEvent"
													}
												]
											}
										},
										{
											"id": 409,
											"name": "info",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "PanInfo"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "DragHandlers.onDragEnd"
									}
								}
							],
							"sources": [
								{
									"fileName": "node_modules/framer-motion/dist/framer-motion.d.ts",
									"line": 983,
									"character": 13
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "DragHandlers.onDragEnd"
							}
						},
						{
							"id": 402,
							"name": "onDragStart",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"signatures": [
								{
									"id": 403,
									"name": "onDragStart",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Callback function that fires when dragging starts.",
										"tags": [
											{
												"tag": "library",
												"text": "\n\n```jsx\nfunction onDragStart(event, info) {\n  console.log(info.point.x, info.point.y)\n}\n\n<Frame drag onDragStart={onDragStart} />\n```\n"
											},
											{
												"tag": "motion",
												"text": "\n\n```jsx\n<motion.div\n  drag\n  onDragStart={\n    (event, info) => console.log(info.point.x, info.point.y)\n  }\n/>\n```\n"
											}
										]
									},
									"parameters": [
										{
											"id": 404,
											"name": "event",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"name": "MouseEvent"
													},
													{
														"type": "reference",
														"name": "TouchEvent"
													},
													{
														"type": "reference",
														"name": "PointerEvent"
													}
												]
											}
										},
										{
											"id": 405,
											"name": "info",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "PanInfo"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "DragHandlers.onDragStart"
									}
								}
							],
							"sources": [
								{
									"fileName": "node_modules/framer-motion/dist/framer-motion.d.ts",
									"line": 958,
									"character": 15
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "DragHandlers.onDragStart"
							}
						},
						{
							"id": 417,
							"name": "onDragTransitionEnd",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"signatures": [
								{
									"id": 418,
									"name": "onDragTransitionEnd",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Callback function that fires when drag momentum/bounce transition finishes.",
										"tags": [
											{
												"tag": "library",
												"text": "\n\n```jsx\nfunction onDragTransitionEnd() {\n  console.log('drag transition has ended')\n}\n\n<Frame\n  drag\n  onDragTransitionEnd={onDragTransitionEnd}\n/>\n```\n"
											},
											{
												"tag": "motion",
												"text": "\n\n```jsx\n<motion.div\n  drag\n  onDragTransitionEnd={() => console.log('Drag transition complete')}\n/>\n```\n"
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "DragHandlers.onDragTransitionEnd"
									}
								}
							],
							"sources": [
								{
									"fileName": "node_modules/framer-motion/dist/framer-motion.d.ts",
									"line": 1062,
									"character": 23
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "DragHandlers.onDragTransitionEnd"
							}
						},
						{
							"id": 381,
							"name": "onHoverEnd",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"signatures": [
								{
									"id": 382,
									"name": "onHoverEnd",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Callback function that fires when pointer stops hovering over the component.",
										"tags": [
											{
												"tag": "library",
												"text": "\n\n```jsx\nfunction onHoverEnd(event) {\n  console.log(\"Hover ends\")\n}\n\n<Frame onHoverEnd={onHoverEnd} />\n```\n"
											},
											{
												"tag": "motion",
												"text": "\n\n```jsx\n<motion.div onHoverEnd={() => console.log(\"Hover ends\")} />\n```\n"
											}
										]
									},
									"parameters": [
										{
											"id": 383,
											"name": "event",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "MouseEvent"
											}
										},
										{
											"id": 384,
											"name": "info",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "EventInfo"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "HoverHandlers.onHoverEnd"
									}
								}
							],
							"sources": [
								{
									"fileName": "node_modules/framer-motion/dist/framer-motion.d.ts",
									"line": 1192,
									"character": 14
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "HoverHandlers.onHoverEnd"
							}
						},
						{
							"id": 377,
							"name": "onHoverStart",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"signatures": [
								{
									"id": 378,
									"name": "onHoverStart",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Callback function that fires when pointer starts hovering over the component.",
										"tags": [
											{
												"tag": "library",
												"text": "\n\n```jsx\nfunction onHoverStart(event) {\n  console.log(\"Hover starts\")\n}\n\n<Frame onHoverStart={onHoverStart} />\n```\n"
											},
											{
												"tag": "motion",
												"text": "\n\n```jsx\n<motion.div onHoverStart={() => console.log('Hover starts')} />\n```\n"
											}
										]
									},
									"parameters": [
										{
											"id": 379,
											"name": "event",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "MouseEvent"
											}
										},
										{
											"id": 380,
											"name": "info",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "EventInfo"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "HoverHandlers.onHoverStart"
									}
								}
							],
							"sources": [
								{
									"fileName": "node_modules/framer-motion/dist/framer-motion.d.ts",
									"line": 1172,
									"character": 16
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "HoverHandlers.onHoverStart"
							}
						},
						{
							"id": 347,
							"name": "onPan",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"signatures": [
								{
									"id": 348,
									"name": "onPan",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Callback function that fires when the pan gesture is recognised on this element.",
										"tags": [
											{
												"tag": "library",
												"text": "\n\n```jsx\nfunction onPan(event, info) {\n  console.log(info.point.x, info.point.y)\n}\n\n<Frame onPan={onPan} />\n```\n"
											},
											{
												"tag": "motion",
												"text": "\n\n```jsx\nfunction onPan(event, info) {\n  console.log(info.point.x, info.point.y)\n}\n\n<motion.div onPan={onPan} />\n```\n"
											}
										]
									},
									"parameters": [
										{
											"id": 349,
											"name": "event",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The originating pointer event."
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"name": "MouseEvent"
													},
													{
														"type": "reference",
														"name": "TouchEvent"
													},
													{
														"type": "reference",
														"name": "PointerEvent"
													}
												]
											}
										},
										{
											"id": 350,
											"name": "info",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "A {@link PanInfo} object containing `x` and `y` values for:\n\n  - `point`: Relative to the device or page.\n  - `delta`: Distance moved since the last event.\n  - `offset`: Offset from the original pan event.\n  - `velocity`: Current velocity of the pointer.\n"
											},
											"type": {
												"type": "reference",
												"name": "PanInfo"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "PanHandlers.onPan"
									}
								}
							],
							"sources": [
								{
									"fileName": "node_modules/framer-motion/dist/framer-motion.d.ts",
									"line": 2977,
									"character": 9
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "PanHandlers.onPan"
							}
						},
						{
							"id": 359,
							"name": "onPanEnd",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"signatures": [
								{
									"id": 360,
									"name": "onPanEnd",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Callback function that fires when the pan gesture ends on this element.",
										"tags": [
											{
												"tag": "library",
												"text": "\n\n```jsx\nfunction onPanEnd(event, info) {\n  console.log(info.point.x, info.point.y)\n}\n\n<Frame onPanEnd={onPanEnd} />\n```\n"
											},
											{
												"tag": "motion",
												"text": "\n\n```jsx\nfunction onPanEnd(event, info) {\n  console.log(info.point.x, info.point.y)\n}\n\n<motion.div onPanEnd={onPanEnd} />\n```\n"
											}
										]
									},
									"parameters": [
										{
											"id": 361,
											"name": "event",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The originating pointer event."
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"name": "MouseEvent"
													},
													{
														"type": "reference",
														"name": "TouchEvent"
													},
													{
														"type": "reference",
														"name": "PointerEvent"
													}
												]
											}
										},
										{
											"id": 362,
											"name": "info",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "A {@link PanInfo} object containing `x`/`y` values for:\n\n  - `point`: Relative to the device or page.\n  - `delta`: Distance moved since the last event.\n  - `offset`: Offset from the original pan event.\n  - `velocity`: Current velocity of the pointer.\n"
											},
											"type": {
												"type": "reference",
												"name": "PanInfo"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "PanHandlers.onPanEnd"
									}
								}
							],
							"sources": [
								{
									"fileName": "node_modules/framer-motion/dist/framer-motion.d.ts",
									"line": 3071,
									"character": 12
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "PanHandlers.onPanEnd"
							}
						},
						{
							"id": 355,
							"name": "onPanSessionStart",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"signatures": [
								{
									"id": 356,
									"name": "onPanSessionStart",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Callback function that fires when we begin detecting a pan gesture. This\nis analogous to `onMouseStart` or `onTouchStart`.",
										"tags": [
											{
												"tag": "library",
												"text": "\n\n```jsx\nfunction onPanSessionStart(event, info) {\n  console.log(info.point.x, info.point.y)\n}\n\n<Frame onPanSessionStart={onPanSessionStart} />\n```\n"
											},
											{
												"tag": "motion",
												"text": "\n\n```jsx\nfunction onPanSessionStart(event, info) {\n  console.log(info.point.x, info.point.y)\n}\n\n<motion.div onPanSessionStart={onPanSessionStart} />\n```\n"
											}
										]
									},
									"parameters": [
										{
											"id": 357,
											"name": "event",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The originating pointer event."
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"name": "MouseEvent"
													},
													{
														"type": "reference",
														"name": "TouchEvent"
													},
													{
														"type": "reference",
														"name": "PointerEvent"
													}
												]
											}
										},
										{
											"id": 358,
											"name": "info",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "An {@link EventInfo} object containing `x`/`y` values for:\n\n  - `point`: Relative to the device or page.\n"
											},
											"type": {
												"type": "reference",
												"name": "EventInfo"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "PanHandlers.onPanSessionStart"
									}
								}
							],
							"sources": [
								{
									"fileName": "node_modules/framer-motion/dist/framer-motion.d.ts",
									"line": 3039,
									"character": 21
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "PanHandlers.onPanSessionStart"
							}
						},
						{
							"id": 351,
							"name": "onPanStart",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"signatures": [
								{
									"id": 352,
									"name": "onPanStart",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Callback function that fires when the pan gesture begins on this element.",
										"tags": [
											{
												"tag": "library",
												"text": "\n\n```jsx\nfunction onPanStart(event, info) {\n  console.log(info.point.x, info.point.y)\n}\n\n<Frame onPanStart={onPanStart} />\n```\n"
											},
											{
												"tag": "motion",
												"text": "\n\n```jsx\nfunction onPanStart(event, info) {\n  console.log(info.point.x, info.point.y)\n}\n\n<motion.div onPanStart={onPanStart} />\n```\n"
											}
										]
									},
									"parameters": [
										{
											"id": 353,
											"name": "event",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The originating pointer event."
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"name": "MouseEvent"
													},
													{
														"type": "reference",
														"name": "TouchEvent"
													},
													{
														"type": "reference",
														"name": "PointerEvent"
													}
												]
											}
										},
										{
											"id": 354,
											"name": "info",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "A {@link PanInfo} object containing `x`/`y` values for:\n\n  - `point`: Relative to the device or page.\n  - `delta`: Distance moved since the last event.\n  - `offset`: Offset from the original pan event.\n  - `velocity`: Current velocity of the pointer.\n"
											},
											"type": {
												"type": "reference",
												"name": "PanInfo"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "PanHandlers.onPanStart"
									}
								}
							],
							"sources": [
								{
									"fileName": "node_modules/framer-motion/dist/framer-motion.d.ts",
									"line": 3009,
									"character": 14
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "PanHandlers.onPanStart"
							}
						},
						{
							"id": 363,
							"name": "onTap",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"signatures": [
								{
									"id": 364,
									"name": "onTap",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Callback when the tap gesture successfully ends on this element.",
										"tags": [
											{
												"tag": "library",
												"text": "\n\n```jsx\nfunction onTap(event, info) {\n  console.log(info.point.x, info.point.y)\n}\n\n<Frame onTap={onTap} />\n```\n"
											},
											{
												"tag": "motion",
												"text": "\n\n```jsx\nfunction onTap(event, info) {\n  console.log(info.point.x, info.point.y)\n}\n\n<motion.div onTap={onTap} />\n```\n"
											}
										]
									},
									"parameters": [
										{
											"id": 365,
											"name": "event",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The originating pointer event."
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"name": "MouseEvent"
													},
													{
														"type": "reference",
														"name": "TouchEvent"
													},
													{
														"type": "reference",
														"name": "PointerEvent"
													}
												]
											}
										},
										{
											"id": 366,
											"name": "info",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "An {@link TapInfo} object containing `x` and `y` values for the `point` relative to the device or page.\n"
											},
											"type": {
												"type": "reference",
												"name": "TapInfo"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "TapHandlers.onTap"
									}
								}
							],
							"sources": [
								{
									"fileName": "node_modules/framer-motion/dist/framer-motion.d.ts",
									"line": 3623,
									"character": 9
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "TapHandlers.onTap"
							}
						},
						{
							"id": 371,
							"name": "onTapCancel",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"signatures": [
								{
									"id": 372,
									"name": "onTapCancel",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Callback when the tap gesture ends outside this element.",
										"tags": [
											{
												"tag": "library",
												"text": "\n\n```jsx\nfunction onTapCancel(event, info) {\n  console.log(info.point.x, info.point.y)\n}\n\n<Frame onTapCancel={onTapCancel} />\n```\n"
											},
											{
												"tag": "motion",
												"text": "\n\n```jsx\nfunction onTapCancel(event, info) {\n  console.log(info.point.x, info.point.y)\n}\n\n<motion.div onTapCancel={onTapCancel} />\n```\n"
											}
										]
									},
									"parameters": [
										{
											"id": 373,
											"name": "event",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The originating pointer event."
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"name": "MouseEvent"
													},
													{
														"type": "reference",
														"name": "TouchEvent"
													},
													{
														"type": "reference",
														"name": "PointerEvent"
													}
												]
											}
										},
										{
											"id": 374,
											"name": "info",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "An {@link TapInfo} object containing `x` and `y` values for the `point` relative to the device or page.\n"
											},
											"type": {
												"type": "reference",
												"name": "TapInfo"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "TapHandlers.onTapCancel"
									}
								}
							],
							"sources": [
								{
									"fileName": "node_modules/framer-motion/dist/framer-motion.d.ts",
									"line": 3677,
									"character": 15
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "TapHandlers.onTapCancel"
							}
						},
						{
							"id": 367,
							"name": "onTapStart",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"signatures": [
								{
									"id": 368,
									"name": "onTapStart",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Callback when the tap gesture starts on this element.",
										"tags": [
											{
												"tag": "library",
												"text": "\n\n```jsx\nfunction onTapStart(event, info) {\n  console.log(info.point.x, info.point.y)\n}\n\n<Frame onTapStart={onTapStart} />\n```\n"
											},
											{
												"tag": "motion",
												"text": "\n\n```jsx\nfunction onTapStart(event, info) {\n  console.log(info.point.x, info.point.y)\n}\n\n<motion.div onTapStart={onTapStart} />\n```\n"
											}
										]
									},
									"parameters": [
										{
											"id": 369,
											"name": "event",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The originating pointer event."
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"name": "MouseEvent"
													},
													{
														"type": "reference",
														"name": "TouchEvent"
													},
													{
														"type": "reference",
														"name": "PointerEvent"
													}
												]
											}
										},
										{
											"id": 370,
											"name": "info",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "An {@link TapInfo} object containing `x` and `y` values for the `point` relative to the device or page.\n"
											},
											"type": {
												"type": "reference",
												"name": "TapInfo"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "TapHandlers.onTapStart"
									}
								}
							],
							"sources": [
								{
									"fileName": "node_modules/framer-motion/dist/framer-motion.d.ts",
									"line": 3650,
									"character": 14
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "TapHandlers.onTapStart"
							}
						},
						{
							"id": 339,
							"name": "onUpdate",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"signatures": [
								{
									"id": 340,
									"name": "onUpdate",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Callback with latest motion values, fired max once per frame.",
										"tags": [
											{
												"tag": "library",
												"text": "\n\n```jsx\nfunction onUpdate(latest) {\n  console.log(latest.x, latest.opacity)\n}\n\n<Frame animate={{ x: 100, opacity: 0 }} onUpdate={onUpdate} />\n```\n"
											},
											{
												"tag": "motion",
												"text": "\n\n```jsx\nfunction onUpdate(latest) {\n  console.log(latest.x, latest.opacity)\n}\n\n<motion.div animate={{ x: 100, opacity: 0 }} onUpdate={onUpdate} />\n```\n"
											}
										]
									},
									"parameters": [
										{
											"id": 341,
											"name": "latest",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 342,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"indexSignature": [
														{
															"id": 343,
															"name": "__index",
															"kind": 8192,
															"kindString": "Index signature",
															"flags": {},
															"parameters": [
																{
																	"id": 344,
																	"name": "key",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"type": {
																		"type": "intrinsic",
																		"name": "string"
																	}
																}
															],
															"type": {
																"type": "union",
																"types": [
																	{
																		"type": "intrinsic",
																		"name": "string"
																	},
																	{
																		"type": "intrinsic",
																		"name": "number"
																	}
																]
															}
														}
													],
													"sources": [
														{
															"fileName": "node_modules/framer-motion/dist/framer-motion.d.ts",
															"line": 2049,
															"character": 21
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "MotionCallbacks.onUpdate"
									}
								}
							],
							"sources": [
								{
									"fileName": "node_modules/framer-motion/dist/framer-motion.d.ts",
									"line": 2049,
									"character": 12
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "MotionCallbacks.onUpdate"
							}
						},
						{
							"id": 325,
							"name": "transformTemplate",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true,
								"isExported": true,
								"isOptional": true
							},
							"signatures": [
								{
									"id": 326,
									"name": "transformTemplate",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isPublic": true
									},
									"comment": {
										"shortText": "By default, Framer Motion generates a `transform` property with a sensible transform order. `transformTemplate`\ncan be used to create a different order, or to append/preprend the automatically generated `transform` property.",
										"tags": [
											{
												"tag": "library",
												"text": "\n\n```jsx\nfunction transformTemplate({ x, rotate }) {\n  return `rotate(${rotate}deg) translateX(${x}px)`\n}\n\n<Frame x={0} rotate={180} transformTemplate={transformTemplate} />\n```\n"
											},
											{
												"tag": "motion",
												"text": "\n\n```jsx\n<motion.div\n  style={{ x: 0, rotate: 180 }}\n  transformTemplate={\n    ({ x, rotate }) => `rotate(${rotate}deg) translateX(${x}px)`\n  }\n/>\n```\n"
											}
										]
									},
									"parameters": [
										{
											"id": 327,
											"name": "transform",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The latest animated transform props."
											},
											"type": {
												"type": "reference",
												"name": "TransformProperties"
											}
										},
										{
											"id": 328,
											"name": "generatedTransform",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The transform string as automatically generated by Framer Motion\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "MotionProps.transformTemplate"
									}
								}
							],
							"sources": [
								{
									"fileName": "node_modules/framer-motion/dist/framer-motion.d.ts",
									"line": 2242,
									"character": 21
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "MotionProps.transformTemplate"
							}
						},
						{
							"id": 329,
							"name": "transformValues",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"signatures": [
								{
									"id": 330,
									"name": "transformValues",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "This allows values to be transformed before being animated or set as styles.",
										"text": "For instance, this allows custom values in Framer Library like `size` to be converted into `width` and `height`.\nIt also allows us a chance to take a value like `Color` and convert it to an animatable color string.\n\nA few structural typing changes need making before this can be a public property:\n- Allow `Target` values to be appended by user-defined types (delete `CustomStyles` - does `size` throw a type error?)\n- Extract `CustomValueType` as a separate user-defined type (delete `CustomValueType` and animate a `Color` - does this throw a type error?).\n",
										"tags": [
											{
												"tag": "internal",
												"text": "\n"
											}
										]
									},
									"typeParameter": [
										{
											"id": 331,
											"name": "V",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										}
									],
									"parameters": [
										{
											"id": 332,
											"name": "values",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "-\n"
											},
											"type": {
												"type": "typeParameter",
												"name": "V",
												"constraint": {
													"type": "intrinsic",
													"name": "any"
												}
											}
										}
									],
									"type": {
										"type": "typeParameter",
										"name": "V",
										"constraint": {
											"type": "intrinsic",
											"name": "any"
										}
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "MotionProps.transformValues"
									}
								}
							],
							"sources": [
								{
									"fileName": "node_modules/framer-motion/dist/framer-motion.d.ts",
									"line": 2257,
									"character": 19
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "MotionProps.transformValues"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								399,
								397,
								398,
								299,
								289,
								290,
								291,
								292,
								333,
								278,
								300,
								293,
								301,
								302,
								303,
								304,
								305,
								419,
								279,
								294,
								306,
								385,
								388,
								386,
								394,
								395,
								400,
								401,
								387,
								396,
								280,
								334,
								307,
								295,
								296,
								308,
								420,
								323,
								338,
								309,
								310,
								311,
								312,
								281,
								284,
								313,
								314,
								315,
								316,
								337,
								317,
								297,
								421,
								324,
								318,
								319,
								320,
								336,
								335,
								287,
								288,
								376,
								375,
								321,
								298,
								322
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								345,
								414,
								410,
								406,
								402,
								417,
								381,
								377,
								347,
								359,
								355,
								351,
								363,
								371,
								367,
								339,
								325,
								329
							]
						}
					],
					"sources": [
						{
							"fileName": "src/Appear/Appear.tsx",
							"line": 33,
							"character": 28
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"name": "FlexProps",
							"id": 239
						},
						{
							"type": "reference",
							"name": "MotionProps"
						}
					]
				},
				{
					"id": 424,
					"name": "TypeAnimation",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {
						"isExported": true
					},
					"sources": [
						{
							"fileName": "src/Appear/Appear.tsx",
							"line": 23,
							"character": 25
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "stringLiteral",
								"value": "Fade"
							},
							{
								"type": "stringLiteral",
								"value": "FadeSlideUp"
							},
							{
								"type": "stringLiteral",
								"value": "FadeSlideRight"
							},
							{
								"type": "stringLiteral",
								"value": "FadeSlideDown"
							},
							{
								"type": "stringLiteral",
								"value": "FadeSlideLeft"
							},
							{
								"type": "stringLiteral",
								"value": "Pop"
							},
							{
								"type": "stringLiteral",
								"value": "ScaleYDown"
							},
							{
								"type": "stringLiteral",
								"value": "ScaleYUp"
							}
						]
					}
				},
				{
					"id": 425,
					"name": "Appear",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "src/Appear/Appear.tsx",
							"line": 67,
							"character": 12
						}
					],
					"type": {
						"type": "reference",
						"name": "React.FC",
						"typeArguments": [
							{
								"type": "reference",
								"name": "Attributes",
								"id": 27,
								"typeArguments": [
									{
										"type": "reference",
										"name": "HTMLElement"
									},
									{
										"type": "reference",
										"name": "AppearProps",
										"id": 277
									}
								]
							}
						]
					},
					"defaultValue": " ((props) => {\n  const {\n    animation = 'FadeSlideUp',\n    delay = 0,\n    duration = transitionTimeFast,\n    visible = true,\n    visibleInitially = false,\n    ...rest\n  } = props;\n\n  if (!animations[animation]) {\n    return null;\n  }\n\n  return (\n    <FlexMotion { ...rest }\n        animate={ visible ? 'visible' : 'hidden' }\n        initial={ visibleInitially ? 'visible' : 'hidden' }\n        transition={ { delay: delay / 1000, duration: duration / 1000 } }\n        variants={ animations[animation] } />\n  );\n})"
				},
				{
					"id": 423,
					"name": "FlexMotion",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isConst": true
					},
					"sources": [
						{
							"fileName": "src/Appear/Appear.tsx",
							"line": 18,
							"character": 16
						}
					],
					"type": {
						"type": "reference",
						"name": "ForwardRefExoticComponent",
						"typeArguments": [
							{
								"type": "intersection",
								"types": [
									{
										"type": "reference",
										"name": "FlexProps",
										"id": 239
									},
									{
										"type": "reference",
										"name": "MotionProps"
									},
									{
										"type": "reference",
										"name": "RefAttributes",
										"typeArguments": [
											{
												"type": "reference",
												"name": "Element"
											}
										]
									}
								]
							}
						]
					},
					"defaultValue": " motion.custom<FlexProps>(\n  React.forwardRef<HTMLDivElement, FlexProps>((props, ref) =>\n    <Flex { ...omit(props, motionProps) } ref={ ref } />\n  ))"
				},
				{
					"id": 422,
					"name": "motionProps",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isConst": true
					},
					"sources": [
						{
							"fileName": "src/Appear/Appear.tsx",
							"line": 10,
							"character": 17
						}
					],
					"type": {
						"type": "array",
						"elementType": {
							"type": "union",
							"types": [
								{
									"type": "stringLiteral",
									"value": "style"
								},
								{
									"type": "stringLiteral",
									"value": "onDrag"
								},
								{
									"type": "stringLiteral",
									"value": "onDragEnd"
								},
								{
									"type": "stringLiteral",
									"value": "onDragStart"
								},
								{
									"type": "stringLiteral",
									"value": "onAnimationStart"
								},
								{
									"type": "stringLiteral",
									"value": "inherit"
								},
								{
									"type": "stringLiteral",
									"value": "initial"
								},
								{
									"type": "stringLiteral",
									"value": "static"
								},
								{
									"type": "stringLiteral",
									"value": "drag"
								},
								{
									"type": "stringLiteral",
									"value": "animate"
								},
								{
									"type": "stringLiteral",
									"value": "transition"
								},
								{
									"type": "stringLiteral",
									"value": "transformTemplate"
								},
								{
									"type": "stringLiteral",
									"value": "transformValues"
								},
								{
									"type": "stringLiteral",
									"value": "exit"
								},
								{
									"type": "stringLiteral",
									"value": "variants"
								},
								{
									"type": "stringLiteral",
									"value": "positionTransition"
								},
								{
									"type": "stringLiteral",
									"value": "layoutTransition"
								},
								{
									"type": "stringLiteral",
									"value": "onUpdate"
								},
								{
									"type": "stringLiteral",
									"value": "onAnimationComplete"
								},
								{
									"type": "stringLiteral",
									"value": "onPan"
								},
								{
									"type": "stringLiteral",
									"value": "onPanStart"
								},
								{
									"type": "stringLiteral",
									"value": "onPanSessionStart"
								},
								{
									"type": "stringLiteral",
									"value": "onPanEnd"
								},
								{
									"type": "stringLiteral",
									"value": "onTap"
								},
								{
									"type": "stringLiteral",
									"value": "onTapStart"
								},
								{
									"type": "stringLiteral",
									"value": "onTapCancel"
								},
								{
									"type": "stringLiteral",
									"value": "whileTap"
								},
								{
									"type": "stringLiteral",
									"value": "whileHover"
								},
								{
									"type": "stringLiteral",
									"value": "onHoverStart"
								},
								{
									"type": "stringLiteral",
									"value": "onHoverEnd"
								},
								{
									"type": "stringLiteral",
									"value": "dragDirectionLock"
								},
								{
									"type": "stringLiteral",
									"value": "dragPropagation"
								},
								{
									"type": "stringLiteral",
									"value": "dragConstraints"
								},
								{
									"type": "stringLiteral",
									"value": "dragElastic"
								},
								{
									"type": "stringLiteral",
									"value": "dragMomentum"
								},
								{
									"type": "stringLiteral",
									"value": "dragTransition"
								},
								{
									"type": "stringLiteral",
									"value": "_dragValueX"
								},
								{
									"type": "stringLiteral",
									"value": "_dragValueY"
								},
								{
									"type": "stringLiteral",
									"value": "_dragTransitionControls"
								},
								{
									"type": "stringLiteral",
									"value": "dragOriginX"
								},
								{
									"type": "stringLiteral",
									"value": "dragOriginY"
								},
								{
									"type": "stringLiteral",
									"value": "onDirectionLock"
								},
								{
									"type": "stringLiteral",
									"value": "onDragTransitionEnd"
								},
								{
									"type": "stringLiteral",
									"value": "custom"
								}
							]
						}
					},
					"defaultValue": " [\n  'animate',\n  'onAnimationComplete',\n  'onAnimationStart',\n  'transition',\n  'variants',\n]"
				}
			],
			"groups": [
				{
					"title": "Interfaces",
					"kind": 256,
					"children": [
						277
					]
				},
				{
					"title": "Type aliases",
					"kind": 4194304,
					"children": [
						424
					]
				},
				{
					"title": "Variables",
					"kind": 32,
					"children": [
						425,
						423,
						422
					]
				}
			],
			"sources": [
				{
					"fileName": "src/Appear/Appear.tsx",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 172,
			"name": "\"Appear/animations\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "/Users/harry/Projects/personal/preshape/src/Appear/animations.ts",
			"children": [
				{
					"id": 173,
					"name": "variants",
					"kind": 2097152,
					"kindString": "Object literal",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"children": [
						{
							"id": 174,
							"name": "Fade",
							"kind": 2097152,
							"kindString": "Object literal",
							"flags": {
								"isExported": true
							},
							"children": [
								{
									"id": 175,
									"name": "hidden",
									"kind": 2097152,
									"kindString": "Object literal",
									"flags": {
										"isExported": true
									},
									"children": [
										{
											"id": 176,
											"name": "opacity",
											"kind": 32,
											"kindString": "Variable",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "src/Appear/animations.ts",
													"line": 10,
													"character": 13
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											},
											"defaultValue": "0"
										}
									],
									"groups": [
										{
											"title": "Variables",
											"kind": 32,
											"children": [
												176
											]
										}
									],
									"sources": [
										{
											"fileName": "src/Appear/animations.ts",
											"line": 9,
											"character": 10
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "object"
									}
								},
								{
									"id": 177,
									"name": "visible",
									"kind": 2097152,
									"kindString": "Object literal",
									"flags": {
										"isExported": true
									},
									"children": [
										{
											"id": 178,
											"name": "opacity",
											"kind": 32,
											"kindString": "Variable",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "src/Appear/animations.ts",
													"line": 13,
													"character": 13
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											},
											"defaultValue": "1"
										}
									],
									"groups": [
										{
											"title": "Variables",
											"kind": 32,
											"children": [
												178
											]
										}
									],
									"sources": [
										{
											"fileName": "src/Appear/animations.ts",
											"line": 12,
											"character": 11
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "object"
									}
								}
							],
							"groups": [
								{
									"title": "Object literals",
									"kind": 2097152,
									"children": [
										175,
										177
									]
								}
							],
							"sources": [
								{
									"fileName": "src/Appear/animations.ts",
									"line": 8,
									"character": 6
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "object"
							}
						},
						{
							"id": 197,
							"name": "FadeSlideDown",
							"kind": 2097152,
							"kindString": "Object literal",
							"flags": {
								"isExported": true
							},
							"children": [
								{
									"id": 198,
									"name": "hidden",
									"kind": 2097152,
									"kindString": "Object literal",
									"flags": {
										"isExported": true
									},
									"children": [
										{
											"id": 199,
											"name": "opacity",
											"kind": 32,
											"kindString": "Variable",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "src/Appear/animations.ts",
													"line": 42,
													"character": 13
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											},
											"defaultValue": "0"
										},
										{
											"id": 200,
											"name": "origin",
											"kind": 32,
											"kindString": "Variable",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "src/Appear/animations.ts",
													"line": 43,
													"character": 12
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											},
											"defaultValue": "0.5"
										},
										{
											"id": 201,
											"name": "y",
											"kind": 32,
											"kindString": "Variable",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "src/Appear/animations.ts",
													"line": 44,
													"character": 7
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											},
											"defaultValue": " -sizeX4Px"
										}
									],
									"groups": [
										{
											"title": "Variables",
											"kind": 32,
											"children": [
												199,
												200,
												201
											]
										}
									],
									"sources": [
										{
											"fileName": "src/Appear/animations.ts",
											"line": 41,
											"character": 10
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "object"
									}
								},
								{
									"id": 202,
									"name": "visible",
									"kind": 2097152,
									"kindString": "Object literal",
									"flags": {
										"isExported": true
									},
									"children": [
										{
											"id": 203,
											"name": "opacity",
											"kind": 32,
											"kindString": "Variable",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "src/Appear/animations.ts",
													"line": 47,
													"character": 13
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											},
											"defaultValue": "1"
										},
										{
											"id": 204,
											"name": "origin",
											"kind": 32,
											"kindString": "Variable",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "src/Appear/animations.ts",
													"line": 48,
													"character": 12
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											},
											"defaultValue": "0.5"
										},
										{
											"id": 205,
											"name": "y",
											"kind": 32,
											"kindString": "Variable",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "src/Appear/animations.ts",
													"line": 49,
													"character": 7
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											},
											"defaultValue": "0"
										}
									],
									"groups": [
										{
											"title": "Variables",
											"kind": 32,
											"children": [
												203,
												204,
												205
											]
										}
									],
									"sources": [
										{
											"fileName": "src/Appear/animations.ts",
											"line": 46,
											"character": 11
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "object"
									}
								}
							],
							"groups": [
								{
									"title": "Object literals",
									"kind": 2097152,
									"children": [
										198,
										202
									]
								}
							],
							"sources": [
								{
									"fileName": "src/Appear/animations.ts",
									"line": 40,
									"character": 15
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "object"
							}
						},
						{
							"id": 206,
							"name": "FadeSlideLeft",
							"kind": 2097152,
							"kindString": "Object literal",
							"flags": {
								"isExported": true
							},
							"children": [
								{
									"id": 207,
									"name": "hidden",
									"kind": 2097152,
									"kindString": "Object literal",
									"flags": {
										"isExported": true
									},
									"children": [
										{
											"id": 208,
											"name": "opacity",
											"kind": 32,
											"kindString": "Variable",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "src/Appear/animations.ts",
													"line": 54,
													"character": 13
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											},
											"defaultValue": "0"
										},
										{
											"id": 209,
											"name": "origin",
											"kind": 32,
											"kindString": "Variable",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "src/Appear/animations.ts",
													"line": 55,
													"character": 12
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											},
											"defaultValue": "0.5"
										},
										{
											"id": 210,
											"name": "x",
											"kind": 32,
											"kindString": "Variable",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "src/Appear/animations.ts",
													"line": 56,
													"character": 7
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											},
											"defaultValue": " sizeX4Px"
										}
									],
									"groups": [
										{
											"title": "Variables",
											"kind": 32,
											"children": [
												208,
												209,
												210
											]
										}
									],
									"sources": [
										{
											"fileName": "src/Appear/animations.ts",
											"line": 53,
											"character": 10
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "object"
									}
								},
								{
									"id": 211,
									"name": "visible",
									"kind": 2097152,
									"kindString": "Object literal",
									"flags": {
										"isExported": true
									},
									"children": [
										{
											"id": 212,
											"name": "opacity",
											"kind": 32,
											"kindString": "Variable",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "src/Appear/animations.ts",
													"line": 59,
													"character": 13
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											},
											"defaultValue": "1"
										},
										{
											"id": 213,
											"name": "origin",
											"kind": 32,
											"kindString": "Variable",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "src/Appear/animations.ts",
													"line": 60,
													"character": 12
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											},
											"defaultValue": "0.5"
										},
										{
											"id": 214,
											"name": "x",
											"kind": 32,
											"kindString": "Variable",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "src/Appear/animations.ts",
													"line": 61,
													"character": 7
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											},
											"defaultValue": "0"
										}
									],
									"groups": [
										{
											"title": "Variables",
											"kind": 32,
											"children": [
												212,
												213,
												214
											]
										}
									],
									"sources": [
										{
											"fileName": "src/Appear/animations.ts",
											"line": 58,
											"character": 11
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "object"
									}
								}
							],
							"groups": [
								{
									"title": "Object literals",
									"kind": 2097152,
									"children": [
										207,
										211
									]
								}
							],
							"sources": [
								{
									"fileName": "src/Appear/animations.ts",
									"line": 52,
									"character": 15
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "object"
							}
						},
						{
							"id": 188,
							"name": "FadeSlideRight",
							"kind": 2097152,
							"kindString": "Object literal",
							"flags": {
								"isExported": true
							},
							"children": [
								{
									"id": 189,
									"name": "hidden",
									"kind": 2097152,
									"kindString": "Object literal",
									"flags": {
										"isExported": true
									},
									"children": [
										{
											"id": 190,
											"name": "opacity",
											"kind": 32,
											"kindString": "Variable",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "src/Appear/animations.ts",
													"line": 30,
													"character": 13
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											},
											"defaultValue": "0"
										},
										{
											"id": 191,
											"name": "origin",
											"kind": 32,
											"kindString": "Variable",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "src/Appear/animations.ts",
													"line": 31,
													"character": 12
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											},
											"defaultValue": "0.5"
										},
										{
											"id": 192,
											"name": "x",
											"kind": 32,
											"kindString": "Variable",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "src/Appear/animations.ts",
													"line": 32,
													"character": 7
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											},
											"defaultValue": " -sizeX4Px"
										}
									],
									"groups": [
										{
											"title": "Variables",
											"kind": 32,
											"children": [
												190,
												191,
												192
											]
										}
									],
									"sources": [
										{
											"fileName": "src/Appear/animations.ts",
											"line": 29,
											"character": 10
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "object"
									}
								},
								{
									"id": 193,
									"name": "visible",
									"kind": 2097152,
									"kindString": "Object literal",
									"flags": {
										"isExported": true
									},
									"children": [
										{
											"id": 194,
											"name": "opacity",
											"kind": 32,
											"kindString": "Variable",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "src/Appear/animations.ts",
													"line": 35,
													"character": 13
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											},
											"defaultValue": "1"
										},
										{
											"id": 195,
											"name": "origin",
											"kind": 32,
											"kindString": "Variable",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "src/Appear/animations.ts",
													"line": 36,
													"character": 12
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											},
											"defaultValue": "0.5"
										},
										{
											"id": 196,
											"name": "x",
											"kind": 32,
											"kindString": "Variable",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "src/Appear/animations.ts",
													"line": 37,
													"character": 7
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											},
											"defaultValue": "0"
										}
									],
									"groups": [
										{
											"title": "Variables",
											"kind": 32,
											"children": [
												194,
												195,
												196
											]
										}
									],
									"sources": [
										{
											"fileName": "src/Appear/animations.ts",
											"line": 34,
											"character": 11
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "object"
									}
								}
							],
							"groups": [
								{
									"title": "Object literals",
									"kind": 2097152,
									"children": [
										189,
										193
									]
								}
							],
							"sources": [
								{
									"fileName": "src/Appear/animations.ts",
									"line": 28,
									"character": 16
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "object"
							}
						},
						{
							"id": 179,
							"name": "FadeSlideUp",
							"kind": 2097152,
							"kindString": "Object literal",
							"flags": {
								"isExported": true
							},
							"children": [
								{
									"id": 180,
									"name": "hidden",
									"kind": 2097152,
									"kindString": "Object literal",
									"flags": {
										"isExported": true
									},
									"children": [
										{
											"id": 181,
											"name": "opacity",
											"kind": 32,
											"kindString": "Variable",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "src/Appear/animations.ts",
													"line": 18,
													"character": 13
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											},
											"defaultValue": "0"
										},
										{
											"id": 182,
											"name": "origin",
											"kind": 32,
											"kindString": "Variable",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "src/Appear/animations.ts",
													"line": 19,
													"character": 12
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											},
											"defaultValue": "0.5"
										},
										{
											"id": 183,
											"name": "y",
											"kind": 32,
											"kindString": "Variable",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "src/Appear/animations.ts",
													"line": 20,
													"character": 7
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											},
											"defaultValue": " sizeX4Px"
										}
									],
									"groups": [
										{
											"title": "Variables",
											"kind": 32,
											"children": [
												181,
												182,
												183
											]
										}
									],
									"sources": [
										{
											"fileName": "src/Appear/animations.ts",
											"line": 17,
											"character": 10
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "object"
									}
								},
								{
									"id": 184,
									"name": "visible",
									"kind": 2097152,
									"kindString": "Object literal",
									"flags": {
										"isExported": true
									},
									"children": [
										{
											"id": 185,
											"name": "opacity",
											"kind": 32,
											"kindString": "Variable",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "src/Appear/animations.ts",
													"line": 23,
													"character": 13
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											},
											"defaultValue": "1"
										},
										{
											"id": 186,
											"name": "origin",
											"kind": 32,
											"kindString": "Variable",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "src/Appear/animations.ts",
													"line": 24,
													"character": 12
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											},
											"defaultValue": "0.5"
										},
										{
											"id": 187,
											"name": "y",
											"kind": 32,
											"kindString": "Variable",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "src/Appear/animations.ts",
													"line": 25,
													"character": 7
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											},
											"defaultValue": "0"
										}
									],
									"groups": [
										{
											"title": "Variables",
											"kind": 32,
											"children": [
												185,
												186,
												187
											]
										}
									],
									"sources": [
										{
											"fileName": "src/Appear/animations.ts",
											"line": 22,
											"character": 11
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "object"
									}
								}
							],
							"groups": [
								{
									"title": "Object literals",
									"kind": 2097152,
									"children": [
										180,
										184
									]
								}
							],
							"sources": [
								{
									"fileName": "src/Appear/animations.ts",
									"line": 16,
									"character": 13
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "object"
							}
						},
						{
							"id": 215,
							"name": "Pop",
							"kind": 2097152,
							"kindString": "Object literal",
							"flags": {
								"isExported": true
							},
							"children": [
								{
									"id": 216,
									"name": "hidden",
									"kind": 2097152,
									"kindString": "Object literal",
									"flags": {
										"isExported": true
									},
									"children": [
										{
											"id": 218,
											"name": "opacity",
											"kind": 32,
											"kindString": "Variable",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "src/Appear/animations.ts",
													"line": 67,
													"character": 13
												}
											],
											"type": {
												"type": "tuple",
												"elements": [
													{
														"type": "intrinsic",
														"name": "number"
													},
													{
														"type": "intrinsic",
														"name": "number"
													},
													{
														"type": "intrinsic",
														"name": "number"
													}
												]
											},
											"defaultValue": " [1, 1, 0]"
										},
										{
											"id": 219,
											"name": "origin",
											"kind": 32,
											"kindString": "Variable",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "src/Appear/animations.ts",
													"line": 68,
													"character": 12
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											},
											"defaultValue": "0.5"
										},
										{
											"id": 217,
											"name": "scale",
											"kind": 32,
											"kindString": "Variable",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "src/Appear/animations.ts",
													"line": 66,
													"character": 11
												}
											],
											"type": {
												"type": "tuple",
												"elements": [
													{
														"type": "intrinsic",
														"name": "number"
													},
													{
														"type": "intrinsic",
														"name": "number"
													},
													{
														"type": "intrinsic",
														"name": "number"
													},
													{
														"type": "intrinsic",
														"name": "number"
													},
													{
														"type": "intrinsic",
														"name": "number"
													}
												]
											},
											"defaultValue": " [1, 0.9, 0.9, 1.03, 0.3]"
										}
									],
									"groups": [
										{
											"title": "Variables",
											"kind": 32,
											"children": [
												218,
												219,
												217
											]
										}
									],
									"sources": [
										{
											"fileName": "src/Appear/animations.ts",
											"line": 65,
											"character": 10
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "object"
									}
								},
								{
									"id": 220,
									"name": "visible",
									"kind": 2097152,
									"kindString": "Object literal",
									"flags": {
										"isExported": true
									},
									"children": [
										{
											"id": 222,
											"name": "opacity",
											"kind": 32,
											"kindString": "Variable",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "src/Appear/animations.ts",
													"line": 72,
													"character": 13
												}
											],
											"type": {
												"type": "tuple",
												"elements": [
													{
														"type": "intrinsic",
														"name": "number"
													},
													{
														"type": "intrinsic",
														"name": "number"
													}
												]
											},
											"defaultValue": " [0, 1]"
										},
										{
											"id": 223,
											"name": "origin",
											"kind": 32,
											"kindString": "Variable",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "src/Appear/animations.ts",
													"line": 73,
													"character": 12
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											},
											"defaultValue": "0.5"
										},
										{
											"id": 221,
											"name": "scale",
											"kind": 32,
											"kindString": "Variable",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "src/Appear/animations.ts",
													"line": 71,
													"character": 11
												}
											],
											"type": {
												"type": "tuple",
												"elements": [
													{
														"type": "intrinsic",
														"name": "number"
													},
													{
														"type": "intrinsic",
														"name": "number"
													},
													{
														"type": "intrinsic",
														"name": "number"
													},
													{
														"type": "intrinsic",
														"name": "number"
													},
													{
														"type": "intrinsic",
														"name": "number"
													},
													{
														"type": "intrinsic",
														"name": "number"
													}
												]
											},
											"defaultValue": " [0.3, 1.1, 0.9, 1.03, 0.97, 1]"
										}
									],
									"groups": [
										{
											"title": "Variables",
											"kind": 32,
											"children": [
												222,
												223,
												221
											]
										}
									],
									"sources": [
										{
											"fileName": "src/Appear/animations.ts",
											"line": 70,
											"character": 11
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "object"
									}
								}
							],
							"groups": [
								{
									"title": "Object literals",
									"kind": 2097152,
									"children": [
										216,
										220
									]
								}
							],
							"sources": [
								{
									"fileName": "src/Appear/animations.ts",
									"line": 64,
									"character": 5
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "object"
							}
						},
						{
							"id": 224,
							"name": "ScaleYDown",
							"kind": 2097152,
							"kindString": "Object literal",
							"flags": {
								"isExported": true
							},
							"children": [
								{
									"id": 225,
									"name": "hidden",
									"kind": 2097152,
									"kindString": "Object literal",
									"flags": {
										"isExported": true
									},
									"children": [
										{
											"id": 226,
											"name": "originY",
											"kind": 32,
											"kindString": "Variable",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "src/Appear/animations.ts",
													"line": 78,
													"character": 13
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											},
											"defaultValue": "0"
										},
										{
											"id": 227,
											"name": "scaleY",
											"kind": 32,
											"kindString": "Variable",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "src/Appear/animations.ts",
													"line": 79,
													"character": 12
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											},
											"defaultValue": "0"
										}
									],
									"groups": [
										{
											"title": "Variables",
											"kind": 32,
											"children": [
												226,
												227
											]
										}
									],
									"sources": [
										{
											"fileName": "src/Appear/animations.ts",
											"line": 77,
											"character": 10
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "object"
									}
								},
								{
									"id": 228,
									"name": "visible",
									"kind": 2097152,
									"kindString": "Object literal",
									"flags": {
										"isExported": true
									},
									"children": [
										{
											"id": 229,
											"name": "originY",
											"kind": 32,
											"kindString": "Variable",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "src/Appear/animations.ts",
													"line": 82,
													"character": 13
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											},
											"defaultValue": "0"
										},
										{
											"id": 230,
											"name": "scaleY",
											"kind": 32,
											"kindString": "Variable",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "src/Appear/animations.ts",
													"line": 83,
													"character": 12
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											},
											"defaultValue": "1"
										}
									],
									"groups": [
										{
											"title": "Variables",
											"kind": 32,
											"children": [
												229,
												230
											]
										}
									],
									"sources": [
										{
											"fileName": "src/Appear/animations.ts",
											"line": 81,
											"character": 11
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "object"
									}
								}
							],
							"groups": [
								{
									"title": "Object literals",
									"kind": 2097152,
									"children": [
										225,
										228
									]
								}
							],
							"sources": [
								{
									"fileName": "src/Appear/animations.ts",
									"line": 76,
									"character": 12
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "object"
							}
						},
						{
							"id": 231,
							"name": "ScaleYUp",
							"kind": 2097152,
							"kindString": "Object literal",
							"flags": {
								"isExported": true
							},
							"children": [
								{
									"id": 232,
									"name": "hidden",
									"kind": 2097152,
									"kindString": "Object literal",
									"flags": {
										"isExported": true
									},
									"children": [
										{
											"id": 233,
											"name": "originY",
											"kind": 32,
											"kindString": "Variable",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "src/Appear/animations.ts",
													"line": 88,
													"character": 13
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											},
											"defaultValue": "1"
										},
										{
											"id": 234,
											"name": "scaleY",
											"kind": 32,
											"kindString": "Variable",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "src/Appear/animations.ts",
													"line": 89,
													"character": 12
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											},
											"defaultValue": "0"
										}
									],
									"groups": [
										{
											"title": "Variables",
											"kind": 32,
											"children": [
												233,
												234
											]
										}
									],
									"sources": [
										{
											"fileName": "src/Appear/animations.ts",
											"line": 87,
											"character": 10
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "object"
									}
								},
								{
									"id": 235,
									"name": "visible",
									"kind": 2097152,
									"kindString": "Object literal",
									"flags": {
										"isExported": true
									},
									"children": [
										{
											"id": 236,
											"name": "originY",
											"kind": 32,
											"kindString": "Variable",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "src/Appear/animations.ts",
													"line": 92,
													"character": 13
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											},
											"defaultValue": "1"
										},
										{
											"id": 237,
											"name": "scaleY",
											"kind": 32,
											"kindString": "Variable",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "src/Appear/animations.ts",
													"line": 93,
													"character": 12
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											},
											"defaultValue": "1"
										}
									],
									"groups": [
										{
											"title": "Variables",
											"kind": 32,
											"children": [
												236,
												237
											]
										}
									],
									"sources": [
										{
											"fileName": "src/Appear/animations.ts",
											"line": 91,
											"character": 11
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "object"
									}
								}
							],
							"groups": [
								{
									"title": "Object literals",
									"kind": 2097152,
									"children": [
										232,
										235
									]
								}
							],
							"sources": [
								{
									"fileName": "src/Appear/animations.ts",
									"line": 86,
									"character": 10
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "object"
							}
						}
					],
					"groups": [
						{
							"title": "Object literals",
							"kind": 2097152,
							"children": [
								174,
								197,
								206,
								188,
								179,
								215,
								224,
								231
							]
						}
					],
					"sources": [
						{
							"fileName": "src/Appear/animations.ts",
							"line": 5,
							"character": 14
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "object"
					}
				}
			],
			"groups": [
				{
					"title": "Object literals",
					"kind": 2097152,
					"children": [
						173
					]
				}
			],
			"sources": [
				{
					"fileName": "src/Appear/animations.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 1,
			"name": "\"Base/Base\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "/Users/harry/Projects/personal/preshape/src/Base/Base.tsx",
			"children": [
				{
					"id": 2,
					"name": "BaseProps",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"children": [
						{
							"id": 3,
							"name": "absolute",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Quick way of absolutely position to common places"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 58,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "fullscreen"
									},
									{
										"type": "stringLiteral",
										"value": "top"
									},
									{
										"type": "stringLiteral",
										"value": "top-left"
									},
									{
										"type": "stringLiteral",
										"value": "top-right"
									},
									{
										"type": "stringLiteral",
										"value": "bottom"
									},
									{
										"type": "stringLiteral",
										"value": "bottom-left"
									},
									{
										"type": "stringLiteral",
										"value": "bottom-right"
									}
								]
							}
						},
						{
							"id": 4,
							"name": "backgroundColor",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Background colour to be applied, shades are taken from the current\ntheme."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 70,
									"character": 17
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeColor",
								"id": 30
							}
						},
						{
							"id": 5,
							"name": "borderColor",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Border colour to be applied, shades are taken from the current\ntheme."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 75,
									"character": 13
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeColor",
								"id": 30
							}
						},
						{
							"id": 6,
							"name": "borderRadius",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Adds styling of a border radius to one of the size multiples."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 79,
									"character": 14
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "x1"
									},
									{
										"type": "stringLiteral",
										"value": "x2"
									},
									{
										"type": "stringLiteral",
										"value": "x3"
									}
								]
							}
						},
						{
							"id": 7,
							"name": "borderSize",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Thickness of the border to be applied"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 81,
									"character": 12
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "x1"
									},
									{
										"type": "stringLiteral",
										"value": "x2"
									}
								]
							}
						},
						{
							"id": 8,
							"name": "clickable",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Adds styling to indicate that the element is clickable"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 83,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							}
						},
						{
							"id": 9,
							"name": "container",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies relative positioning to contain child elements."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 85,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							}
						},
						{
							"id": 10,
							"name": "display",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies display styling"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 87,
									"character": 9
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "block"
									},
									{
										"type": "stringLiteral",
										"value": "inline-block"
									}
								]
							}
						},
						{
							"id": 11,
							"name": "fixed",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Quick way of absolutely position to common places"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 89,
									"character": 7
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "fullscreen"
									},
									{
										"type": "stringLiteral",
										"value": "top"
									},
									{
										"type": "stringLiteral",
										"value": "top-left"
									},
									{
										"type": "stringLiteral",
										"value": "top-right"
									},
									{
										"type": "stringLiteral",
										"value": "bottom"
									},
									{
										"type": "stringLiteral",
										"value": "bottom-left"
									},
									{
										"type": "stringLiteral",
										"value": "bottom-right"
									}
								]
							}
						},
						{
							"id": 12,
							"name": "height",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Fixed height applied through inline styling"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 98,
									"character": 8
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							}
						},
						{
							"id": 13,
							"name": "margin",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Margins applied for the global spacing variables"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 100,
									"character": 8
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeSize",
								"id": 31
							}
						},
						{
							"id": 14,
							"name": "maxWidth",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Max width applied through inline styling"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 102,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							}
						},
						{
							"id": 15,
							"name": "minHeight",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Max height applied through inline styling"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 104,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							}
						},
						{
							"id": 16,
							"name": "minWidth",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Min width applied through inline style"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 106,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							}
						},
						{
							"id": 17,
							"name": "overflow",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Overflow"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 108,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "stringLiteral",
										"value": "hidden"
									}
								]
							}
						},
						{
							"id": 18,
							"name": "padding",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Padding applied for the global spacing variables"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 110,
									"character": 9
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeSize",
								"id": 31
							}
						},
						{
							"id": 19,
							"name": "paddingHorizontal",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Horizontal padding applied for the global spacing variables"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 112,
									"character": 19
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeSize",
								"id": 31
							}
						},
						{
							"id": 20,
							"name": "paddingVertical",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Vertical pa?dding applied for the global spacing variables"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 114,
									"character": 17
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeSize",
								"id": 31
							}
						},
						{
							"id": 21,
							"name": "scrollable",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies overflow styling to enable/disable scrolling."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 116,
									"character": 12
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							}
						},
						{
							"id": 22,
							"name": "tag",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Any valid HTML or SVG element tag.",
								"tags": [
									{
										"tag": "reference",
										"text": "false\n"
									}
								]
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 122,
									"character": 5
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeAllElementTags",
								"id": 34
							}
						},
						{
							"id": 23,
							"name": "textColor",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Text colour to be applied."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 126,
									"character": 11
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeColor",
								"id": 30
							}
						},
						{
							"id": 24,
							"name": "theme",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Theme applied to this element and inherited for child elements (until\na descendant theme is applied)."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 131,
									"character": 7
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeTheme",
								"id": 35
							}
						},
						{
							"id": 25,
							"name": "width",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Fixed width applied through inline styling"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 133,
									"character": 7
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							}
						},
						{
							"id": 26,
							"name": "zIndex",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "z-index number for layering elements."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 135,
									"character": 8
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "number"
									}
								]
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								3,
								4,
								5,
								6,
								7,
								8,
								9,
								10,
								11,
								12,
								13,
								14,
								15,
								16,
								17,
								18,
								19,
								20,
								21,
								22,
								23,
								24,
								25,
								26
							]
						}
					],
					"sources": [
						{
							"fileName": "src/Base/Base.tsx",
							"line": 56,
							"character": 26
						}
					],
					"extendedBy": [
						{
							"type": "reference",
							"name": "AlertProps",
							"id": 40
						},
						{
							"type": "reference",
							"name": "FlexProps",
							"id": 239
						},
						{
							"type": "reference",
							"name": "TextProps",
							"id": 427
						},
						{
							"type": "reference",
							"name": "BulletPointProps",
							"id": 521
						},
						{
							"type": "reference",
							"name": "BulletPointsProps",
							"id": 549
						},
						{
							"type": "reference",
							"name": "Props",
							"id": 797
						},
						{
							"type": "reference",
							"name": "IconProps",
							"id": 908
						},
						{
							"type": "reference",
							"name": "ImageProps",
							"id": 979
						},
						{
							"type": "reference",
							"name": "LabelsProps",
							"id": 1133
						},
						{
							"type": "reference",
							"name": "PlacementProps",
							"id": 1365
						},
						{
							"type": "reference",
							"name": "PlacementArrowProps",
							"id": 1404
						},
						{
							"type": "reference",
							"name": "SeparatorProps",
							"id": 1525
						},
						{
							"type": "reference",
							"name": "TabProps",
							"id": 1553
						},
						{
							"type": "reference",
							"name": "TableBodyProps",
							"id": 1700
						},
						{
							"type": "reference",
							"name": "TableHeaderProps",
							"id": 1771
						},
						{
							"type": "reference",
							"name": "TableRowProps",
							"id": 1843
						}
					]
				},
				{
					"id": 27,
					"name": "Attributes",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {
						"isExported": true
					},
					"typeParameter": [
						{
							"id": 28,
							"name": "E",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {}
						},
						{
							"id": 29,
							"name": "P",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {}
						}
					],
					"sources": [
						{
							"fileName": "src/Base/Base.tsx",
							"line": 8,
							"character": 22
						}
					],
					"type": {
						"type": "intersection",
						"types": [
							{
								"type": "typeParameter",
								"name": "P"
							},
							{
								"type": "reference",
								"name": "Omit",
								"typeArguments": [
									{
										"type": "unknown",
										"name": "E extends SVGElement ? SVGAttributes<E> : AllHTMLAttributes<E>"
									},
									{
										"type": "typeOperator",
										"operator": "keyof",
										"target": {
											"type": "typeParameter",
											"name": "P"
										}
									}
								]
							}
						]
					}
				},
				{
					"id": 36,
					"name": "ReactElemenetProps",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {},
					"sources": [
						{
							"fileName": "src/Base/Base.tsx",
							"line": 138,
							"character": 23
						}
					],
					"type": {
						"type": "reference",
						"name": "Omit",
						"typeArguments": [
							{
								"type": "intersection",
								"types": [
									{
										"type": "reference",
										"name": "AllHTMLAttributes",
										"typeArguments": [
											{
												"type": "reference",
												"name": "Element"
											}
										]
									},
									{
										"type": "reference",
										"name": "SVGAttributes",
										"typeArguments": [
											{
												"type": "reference",
												"name": "Element"
											}
										]
									}
								]
							},
							{
								"type": "stringLiteral",
								"value": "crossOrigin"
							}
						]
					}
				},
				{
					"id": 34,
					"name": "TypeAllElementTags",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {
						"isExported": true
					},
					"sources": [
						{
							"fileName": "src/Base/Base.tsx",
							"line": 50,
							"character": 30
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "reference",
								"name": "TypeHTMLTags",
								"id": 32
							},
							{
								"type": "reference",
								"name": "TypeSVGTags",
								"id": 33
							}
						]
					}
				},
				{
					"id": 30,
					"name": "TypeColor",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {
						"isExported": true
					},
					"sources": [
						{
							"fileName": "src/Base/Base.tsx",
							"line": 13,
							"character": 21
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "stringLiteral",
								"value": "accent-shade-1"
							},
							{
								"type": "stringLiteral",
								"value": "accent-shade-2"
							},
							{
								"type": "stringLiteral",
								"value": "accent-shade-3"
							},
							{
								"type": "stringLiteral",
								"value": "background-shade-1"
							},
							{
								"type": "stringLiteral",
								"value": "background-shade-2"
							},
							{
								"type": "stringLiteral",
								"value": "background-shade-3"
							},
							{
								"type": "stringLiteral",
								"value": "dark-shade-1"
							},
							{
								"type": "stringLiteral",
								"value": "dark-shade-2"
							},
							{
								"type": "stringLiteral",
								"value": "dark-shade-3"
							},
							{
								"type": "stringLiteral",
								"value": "light-shade-1"
							},
							{
								"type": "stringLiteral",
								"value": "light-shade-2"
							},
							{
								"type": "stringLiteral",
								"value": "light-shade-3"
							},
							{
								"type": "stringLiteral",
								"value": "negative-shade-1"
							},
							{
								"type": "stringLiteral",
								"value": "negative-shade-2"
							},
							{
								"type": "stringLiteral",
								"value": "negative-shade-3"
							},
							{
								"type": "stringLiteral",
								"value": "positive-shade-1"
							},
							{
								"type": "stringLiteral",
								"value": "positive-shade-2"
							},
							{
								"type": "stringLiteral",
								"value": "positive-shade-3"
							},
							{
								"type": "stringLiteral",
								"value": "text-shade-1"
							},
							{
								"type": "stringLiteral",
								"value": "text-shade-2"
							},
							{
								"type": "stringLiteral",
								"value": "text-shade-3"
							}
						]
					}
				},
				{
					"id": 32,
					"name": "TypeHTMLTags",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {
						"isExported": true
					},
					"sources": [
						{
							"fileName": "src/Base/Base.tsx",
							"line": 48,
							"character": 24
						}
					],
					"type": {
						"type": "typeOperator",
						"operator": "keyof",
						"target": {
							"type": "reference",
							"name": "HTMLElementTagNameMap"
						}
					}
				},
				{
					"id": 33,
					"name": "TypeSVGTags",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {
						"isExported": true
					},
					"sources": [
						{
							"fileName": "src/Base/Base.tsx",
							"line": 49,
							"character": 23
						}
					],
					"type": {
						"type": "typeOperator",
						"operator": "keyof",
						"target": {
							"type": "reference",
							"name": "Omit",
							"typeArguments": [
								{
									"type": "reference",
									"name": "SVGElementTagNameMap"
								},
								{
									"type": "reference",
									"name": "TypeHTMLTags"
								}
							]
						}
					}
				},
				{
					"id": 31,
					"name": "TypeSize",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {
						"isExported": true
					},
					"sources": [
						{
							"fileName": "src/Base/Base.tsx",
							"line": 36,
							"character": 20
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "stringLiteral",
								"value": "x0"
							},
							{
								"type": "stringLiteral",
								"value": "x1"
							},
							{
								"type": "stringLiteral",
								"value": "x2"
							},
							{
								"type": "stringLiteral",
								"value": "x3"
							},
							{
								"type": "stringLiteral",
								"value": "x4"
							},
							{
								"type": "stringLiteral",
								"value": "x6"
							},
							{
								"type": "stringLiteral",
								"value": "x8"
							},
							{
								"type": "stringLiteral",
								"value": "x10"
							},
							{
								"type": "stringLiteral",
								"value": "x12"
							},
							{
								"type": "stringLiteral",
								"value": "x16"
							}
						]
					}
				},
				{
					"id": 35,
					"name": "TypeTheme",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {
						"isExported": true
					},
					"sources": [
						{
							"fileName": "src/Base/Base.tsx",
							"line": 52,
							"character": 21
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "stringLiteral",
								"value": "day"
							},
							{
								"type": "stringLiteral",
								"value": "night"
							}
						]
					}
				},
				{
					"id": 37,
					"name": "Base",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "src/Base/Base.tsx",
							"line": 143,
							"character": 10
						}
					],
					"type": {
						"type": "reference",
						"name": "ForwardRefExoticComponent",
						"typeArguments": [
							{
								"type": "intersection",
								"types": [
									{
										"type": "reference",
										"name": "BaseProps",
										"id": 2
									},
									{
										"type": "reflection",
										"declaration": {
											"id": 38,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {}
										}
									},
									{
										"type": "reference",
										"name": "RefAttributes",
										"typeArguments": [
											{
												"type": "reference",
												"name": "Element"
											}
										]
									}
								]
							}
						]
					},
					"defaultValue": " React.forwardRef<Element, BaseProps & ReactElemenetProps>((props, ref) => {\n  const {\n    absolute,\n    backgroundColor,\n    borderColor,\n    borderRadius,\n    borderSize,\n    children,\n    className,\n    clickable,\n    container,\n    display,\n    fixed,\n    height,\n    maxWidth,\n    minWidth,\n    minHeight,\n    overflow,\n    padding,\n    paddingHorizontal = padding,\n    paddingVertical = padding,\n    margin,\n    scrollable,\n    style,\n    tag,\n    textColor,\n    theme,\n    width,\n    zIndex,\n    ...rest\n  } = props;\n\n  const classes = classnames('Base', {\n    'Base--clickable': clickable,\n    'Base--container': container,\n    'Base--max-width': maxWidth,\n    'Base--scrollable': scrollable,\n    [`Base--absolute-${absolute}`]: absolute,\n    [`Base--background-color-${backgroundColor}`]: backgroundColor,\n    [`Base--border-color-${borderColor}`]: borderColor,\n    [`Base--border-radius-${borderRadius}`]: borderRadius,\n    [`Base--border-size-${borderSize}`]: borderSize,\n    [`Base--display-${display}`]: display,\n    [`Base--fixed-${fixed}`]: fixed,\n    [`Base--margin-${margin}`]: margin,\n    [`Base--overflow-${overflow}`]: overflow,\n    [`Base--padding-horizontal-${paddingHorizontal}`]: paddingHorizontal,\n    [`Base--padding-vertical-${paddingVertical}`]: paddingVertical,\n    [`Base--text-color-${textColor}`]: textColor,\n    [`Theme--${theme}`]: theme,\n  }, className);\n\n  return React.createElement(tag || 'div', {\n    ...rest,\n    className: classes,\n    ref: ref,\n    style: { height, minHeight, maxWidth, minWidth, width, zIndex, ...style },\n  }, children);\n})"
				}
			],
			"groups": [
				{
					"title": "Interfaces",
					"kind": 256,
					"children": [
						2
					]
				},
				{
					"title": "Type aliases",
					"kind": 4194304,
					"children": [
						27,
						36,
						34,
						30,
						32,
						33,
						31,
						35
					]
				},
				{
					"title": "Variables",
					"kind": 32,
					"children": [
						37
					]
				}
			],
			"sources": [
				{
					"fileName": "src/Base/Base.tsx",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 478,
			"name": "\"BlockQuote/BlockQuote\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "/Users/harry/Projects/personal/preshape/src/BlockQuote/BlockQuote.tsx",
			"children": [
				{
					"id": 479,
					"name": "BlockQuoteProps",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"children": [
						{
							"id": 494,
							"name": "absolute",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Quick way of absolutely position to common places"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 58,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "fullscreen"
									},
									{
										"type": "stringLiteral",
										"value": "top"
									},
									{
										"type": "stringLiteral",
										"value": "top-left"
									},
									{
										"type": "stringLiteral",
										"value": "top-right"
									},
									{
										"type": "stringLiteral",
										"value": "bottom"
									},
									{
										"type": "stringLiteral",
										"value": "bottom-left"
									},
									{
										"type": "stringLiteral",
										"value": "bottom-right"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.absolute",
								"id": 3
							}
						},
						{
							"id": 480,
							"name": "align",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Text alignment"
							},
							"sources": [
								{
									"fileName": "src/Text/Text.tsx",
									"line": 32,
									"character": 7
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "start"
									},
									{
										"type": "stringLiteral",
										"value": "middle"
									},
									{
										"type": "stringLiteral",
										"value": "end"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TextProps.align",
								"id": 428
							}
						},
						{
							"id": 495,
							"name": "backgroundColor",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Background colour to be applied, shades are taken from the current\ntheme."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 70,
									"character": 17
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeColor",
								"id": 30
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.backgroundColor",
								"id": 4
							}
						},
						{
							"id": 496,
							"name": "borderColor",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Border colour to be applied, shades are taken from the current\ntheme."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 75,
									"character": 13
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeColor",
								"id": 30
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.borderColor",
								"id": 5
							}
						},
						{
							"id": 497,
							"name": "borderRadius",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Adds styling of a border radius to one of the size multiples."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 79,
									"character": 14
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "x1"
									},
									{
										"type": "stringLiteral",
										"value": "x2"
									},
									{
										"type": "stringLiteral",
										"value": "x3"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.borderRadius",
								"id": 6
							}
						},
						{
							"id": 498,
							"name": "borderSize",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Thickness of the border to be applied"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 81,
									"character": 12
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "x1"
									},
									{
										"type": "stringLiteral",
										"value": "x2"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.borderSize",
								"id": 7
							}
						},
						{
							"id": 481,
							"name": "breakOn",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "How the block of text should break onto new lines."
							},
							"sources": [
								{
									"fileName": "src/Text/Text.tsx",
									"line": 34,
									"character": 9
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "all"
									},
									{
										"type": "stringLiteral",
										"value": "none"
									},
									{
										"type": "stringLiteral",
										"value": "word"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TextProps.breakOn",
								"id": 429
							}
						},
						{
							"id": 499,
							"name": "clickable",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Adds styling to indicate that the element is clickable"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 83,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.clickable",
								"id": 8
							}
						},
						{
							"id": 500,
							"name": "container",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies relative positioning to contain child elements."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 85,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.container",
								"id": 9
							}
						},
						{
							"id": 501,
							"name": "display",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies display styling"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 87,
									"character": 9
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "block"
									},
									{
										"type": "stringLiteral",
										"value": "inline-block"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.display",
								"id": 10
							}
						},
						{
							"id": 482,
							"name": "ellipsis",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Replaces the overflow of text with the ellipsis character"
							},
							"sources": [
								{
									"fileName": "src/Text/Text.tsx",
									"line": 36,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TextProps.ellipsis",
								"id": 430
							}
						},
						{
							"id": 483,
							"name": "emphasis",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies emphasis styling"
							},
							"sources": [
								{
									"fileName": "src/Text/Text.tsx",
									"line": 38,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TextProps.emphasis",
								"id": 431
							}
						},
						{
							"id": 502,
							"name": "fixed",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Quick way of absolutely position to common places"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 89,
									"character": 7
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "fullscreen"
									},
									{
										"type": "stringLiteral",
										"value": "top"
									},
									{
										"type": "stringLiteral",
										"value": "top-left"
									},
									{
										"type": "stringLiteral",
										"value": "top-right"
									},
									{
										"type": "stringLiteral",
										"value": "bottom"
									},
									{
										"type": "stringLiteral",
										"value": "bottom-left"
									},
									{
										"type": "stringLiteral",
										"value": "bottom-right"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.fixed",
								"id": 11
							}
						},
						{
							"id": 484,
							"name": "heading",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies a heading font family style"
							},
							"sources": [
								{
									"fileName": "src/Text/Text.tsx",
									"line": 40,
									"character": 9
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TextProps.heading",
								"id": 432
							}
						},
						{
							"id": 503,
							"name": "height",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Fixed height applied through inline styling"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 98,
									"character": 8
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.height",
								"id": 12
							}
						},
						{
							"id": 485,
							"name": "inline",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Text default to block display, this will apply inline display."
							},
							"sources": [
								{
									"fileName": "src/Text/Text.tsx",
									"line": 42,
									"character": 8
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TextProps.inline",
								"id": 433
							}
						},
						{
							"id": 504,
							"name": "margin",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Margins applied for the global spacing variables"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 100,
									"character": 8
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeSize",
								"id": 31
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.margin",
								"id": 13
							}
						},
						{
							"id": 505,
							"name": "maxWidth",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Max width applied through inline styling"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 102,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.maxWidth",
								"id": 14
							}
						},
						{
							"id": 506,
							"name": "minHeight",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Max height applied through inline styling"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 104,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.minHeight",
								"id": 15
							}
						},
						{
							"id": 507,
							"name": "minWidth",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Min width applied through inline style"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 106,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.minWidth",
								"id": 16
							}
						},
						{
							"id": 486,
							"name": "monospace",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies a monospace font family style"
							},
							"sources": [
								{
									"fileName": "src/Text/Text.tsx",
									"line": 44,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TextProps.monospace",
								"id": 434
							}
						},
						{
							"id": 508,
							"name": "overflow",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Overflow"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 108,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "stringLiteral",
										"value": "hidden"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.overflow",
								"id": 17
							}
						},
						{
							"id": 509,
							"name": "padding",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Padding applied for the global spacing variables"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 110,
									"character": 9
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeSize",
								"id": 31
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.padding",
								"id": 18
							}
						},
						{
							"id": 510,
							"name": "paddingHorizontal",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Horizontal padding applied for the global spacing variables"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 112,
									"character": 19
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeSize",
								"id": 31
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.paddingHorizontal",
								"id": 19
							}
						},
						{
							"id": 511,
							"name": "paddingVertical",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Vertical pa?dding applied for the global spacing variables"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 114,
									"character": 17
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeSize",
								"id": 31
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.paddingVertical",
								"id": 20
							}
						},
						{
							"id": 512,
							"name": "scrollable",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies overflow styling to enable/disable scrolling."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 116,
									"character": 12
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.scrollable",
								"id": 21
							}
						},
						{
							"id": 487,
							"name": "size",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Size of the text"
							},
							"sources": [
								{
									"fileName": "src/Text/Text.tsx",
									"line": 46,
									"character": 6
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeTextSize",
								"id": 466
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TextProps.size",
								"id": 435
							}
						},
						{
							"id": 488,
							"name": "strong",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies strong weight styling"
							},
							"sources": [
								{
									"fileName": "src/Text/Text.tsx",
									"line": 48,
									"character": 8
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TextProps.strong",
								"id": 436
							}
						},
						{
							"id": 489,
							"name": "subscript",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies subscript baseline styling"
							},
							"sources": [
								{
									"fileName": "src/Text/Text.tsx",
									"line": 50,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TextProps.subscript",
								"id": 437
							}
						},
						{
							"id": 490,
							"name": "superscript",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies superscript baseline styling"
							},
							"sources": [
								{
									"fileName": "src/Text/Text.tsx",
									"line": 52,
									"character": 13
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TextProps.superscript",
								"id": 438
							}
						},
						{
							"id": 513,
							"name": "tag",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Any valid HTML or SVG element tag.",
								"tags": [
									{
										"tag": "reference",
										"text": "false\n"
									}
								]
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 122,
									"character": 5
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeAllElementTags",
								"id": 34
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.tag",
								"id": 22
							}
						},
						{
							"id": 514,
							"name": "textColor",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Text colour to be applied."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 126,
									"character": 11
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeColor",
								"id": 30
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.textColor",
								"id": 23
							}
						},
						{
							"id": 515,
							"name": "theme",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Theme applied to this element and inherited for child elements (until\na descendant theme is applied)."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 131,
									"character": 7
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeTheme",
								"id": 35
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.theme",
								"id": 24
							}
						},
						{
							"id": 491,
							"name": "titlecase",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies title casing styling"
							},
							"sources": [
								{
									"fileName": "src/Text/Text.tsx",
									"line": 54,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TextProps.titlecase",
								"id": 439
							}
						},
						{
							"id": 492,
							"name": "uppercase",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies uppercasing styling"
							},
							"sources": [
								{
									"fileName": "src/Text/Text.tsx",
									"line": 56,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TextProps.uppercase",
								"id": 440
							}
						},
						{
							"id": 493,
							"name": "weak",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies weak weight styling"
							},
							"sources": [
								{
									"fileName": "src/Text/Text.tsx",
									"line": 58,
									"character": 6
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TextProps.weak",
								"id": 441
							}
						},
						{
							"id": 516,
							"name": "width",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Fixed width applied through inline styling"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 133,
									"character": 7
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.width",
								"id": 25
							}
						},
						{
							"id": 517,
							"name": "zIndex",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "z-index number for layering elements."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 135,
									"character": 8
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "number"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.zIndex",
								"id": 26
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								494,
								480,
								495,
								496,
								497,
								498,
								481,
								499,
								500,
								501,
								482,
								483,
								502,
								484,
								503,
								485,
								504,
								505,
								506,
								507,
								486,
								508,
								509,
								510,
								511,
								512,
								487,
								488,
								489,
								490,
								513,
								514,
								515,
								491,
								492,
								493,
								516,
								517
							]
						}
					],
					"sources": [
						{
							"fileName": "src/BlockQuote/BlockQuote.tsx",
							"line": 6,
							"character": 32
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"name": "TextProps",
							"id": 427
						}
					]
				},
				{
					"id": 518,
					"name": "BlockQuote",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "src/BlockQuote/BlockQuote.tsx",
							"line": 8,
							"character": 16
						}
					],
					"type": {
						"type": "reference",
						"name": "ForwardRefExoticComponent",
						"typeArguments": [
							{
								"type": "intersection",
								"types": [
									{
										"type": "reference",
										"name": "BlockQuoteProps",
										"id": 479
									},
									{
										"type": "reflection",
										"declaration": {
											"id": 519,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {}
										}
									},
									{
										"type": "reference",
										"name": "RefAttributes",
										"typeArguments": [
											{
												"type": "reference",
												"name": "HTMLQuoteElement"
											}
										]
									}
								]
							}
						]
					},
					"defaultValue": " React.forwardRef<HTMLQuoteElement, Attributes<HTMLQuoteElement, BlockQuoteProps>>((props, ref) => {\n  return (\n    <Text\n        paddingHorizontal=\"x6\"\n        paddingVertical=\"x1\"\n        { ...props }\n        className=\"BlockQuote\"\n        ref={ ref }\n        tag=\"blockquote\"\n        textColor=\"text-shade-3\" />\n  );\n})"
				}
			],
			"groups": [
				{
					"title": "Interfaces",
					"kind": 256,
					"children": [
						479
					]
				},
				{
					"title": "Variables",
					"kind": 32,
					"children": [
						518
					]
				}
			],
			"sources": [
				{
					"fileName": "src/BlockQuote/BlockQuote.tsx",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 520,
			"name": "\"BulletPoints/BulletPoint\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "/Users/harry/Projects/personal/preshape/src/BulletPoints/BulletPoint.tsx",
			"children": [
				{
					"id": 521,
					"name": "BulletPointProps",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"children": [
						{
							"id": 522,
							"name": "absolute",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Quick way of absolutely position to common places"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 58,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "fullscreen"
									},
									{
										"type": "stringLiteral",
										"value": "top"
									},
									{
										"type": "stringLiteral",
										"value": "top-left"
									},
									{
										"type": "stringLiteral",
										"value": "top-right"
									},
									{
										"type": "stringLiteral",
										"value": "bottom"
									},
									{
										"type": "stringLiteral",
										"value": "bottom-left"
									},
									{
										"type": "stringLiteral",
										"value": "bottom-right"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.absolute",
								"id": 3
							}
						},
						{
							"id": 523,
							"name": "backgroundColor",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Background colour to be applied, shades are taken from the current\ntheme."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 70,
									"character": 17
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeColor",
								"id": 30
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.backgroundColor",
								"id": 4
							}
						},
						{
							"id": 524,
							"name": "borderColor",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Border colour to be applied, shades are taken from the current\ntheme."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 75,
									"character": 13
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeColor",
								"id": 30
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.borderColor",
								"id": 5
							}
						},
						{
							"id": 525,
							"name": "borderRadius",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Adds styling of a border radius to one of the size multiples."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 79,
									"character": 14
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "x1"
									},
									{
										"type": "stringLiteral",
										"value": "x2"
									},
									{
										"type": "stringLiteral",
										"value": "x3"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.borderRadius",
								"id": 6
							}
						},
						{
							"id": 526,
							"name": "borderSize",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Thickness of the border to be applied"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 81,
									"character": 12
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "x1"
									},
									{
										"type": "stringLiteral",
										"value": "x2"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.borderSize",
								"id": 7
							}
						},
						{
							"id": 527,
							"name": "clickable",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Adds styling to indicate that the element is clickable"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 83,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.clickable",
								"id": 8
							}
						},
						{
							"id": 528,
							"name": "container",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies relative positioning to contain child elements."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 85,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.container",
								"id": 9
							}
						},
						{
							"id": 529,
							"name": "display",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies display styling"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 87,
									"character": 9
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "block"
									},
									{
										"type": "stringLiteral",
										"value": "inline-block"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.display",
								"id": 10
							}
						},
						{
							"id": 530,
							"name": "fixed",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Quick way of absolutely position to common places"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 89,
									"character": 7
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "fullscreen"
									},
									{
										"type": "stringLiteral",
										"value": "top"
									},
									{
										"type": "stringLiteral",
										"value": "top-left"
									},
									{
										"type": "stringLiteral",
										"value": "top-right"
									},
									{
										"type": "stringLiteral",
										"value": "bottom"
									},
									{
										"type": "stringLiteral",
										"value": "bottom-left"
									},
									{
										"type": "stringLiteral",
										"value": "bottom-right"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.fixed",
								"id": 11
							}
						},
						{
							"id": 531,
							"name": "height",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Fixed height applied through inline styling"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 98,
									"character": 8
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.height",
								"id": 12
							}
						},
						{
							"id": 532,
							"name": "margin",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Margins applied for the global spacing variables"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 100,
									"character": 8
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeSize",
								"id": 31
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.margin",
								"id": 13
							}
						},
						{
							"id": 533,
							"name": "maxWidth",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Max width applied through inline styling"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 102,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.maxWidth",
								"id": 14
							}
						},
						{
							"id": 534,
							"name": "minHeight",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Max height applied through inline styling"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 104,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.minHeight",
								"id": 15
							}
						},
						{
							"id": 535,
							"name": "minWidth",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Min width applied through inline style"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 106,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.minWidth",
								"id": 16
							}
						},
						{
							"id": 536,
							"name": "overflow",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Overflow"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 108,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "stringLiteral",
										"value": "hidden"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.overflow",
								"id": 17
							}
						},
						{
							"id": 537,
							"name": "padding",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Padding applied for the global spacing variables"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 110,
									"character": 9
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeSize",
								"id": 31
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.padding",
								"id": 18
							}
						},
						{
							"id": 538,
							"name": "paddingHorizontal",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Horizontal padding applied for the global spacing variables"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 112,
									"character": 19
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeSize",
								"id": 31
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.paddingHorizontal",
								"id": 19
							}
						},
						{
							"id": 539,
							"name": "paddingVertical",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Vertical pa?dding applied for the global spacing variables"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 114,
									"character": 17
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeSize",
								"id": 31
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.paddingVertical",
								"id": 20
							}
						},
						{
							"id": 540,
							"name": "scrollable",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies overflow styling to enable/disable scrolling."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 116,
									"character": 12
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.scrollable",
								"id": 21
							}
						},
						{
							"id": 541,
							"name": "tag",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Any valid HTML or SVG element tag.",
								"tags": [
									{
										"tag": "reference",
										"text": "false\n"
									}
								]
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 122,
									"character": 5
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeAllElementTags",
								"id": 34
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.tag",
								"id": 22
							}
						},
						{
							"id": 542,
							"name": "textColor",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Text colour to be applied."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 126,
									"character": 11
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeColor",
								"id": 30
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.textColor",
								"id": 23
							}
						},
						{
							"id": 543,
							"name": "theme",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Theme applied to this element and inherited for child elements (until\na descendant theme is applied)."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 131,
									"character": 7
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeTheme",
								"id": 35
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.theme",
								"id": 24
							}
						},
						{
							"id": 544,
							"name": "width",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Fixed width applied through inline styling"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 133,
									"character": 7
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.width",
								"id": 25
							}
						},
						{
							"id": 545,
							"name": "zIndex",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "z-index number for layering elements."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 135,
									"character": 8
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "number"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.zIndex",
								"id": 26
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								522,
								523,
								524,
								525,
								526,
								527,
								528,
								529,
								530,
								531,
								532,
								533,
								534,
								535,
								536,
								537,
								538,
								539,
								540,
								541,
								542,
								543,
								544,
								545
							]
						}
					],
					"sources": [
						{
							"fileName": "src/BulletPoints/BulletPoint.tsx",
							"line": 4,
							"character": 33
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"name": "BaseProps",
							"id": 2
						}
					]
				},
				{
					"id": 546,
					"name": "BulletPoint",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "src/BulletPoints/BulletPoint.tsx",
							"line": 6,
							"character": 17
						}
					],
					"type": {
						"type": "reference",
						"name": "ForwardRefExoticComponent",
						"typeArguments": [
							{
								"type": "intersection",
								"types": [
									{
										"type": "reference",
										"name": "BulletPointProps",
										"id": 521
									},
									{
										"type": "reflection",
										"declaration": {
											"id": 547,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {}
										}
									},
									{
										"type": "reference",
										"name": "RefAttributes",
										"typeArguments": [
											{
												"type": "reference",
												"name": "HTMLLIElement"
											}
										]
									}
								]
							}
						]
					},
					"defaultValue": " React.forwardRef<HTMLLIElement, Attributes<HTMLLIElement, BulletPointProps>>((props, ref) => {\n  return (\n    <Base { ...props }\n        className=\"BulletPoints__point\"\n        ref={ ref }\n        tag=\"li\" />\n  );\n})"
				}
			],
			"groups": [
				{
					"title": "Interfaces",
					"kind": 256,
					"children": [
						521
					]
				},
				{
					"title": "Variables",
					"kind": 32,
					"children": [
						546
					]
				}
			],
			"sources": [
				{
					"fileName": "src/BulletPoints/BulletPoint.tsx",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 548,
			"name": "\"BulletPoints/BulletPoints\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "/Users/harry/Projects/personal/preshape/src/BulletPoints/BulletPoints.tsx",
			"children": [
				{
					"id": 549,
					"name": "BulletPointsProps",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"children": [
						{
							"id": 551,
							"name": "absolute",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Quick way of absolutely position to common places"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 58,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "fullscreen"
									},
									{
										"type": "stringLiteral",
										"value": "top"
									},
									{
										"type": "stringLiteral",
										"value": "top-left"
									},
									{
										"type": "stringLiteral",
										"value": "top-right"
									},
									{
										"type": "stringLiteral",
										"value": "bottom"
									},
									{
										"type": "stringLiteral",
										"value": "bottom-left"
									},
									{
										"type": "stringLiteral",
										"value": "bottom-right"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.absolute",
								"id": 3
							}
						},
						{
							"id": 552,
							"name": "backgroundColor",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Background colour to be applied, shades are taken from the current\ntheme."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 70,
									"character": 17
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeColor",
								"id": 30
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.backgroundColor",
								"id": 4
							}
						},
						{
							"id": 553,
							"name": "borderColor",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Border colour to be applied, shades are taken from the current\ntheme."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 75,
									"character": 13
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeColor",
								"id": 30
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.borderColor",
								"id": 5
							}
						},
						{
							"id": 554,
							"name": "borderRadius",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Adds styling of a border radius to one of the size multiples."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 79,
									"character": 14
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "x1"
									},
									{
										"type": "stringLiteral",
										"value": "x2"
									},
									{
										"type": "stringLiteral",
										"value": "x3"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.borderRadius",
								"id": 6
							}
						},
						{
							"id": 555,
							"name": "borderSize",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Thickness of the border to be applied"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 81,
									"character": 12
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "x1"
									},
									{
										"type": "stringLiteral",
										"value": "x2"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.borderSize",
								"id": 7
							}
						},
						{
							"id": 556,
							"name": "clickable",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Adds styling to indicate that the element is clickable"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 83,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.clickable",
								"id": 8
							}
						},
						{
							"id": 557,
							"name": "container",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies relative positioning to contain child elements."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 85,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.container",
								"id": 9
							}
						},
						{
							"id": 558,
							"name": "display",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies display styling"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 87,
									"character": 9
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "block"
									},
									{
										"type": "stringLiteral",
										"value": "inline-block"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.display",
								"id": 10
							}
						},
						{
							"id": 559,
							"name": "fixed",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Quick way of absolutely position to common places"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 89,
									"character": 7
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "fullscreen"
									},
									{
										"type": "stringLiteral",
										"value": "top"
									},
									{
										"type": "stringLiteral",
										"value": "top-left"
									},
									{
										"type": "stringLiteral",
										"value": "top-right"
									},
									{
										"type": "stringLiteral",
										"value": "bottom"
									},
									{
										"type": "stringLiteral",
										"value": "bottom-left"
									},
									{
										"type": "stringLiteral",
										"value": "bottom-right"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.fixed",
								"id": 11
							}
						},
						{
							"id": 560,
							"name": "height",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Fixed height applied through inline styling"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 98,
									"character": 8
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.height",
								"id": 12
							}
						},
						{
							"id": 561,
							"name": "margin",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Margins applied for the global spacing variables"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 100,
									"character": 8
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeSize",
								"id": 31
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.margin",
								"id": 13
							}
						},
						{
							"id": 562,
							"name": "maxWidth",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Max width applied through inline styling"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 102,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.maxWidth",
								"id": 14
							}
						},
						{
							"id": 563,
							"name": "minHeight",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Max height applied through inline styling"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 104,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.minHeight",
								"id": 15
							}
						},
						{
							"id": 564,
							"name": "minWidth",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Min width applied through inline style"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 106,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.minWidth",
								"id": 16
							}
						},
						{
							"id": 550,
							"name": "numbered",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/BulletPoints/BulletPoints.tsx",
									"line": 7,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							}
						},
						{
							"id": 565,
							"name": "overflow",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Overflow"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 108,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "stringLiteral",
										"value": "hidden"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.overflow",
								"id": 17
							}
						},
						{
							"id": 566,
							"name": "padding",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Padding applied for the global spacing variables"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 110,
									"character": 9
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeSize",
								"id": 31
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.padding",
								"id": 18
							}
						},
						{
							"id": 567,
							"name": "paddingHorizontal",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Horizontal padding applied for the global spacing variables"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 112,
									"character": 19
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeSize",
								"id": 31
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.paddingHorizontal",
								"id": 19
							}
						},
						{
							"id": 568,
							"name": "paddingVertical",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Vertical pa?dding applied for the global spacing variables"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 114,
									"character": 17
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeSize",
								"id": 31
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.paddingVertical",
								"id": 20
							}
						},
						{
							"id": 569,
							"name": "scrollable",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies overflow styling to enable/disable scrolling."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 116,
									"character": 12
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.scrollable",
								"id": 21
							}
						},
						{
							"id": 570,
							"name": "tag",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Any valid HTML or SVG element tag.",
								"tags": [
									{
										"tag": "reference",
										"text": "false\n"
									}
								]
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 122,
									"character": 5
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeAllElementTags",
								"id": 34
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.tag",
								"id": 22
							}
						},
						{
							"id": 571,
							"name": "textColor",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Text colour to be applied."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 126,
									"character": 11
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeColor",
								"id": 30
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.textColor",
								"id": 23
							}
						},
						{
							"id": 572,
							"name": "theme",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Theme applied to this element and inherited for child elements (until\na descendant theme is applied)."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 131,
									"character": 7
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeTheme",
								"id": 35
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.theme",
								"id": 24
							}
						},
						{
							"id": 573,
							"name": "width",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Fixed width applied through inline styling"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 133,
									"character": 7
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.width",
								"id": 25
							}
						},
						{
							"id": 574,
							"name": "zIndex",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "z-index number for layering elements."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 135,
									"character": 8
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "number"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.zIndex",
								"id": 26
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								551,
								552,
								553,
								554,
								555,
								556,
								557,
								558,
								559,
								560,
								561,
								562,
								563,
								564,
								550,
								565,
								566,
								567,
								568,
								569,
								570,
								571,
								572,
								573,
								574
							]
						}
					],
					"sources": [
						{
							"fileName": "src/BulletPoints/BulletPoints.tsx",
							"line": 6,
							"character": 34
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"name": "BaseProps",
							"id": 2
						}
					]
				},
				{
					"id": 575,
					"name": "BulletPoints",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "src/BulletPoints/BulletPoints.tsx",
							"line": 10,
							"character": 18
						}
					],
					"type": {
						"type": "reference",
						"name": "ForwardRefExoticComponent",
						"typeArguments": [
							{
								"type": "intersection",
								"types": [
									{
										"type": "reference",
										"name": "BulletPointsProps",
										"id": 549
									},
									{
										"type": "reflection",
										"declaration": {
											"id": 576,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {}
										}
									},
									{
										"type": "reference",
										"name": "RefAttributes",
										"typeArguments": [
											{
												"type": "reference",
												"name": "HTMLUListElement"
											}
										]
									}
								]
							}
						]
					},
					"defaultValue": " React.forwardRef<HTMLUListElement, Attributes<HTMLUListElement, BulletPointsProps>>((props, ref) => {\n  const { numbered, ...rest } = props;\n  const classes = classnames('BulletPoints', {\n    'BulletPoints--numbered': numbered,\n  });\n\n  return (\n    <Base { ...rest }\n        className={ classes }\n        ref={ ref }\n        tag=\"ul\" />\n  );\n})"
				}
			],
			"groups": [
				{
					"title": "Interfaces",
					"kind": 256,
					"children": [
						549
					]
				},
				{
					"title": "Variables",
					"kind": 32,
					"children": [
						575
					]
				}
			],
			"sources": [
				{
					"fileName": "src/BulletPoints/BulletPoints.tsx",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 577,
			"name": "\"Button/Button\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "/Users/harry/Projects/personal/preshape/src/Button/Button.tsx",
			"children": [
				{
					"id": 578,
					"name": "ButtonProps",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "Button component with a fill and outline style with a variety of colours\nfor different purposes."
					},
					"children": [
						{
							"id": 593,
							"name": "absolute",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Quick way of absolutely position to common places"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 58,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "fullscreen"
									},
									{
										"type": "stringLiteral",
										"value": "top"
									},
									{
										"type": "stringLiteral",
										"value": "top-left"
									},
									{
										"type": "stringLiteral",
										"value": "top-right"
									},
									{
										"type": "stringLiteral",
										"value": "bottom"
									},
									{
										"type": "stringLiteral",
										"value": "bottom-left"
									},
									{
										"type": "stringLiteral",
										"value": "bottom-right"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.absolute",
								"id": 3
							}
						},
						{
							"id": 579,
							"name": "active",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Retains the Button in its active state"
							},
							"sources": [
								{
									"fileName": "src/Button/Button.tsx",
									"line": 13,
									"character": 8
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							}
						},
						{
							"id": 583,
							"name": "alignChildren",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Short cut child alignment property for both alignChildrenHorizontal and\nalignChildrenVertical."
							},
							"sources": [
								{
									"fileName": "src/Flex/Flex.tsx",
									"line": 11,
									"character": 15
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "start"
									},
									{
										"type": "stringLiteral",
										"value": "middle"
									},
									{
										"type": "stringLiteral",
										"value": "end"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "FlexProps.alignChildren",
								"id": 240
							}
						},
						{
							"id": 584,
							"name": "alignChildrenHorizontal",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Horizontal alignment of children flex items."
							},
							"sources": [
								{
									"fileName": "src/Flex/Flex.tsx",
									"line": 13,
									"character": 25
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "start"
									},
									{
										"type": "stringLiteral",
										"value": "middle"
									},
									{
										"type": "stringLiteral",
										"value": "end"
									},
									{
										"type": "stringLiteral",
										"value": "around"
									},
									{
										"type": "stringLiteral",
										"value": "between"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "FlexProps.alignChildrenHorizontal",
								"id": 241
							}
						},
						{
							"id": 585,
							"name": "alignChildrenVertical",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Vertical alignment of children flex items."
							},
							"sources": [
								{
									"fileName": "src/Flex/Flex.tsx",
									"line": 15,
									"character": 23
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "start"
									},
									{
										"type": "stringLiteral",
										"value": "middle"
									},
									{
										"type": "stringLiteral",
										"value": "end"
									},
									{
										"type": "stringLiteral",
										"value": "around"
									},
									{
										"type": "stringLiteral",
										"value": "between"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "FlexProps.alignChildrenVertical",
								"id": 242
							}
						},
						{
							"id": 586,
							"name": "alignSelf",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Flex item alignment property (changes with parent direction)."
							},
							"sources": [
								{
									"fileName": "src/Flex/Flex.tsx",
									"line": 17,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "start"
									},
									{
										"type": "stringLiteral",
										"value": "middle"
									},
									{
										"type": "stringLiteral",
										"value": "end"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "FlexProps.alignSelf",
								"id": 243
							}
						},
						{
							"id": 594,
							"name": "backgroundColor",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Background colour to be applied, shades are taken from the current\ntheme."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 70,
									"character": 17
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeColor",
								"id": 30
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.backgroundColor",
								"id": 4
							}
						},
						{
							"id": 587,
							"name": "basis",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Initial width to flex from for a child item."
							},
							"sources": [
								{
									"fileName": "src/Flex/Flex.tsx",
									"line": 19,
									"character": 7
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "content"
									},
									{
										"type": "stringLiteral",
										"value": "container"
									},
									{
										"type": "stringLiteral",
										"value": "none"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "FlexProps.basis",
								"id": 244
							}
						},
						{
							"id": 595,
							"name": "borderColor",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Border colour to be applied, shades are taken from the current\ntheme."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 75,
									"character": 13
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeColor",
								"id": 30
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.borderColor",
								"id": 5
							}
						},
						{
							"id": 596,
							"name": "borderRadius",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Adds styling of a border radius to one of the size multiples."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 79,
									"character": 14
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "x1"
									},
									{
										"type": "stringLiteral",
										"value": "x2"
									},
									{
										"type": "stringLiteral",
										"value": "x3"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.borderRadius",
								"id": 6
							}
						},
						{
							"id": 597,
							"name": "borderSize",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Thickness of the border to be applied"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 81,
									"character": 12
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "x1"
									},
									{
										"type": "stringLiteral",
										"value": "x2"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.borderSize",
								"id": 7
							}
						},
						{
							"id": 598,
							"name": "clickable",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Adds styling to indicate that the element is clickable"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 83,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.clickable",
								"id": 8
							}
						},
						{
							"id": 580,
							"name": "color",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Colour that is applied to the button to indicate the type of action",
								"tags": [
									{
										"tag": "default",
										"text": "\"accent\"\n"
									}
								]
							},
							"sources": [
								{
									"fileName": "src/Button/Button.tsx",
									"line": 19,
									"character": 7
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "accent"
									},
									{
										"type": "stringLiteral",
										"value": "negative"
									},
									{
										"type": "stringLiteral",
										"value": "positive"
									}
								]
							}
						},
						{
							"id": 599,
							"name": "container",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies relative positioning to contain child elements."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 85,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.container",
								"id": 9
							}
						},
						{
							"id": 588,
							"name": "direction",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Direction on which way to flex items."
							},
							"sources": [
								{
									"fileName": "src/Flex/Flex.tsx",
									"line": 21,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "horizontal"
									},
									{
										"type": "stringLiteral",
										"value": "vertical"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "FlexProps.direction",
								"id": 245
							}
						},
						{
							"id": 581,
							"name": "disabled",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "A styled disabled state that disables all interactions"
							},
							"sources": [
								{
									"fileName": "src/Button/Button.tsx",
									"line": 21,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							}
						},
						{
							"id": 600,
							"name": "display",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies display styling"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 87,
									"character": 9
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "block"
									},
									{
										"type": "stringLiteral",
										"value": "inline-block"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.display",
								"id": 10
							}
						},
						{
							"id": 582,
							"name": "fill",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Appies a filled in style to the button."
							},
							"sources": [
								{
									"fileName": "src/Button/Button.tsx",
									"line": 23,
									"character": 6
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							}
						},
						{
							"id": 601,
							"name": "fixed",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Quick way of absolutely position to common places"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 89,
									"character": 7
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "fullscreen"
									},
									{
										"type": "stringLiteral",
										"value": "top"
									},
									{
										"type": "stringLiteral",
										"value": "top-left"
									},
									{
										"type": "stringLiteral",
										"value": "top-right"
									},
									{
										"type": "stringLiteral",
										"value": "bottom"
									},
									{
										"type": "stringLiteral",
										"value": "bottom-left"
									},
									{
										"type": "stringLiteral",
										"value": "bottom-right"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.fixed",
								"id": 11
							}
						},
						{
							"id": 589,
							"name": "gap",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Spacing applied between child flex items, values are global spacing variables."
							},
							"sources": [
								{
									"fileName": "src/Flex/Flex.tsx",
									"line": 23,
									"character": 5
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeSize",
								"id": 31
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "FlexProps.gap",
								"id": 246
							}
						},
						{
							"id": 590,
							"name": "grow",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Flex item property if it should grow with available space."
							},
							"sources": [
								{
									"fileName": "src/Flex/Flex.tsx",
									"line": 25,
									"character": 6
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "FlexProps.grow",
								"id": 247
							}
						},
						{
							"id": 602,
							"name": "height",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Fixed height applied through inline styling"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 98,
									"character": 8
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.height",
								"id": 12
							}
						},
						{
							"id": 603,
							"name": "margin",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Margins applied for the global spacing variables"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 100,
									"character": 8
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeSize",
								"id": 31
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.margin",
								"id": 13
							}
						},
						{
							"id": 604,
							"name": "maxWidth",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Max width applied through inline styling"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 102,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.maxWidth",
								"id": 14
							}
						},
						{
							"id": 605,
							"name": "minHeight",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Max height applied through inline styling"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 104,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.minHeight",
								"id": 15
							}
						},
						{
							"id": 606,
							"name": "minWidth",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Min width applied through inline style"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 106,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.minWidth",
								"id": 16
							}
						},
						{
							"id": 607,
							"name": "overflow",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Overflow"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 108,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "stringLiteral",
										"value": "hidden"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.overflow",
								"id": 17
							}
						},
						{
							"id": 608,
							"name": "padding",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Padding applied for the global spacing variables"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 110,
									"character": 9
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeSize",
								"id": 31
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.padding",
								"id": 18
							}
						},
						{
							"id": 609,
							"name": "paddingHorizontal",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Horizontal padding applied for the global spacing variables"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 112,
									"character": 19
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeSize",
								"id": 31
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.paddingHorizontal",
								"id": 19
							}
						},
						{
							"id": 610,
							"name": "paddingVertical",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Vertical pa?dding applied for the global spacing variables"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 114,
									"character": 17
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeSize",
								"id": 31
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.paddingVertical",
								"id": 20
							}
						},
						{
							"id": 611,
							"name": "scrollable",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies overflow styling to enable/disable scrolling."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 116,
									"character": 12
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.scrollable",
								"id": 21
							}
						},
						{
							"id": 591,
							"name": "shrink",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Flex item property if it should shrink."
							},
							"sources": [
								{
									"fileName": "src/Flex/Flex.tsx",
									"line": 27,
									"character": 8
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "FlexProps.shrink",
								"id": 248
							}
						},
						{
							"id": 612,
							"name": "tag",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Any valid HTML or SVG element tag.",
								"tags": [
									{
										"tag": "reference",
										"text": "false\n"
									}
								]
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 122,
									"character": 5
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeAllElementTags",
								"id": 34
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.tag",
								"id": 22
							}
						},
						{
							"id": 613,
							"name": "textColor",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Text colour to be applied."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 126,
									"character": 11
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeColor",
								"id": 30
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.textColor",
								"id": 23
							}
						},
						{
							"id": 614,
							"name": "theme",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Theme applied to this element and inherited for child elements (until\na descendant theme is applied)."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 131,
									"character": 7
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeTheme",
								"id": 35
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.theme",
								"id": 24
							}
						},
						{
							"id": 615,
							"name": "width",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Fixed width applied through inline styling"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 133,
									"character": 7
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.width",
								"id": 25
							}
						},
						{
							"id": 592,
							"name": "wrap",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Flag to allow flex items to wrap over to new lines"
							},
							"sources": [
								{
									"fileName": "src/Flex/Flex.tsx",
									"line": 29,
									"character": 6
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "FlexProps.wrap",
								"id": 249
							}
						},
						{
							"id": 616,
							"name": "zIndex",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "z-index number for layering elements."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 135,
									"character": 8
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "number"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.zIndex",
								"id": 26
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								593,
								579,
								583,
								584,
								585,
								586,
								594,
								587,
								595,
								596,
								597,
								598,
								580,
								599,
								588,
								581,
								600,
								582,
								601,
								589,
								590,
								602,
								603,
								604,
								605,
								606,
								607,
								608,
								609,
								610,
								611,
								591,
								612,
								613,
								614,
								615,
								592,
								616
							]
						}
					],
					"sources": [
						{
							"fileName": "src/Button/Button.tsx",
							"line": 11,
							"character": 28
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"name": "FlexProps",
							"id": 239
						}
					]
				},
				{
					"id": 617,
					"name": "Button",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "src/Button/Button.tsx",
							"line": 26,
							"character": 12
						}
					],
					"type": {
						"type": "reference",
						"name": "ForwardRefExoticComponent",
						"typeArguments": [
							{
								"type": "intersection",
								"types": [
									{
										"type": "reference",
										"name": "ButtonProps",
										"id": 578
									},
									{
										"type": "reflection",
										"declaration": {
											"id": 618,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {}
										}
									},
									{
										"type": "reference",
										"name": "RefAttributes",
										"typeArguments": [
											{
												"type": "reference",
												"name": "HTMLButtonElement"
											}
										]
									}
								]
							}
						]
					},
					"defaultValue": " React.forwardRef<HTMLButtonElement, Attributes<HTMLButtonElement, ButtonProps>>((props, ref) => {\n  const { active, color = 'accent', fill, ...rest } = props;\n  const classes = classnames('Button', {\n    'Button--active': active,\n    'Button--fill': fill,\n    [`Button--${color}`]: color,\n  });\n\n  return (\n    <Flex { ...rest }\n        alignChildren=\"middle\"\n        className={ classes }\n        direction=\"horizontal\"\n        grow\n        ref={ ref }\n        tag=\"button\" />\n  );\n})"
				}
			],
			"groups": [
				{
					"title": "Interfaces",
					"kind": 256,
					"children": [
						578
					]
				},
				{
					"title": "Variables",
					"kind": 32,
					"children": [
						617
					]
				}
			],
			"sources": [
				{
					"fileName": "src/Button/Button.tsx",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 619,
			"name": "\"Button/Buttons\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "/Users/harry/Projects/personal/preshape/src/Button/Buttons.tsx",
			"children": [
				{
					"id": 620,
					"name": "ButtonsProps",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "Button container component that joins or separates child components."
					},
					"children": [
						{
							"id": 632,
							"name": "absolute",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Quick way of absolutely position to common places"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 58,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "fullscreen"
									},
									{
										"type": "stringLiteral",
										"value": "top"
									},
									{
										"type": "stringLiteral",
										"value": "top-left"
									},
									{
										"type": "stringLiteral",
										"value": "top-right"
									},
									{
										"type": "stringLiteral",
										"value": "bottom"
									},
									{
										"type": "stringLiteral",
										"value": "bottom-left"
									},
									{
										"type": "stringLiteral",
										"value": "bottom-right"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.absolute",
								"id": 3
							}
						},
						{
							"id": 623,
							"name": "alignChildren",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Short cut child alignment property for both alignChildrenHorizontal and\nalignChildrenVertical."
							},
							"sources": [
								{
									"fileName": "src/Flex/Flex.tsx",
									"line": 11,
									"character": 15
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "start"
									},
									{
										"type": "stringLiteral",
										"value": "middle"
									},
									{
										"type": "stringLiteral",
										"value": "end"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "FlexProps.alignChildren",
								"id": 240
							}
						},
						{
							"id": 624,
							"name": "alignChildrenHorizontal",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Horizontal alignment of children flex items."
							},
							"sources": [
								{
									"fileName": "src/Flex/Flex.tsx",
									"line": 13,
									"character": 25
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "start"
									},
									{
										"type": "stringLiteral",
										"value": "middle"
									},
									{
										"type": "stringLiteral",
										"value": "end"
									},
									{
										"type": "stringLiteral",
										"value": "around"
									},
									{
										"type": "stringLiteral",
										"value": "between"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "FlexProps.alignChildrenHorizontal",
								"id": 241
							}
						},
						{
							"id": 625,
							"name": "alignChildrenVertical",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Vertical alignment of children flex items."
							},
							"sources": [
								{
									"fileName": "src/Flex/Flex.tsx",
									"line": 15,
									"character": 23
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "start"
									},
									{
										"type": "stringLiteral",
										"value": "middle"
									},
									{
										"type": "stringLiteral",
										"value": "end"
									},
									{
										"type": "stringLiteral",
										"value": "around"
									},
									{
										"type": "stringLiteral",
										"value": "between"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "FlexProps.alignChildrenVertical",
								"id": 242
							}
						},
						{
							"id": 626,
							"name": "alignSelf",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Flex item alignment property (changes with parent direction)."
							},
							"sources": [
								{
									"fileName": "src/Flex/Flex.tsx",
									"line": 17,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "start"
									},
									{
										"type": "stringLiteral",
										"value": "middle"
									},
									{
										"type": "stringLiteral",
										"value": "end"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "FlexProps.alignSelf",
								"id": 243
							}
						},
						{
							"id": 633,
							"name": "backgroundColor",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Background colour to be applied, shades are taken from the current\ntheme."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 70,
									"character": 17
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeColor",
								"id": 30
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.backgroundColor",
								"id": 4
							}
						},
						{
							"id": 627,
							"name": "basis",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Initial width to flex from for a child item."
							},
							"sources": [
								{
									"fileName": "src/Flex/Flex.tsx",
									"line": 19,
									"character": 7
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "content"
									},
									{
										"type": "stringLiteral",
										"value": "container"
									},
									{
										"type": "stringLiteral",
										"value": "none"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "FlexProps.basis",
								"id": 244
							}
						},
						{
							"id": 634,
							"name": "borderColor",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Border colour to be applied, shades are taken from the current\ntheme."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 75,
									"character": 13
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeColor",
								"id": 30
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.borderColor",
								"id": 5
							}
						},
						{
							"id": 635,
							"name": "borderRadius",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Adds styling of a border radius to one of the size multiples."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 79,
									"character": 14
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "x1"
									},
									{
										"type": "stringLiteral",
										"value": "x2"
									},
									{
										"type": "stringLiteral",
										"value": "x3"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.borderRadius",
								"id": 6
							}
						},
						{
							"id": 636,
							"name": "borderSize",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Thickness of the border to be applied"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 81,
									"character": 12
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "x1"
									},
									{
										"type": "stringLiteral",
										"value": "x2"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.borderSize",
								"id": 7
							}
						},
						{
							"id": 637,
							"name": "clickable",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Adds styling to indicate that the element is clickable"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 83,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.clickable",
								"id": 8
							}
						},
						{
							"id": 638,
							"name": "container",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies relative positioning to contain child elements."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 85,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.container",
								"id": 9
							}
						},
						{
							"id": 628,
							"name": "direction",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Direction on which way to flex items."
							},
							"sources": [
								{
									"fileName": "src/Flex/Flex.tsx",
									"line": 21,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "horizontal"
									},
									{
										"type": "stringLiteral",
										"value": "vertical"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "FlexProps.direction",
								"id": 245
							}
						},
						{
							"id": 639,
							"name": "display",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies display styling"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 87,
									"character": 9
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "block"
									},
									{
										"type": "stringLiteral",
										"value": "inline-block"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.display",
								"id": 10
							}
						},
						{
							"id": 640,
							"name": "fixed",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Quick way of absolutely position to common places"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 89,
									"character": 7
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "fullscreen"
									},
									{
										"type": "stringLiteral",
										"value": "top"
									},
									{
										"type": "stringLiteral",
										"value": "top-left"
									},
									{
										"type": "stringLiteral",
										"value": "top-right"
									},
									{
										"type": "stringLiteral",
										"value": "bottom"
									},
									{
										"type": "stringLiteral",
										"value": "bottom-left"
									},
									{
										"type": "stringLiteral",
										"value": "bottom-right"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.fixed",
								"id": 11
							}
						},
						{
							"id": 621,
							"name": "gap",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Spacing applied between child Button items, values are global spacing variables.",
								"tags": [
									{
										"tag": "default",
										"text": "\"x1\"\n"
									}
								]
							},
							"sources": [
								{
									"fileName": "src/Button/Buttons.tsx",
									"line": 15,
									"character": 5
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeSize",
								"id": 31
							},
							"overwrites": {
								"type": "reference",
								"name": "FlexProps.gap",
								"id": 246
							}
						},
						{
							"id": 629,
							"name": "grow",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Flex item property if it should grow with available space."
							},
							"sources": [
								{
									"fileName": "src/Flex/Flex.tsx",
									"line": 25,
									"character": 6
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "FlexProps.grow",
								"id": 247
							}
						},
						{
							"id": 641,
							"name": "height",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Fixed height applied through inline styling"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 98,
									"character": 8
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.height",
								"id": 12
							}
						},
						{
							"id": 622,
							"name": "joined",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Configures the children Buttons to be joined together."
							},
							"sources": [
								{
									"fileName": "src/Button/Buttons.tsx",
									"line": 17,
									"character": 8
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							}
						},
						{
							"id": 642,
							"name": "margin",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Margins applied for the global spacing variables"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 100,
									"character": 8
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeSize",
								"id": 31
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.margin",
								"id": 13
							}
						},
						{
							"id": 643,
							"name": "maxWidth",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Max width applied through inline styling"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 102,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.maxWidth",
								"id": 14
							}
						},
						{
							"id": 644,
							"name": "minHeight",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Max height applied through inline styling"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 104,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.minHeight",
								"id": 15
							}
						},
						{
							"id": 645,
							"name": "minWidth",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Min width applied through inline style"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 106,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.minWidth",
								"id": 16
							}
						},
						{
							"id": 646,
							"name": "overflow",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Overflow"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 108,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "stringLiteral",
										"value": "hidden"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.overflow",
								"id": 17
							}
						},
						{
							"id": 647,
							"name": "padding",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Padding applied for the global spacing variables"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 110,
									"character": 9
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeSize",
								"id": 31
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.padding",
								"id": 18
							}
						},
						{
							"id": 648,
							"name": "paddingHorizontal",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Horizontal padding applied for the global spacing variables"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 112,
									"character": 19
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeSize",
								"id": 31
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.paddingHorizontal",
								"id": 19
							}
						},
						{
							"id": 649,
							"name": "paddingVertical",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Vertical pa?dding applied for the global spacing variables"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 114,
									"character": 17
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeSize",
								"id": 31
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.paddingVertical",
								"id": 20
							}
						},
						{
							"id": 650,
							"name": "scrollable",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies overflow styling to enable/disable scrolling."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 116,
									"character": 12
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.scrollable",
								"id": 21
							}
						},
						{
							"id": 630,
							"name": "shrink",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Flex item property if it should shrink."
							},
							"sources": [
								{
									"fileName": "src/Flex/Flex.tsx",
									"line": 27,
									"character": 8
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "FlexProps.shrink",
								"id": 248
							}
						},
						{
							"id": 651,
							"name": "tag",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Any valid HTML or SVG element tag.",
								"tags": [
									{
										"tag": "reference",
										"text": "false\n"
									}
								]
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 122,
									"character": 5
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeAllElementTags",
								"id": 34
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.tag",
								"id": 22
							}
						},
						{
							"id": 652,
							"name": "textColor",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Text colour to be applied."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 126,
									"character": 11
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeColor",
								"id": 30
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.textColor",
								"id": 23
							}
						},
						{
							"id": 653,
							"name": "theme",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Theme applied to this element and inherited for child elements (until\na descendant theme is applied)."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 131,
									"character": 7
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeTheme",
								"id": 35
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.theme",
								"id": 24
							}
						},
						{
							"id": 654,
							"name": "width",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Fixed width applied through inline styling"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 133,
									"character": 7
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.width",
								"id": 25
							}
						},
						{
							"id": 631,
							"name": "wrap",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Flag to allow flex items to wrap over to new lines"
							},
							"sources": [
								{
									"fileName": "src/Flex/Flex.tsx",
									"line": 29,
									"character": 6
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "FlexProps.wrap",
								"id": 249
							}
						},
						{
							"id": 655,
							"name": "zIndex",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "z-index number for layering elements."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 135,
									"character": 8
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "number"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.zIndex",
								"id": 26
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								632,
								623,
								624,
								625,
								626,
								633,
								627,
								634,
								635,
								636,
								637,
								638,
								628,
								639,
								640,
								621,
								629,
								641,
								622,
								642,
								643,
								644,
								645,
								646,
								647,
								648,
								649,
								650,
								630,
								651,
								652,
								653,
								654,
								631,
								655
							]
						}
					],
					"sources": [
						{
							"fileName": "src/Button/Buttons.tsx",
							"line": 9,
							"character": 29
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"name": "FlexProps",
							"id": 239
						}
					]
				},
				{
					"id": 656,
					"name": "Buttons",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "src/Button/Buttons.tsx",
							"line": 20,
							"character": 13
						}
					],
					"type": {
						"type": "reference",
						"name": "ForwardRefExoticComponent",
						"typeArguments": [
							{
								"type": "intersection",
								"types": [
									{
										"type": "reference",
										"name": "ButtonsProps",
										"id": 620
									},
									{
										"type": "reflection",
										"declaration": {
											"id": 657,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {}
										}
									},
									{
										"type": "reference",
										"name": "RefAttributes",
										"typeArguments": [
											{
												"type": "reference",
												"name": "HTMLElement"
											}
										]
									}
								]
							}
						]
					},
					"defaultValue": " React.forwardRef<HTMLElement, Attributes<HTMLElement, ButtonsProps>>((props, ref) => {\n  const { gap = 'x1', joined, ...rest } = props;\n  const classes = classnames('Buttons', {\n    'Buttons--joined': joined,\n  });\n\n  return (\n    <Flex { ...rest }\n        className={ classes }\n        direction=\"horizontal\"\n        gap={ joined ? undefined : gap }\n        ref={ ref } />\n  );\n})"
				}
			],
			"groups": [
				{
					"title": "Interfaces",
					"kind": 256,
					"children": [
						620
					]
				},
				{
					"title": "Variables",
					"kind": 32,
					"children": [
						656
					]
				}
			],
			"sources": [
				{
					"fileName": "src/Button/Buttons.tsx",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 699,
			"name": "\"CheckBox/CheckBox\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "/Users/harry/Projects/personal/preshape/src/CheckBox/CheckBox.tsx",
			"children": [
				{
					"id": 700,
					"name": "CheckBoxProps",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"children": [
						{
							"id": 701,
							"name": "disabled",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "A styled disabled state that disables all interactions"
							},
							"sources": [
								{
									"fileName": "src/CheckBox/CheckBox.tsx",
									"line": 9,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							}
						},
						{
							"id": 702,
							"name": "label",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "A label that gives describes what the input is for"
							},
							"sources": [
								{
									"fileName": "src/CheckBox/CheckBox.tsx",
									"line": 11,
									"character": 7
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								701,
								702
							]
						}
					],
					"sources": [
						{
							"fileName": "src/CheckBox/CheckBox.tsx",
							"line": 7,
							"character": 30
						}
					]
				},
				{
					"id": 707,
					"name": "CheckBox",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "src/CheckBox/CheckBox.tsx",
							"line": 22,
							"character": 14
						}
					],
					"type": {
						"type": "reference",
						"name": "ForwardRefExoticComponent",
						"typeArguments": [
							{
								"type": "intersection",
								"types": [
									{
										"type": "reference",
										"name": "CheckBoxProps",
										"id": 700
									},
									{
										"type": "reflection",
										"declaration": {
											"id": 708,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {}
										}
									},
									{
										"type": "reference",
										"name": "RefAttributes",
										"typeArguments": [
											{
												"type": "reference",
												"name": "HTMLInputElement"
											}
										]
									}
								]
							}
						]
					},
					"defaultValue": " React.forwardRef<HTMLInputElement, Attributes<HTMLInputElement, CheckBoxProps>>((props, ref) => {\n  const {\n    disabled,\n    label,\n    margin,\n    padding,\n    paddingHorizontal = 'x3',\n    paddingVertical = 'x2',\n    ...rest\n  } = props;\n\n  return (\n    <SelectInputLabel\n        disabled={ disabled }\n        label={ label }\n        margin={ margin }\n        padding={ padding }\n        paddingHorizontal={ paddingHorizontal }\n        paddingVertical={ paddingVertical }>\n      <CheckBoxIndicator { ...rest }\n          disabled={ disabled }\n          ref={ ref } />\n    </SelectInputLabel>\n  );\n})"
				}
			],
			"groups": [
				{
					"title": "Interfaces",
					"kind": 256,
					"children": [
						700
					]
				},
				{
					"title": "Variables",
					"kind": 32,
					"children": [
						707
					]
				}
			],
			"sources": [
				{
					"fileName": "src/CheckBox/CheckBox.tsx",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 658,
			"name": "\"CheckBox/CheckBoxIndicator\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "/Users/harry/Projects/personal/preshape/src/CheckBox/CheckBoxIndicator.tsx",
			"children": [
				{
					"id": 659,
					"name": "CheckboxIndicator",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "src/CheckBox/CheckBoxIndicator.tsx",
							"line": 3,
							"character": 23
						}
					],
					"type": {
						"type": "reference",
						"name": "ForwardRefExoticComponent",
						"typeArguments": [
							{
								"type": "intersection",
								"types": [
									{
										"type": "reference",
										"name": "InputHTMLAttributes",
										"typeArguments": [
											{
												"type": "reference",
												"name": "HTMLInputElement"
											}
										]
									},
									{
										"type": "reference",
										"name": "RefAttributes",
										"typeArguments": [
											{
												"type": "reference",
												"name": "HTMLInputElement"
											}
										]
									}
								]
							}
						]
					},
					"defaultValue": " React.forwardRef<HTMLInputElement, React.InputHTMLAttributes<HTMLInputElement>>((props, ref) => {\n  return (\n    <div className=\"CheckBox\">\n      <input { ...props }\n          className=\"CheckBox__input\"\n          ref={ ref }\n          type=\"checkbox\" />\n      <div className=\"CheckBox__indicator\" />\n    </div>\n  );\n})"
				}
			],
			"groups": [
				{
					"title": "Variables",
					"kind": 32,
					"children": [
						659
					]
				}
			],
			"sources": [
				{
					"fileName": "src/CheckBox/CheckBoxIndicator.tsx",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 709,
			"name": "\"Code/Code\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "/Users/harry/Projects/personal/preshape/src/Code/Code.tsx",
			"children": [
				{
					"id": 710,
					"name": "CodeProps",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"children": [
						{
							"id": 725,
							"name": "absolute",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Quick way of absolutely position to common places"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 58,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "fullscreen"
									},
									{
										"type": "stringLiteral",
										"value": "top"
									},
									{
										"type": "stringLiteral",
										"value": "top-left"
									},
									{
										"type": "stringLiteral",
										"value": "top-right"
									},
									{
										"type": "stringLiteral",
										"value": "bottom"
									},
									{
										"type": "stringLiteral",
										"value": "bottom-left"
									},
									{
										"type": "stringLiteral",
										"value": "bottom-right"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.absolute",
								"id": 3
							}
						},
						{
							"id": 711,
							"name": "align",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Text alignment"
							},
							"sources": [
								{
									"fileName": "src/Text/Text.tsx",
									"line": 32,
									"character": 7
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "start"
									},
									{
										"type": "stringLiteral",
										"value": "middle"
									},
									{
										"type": "stringLiteral",
										"value": "end"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TextProps.align",
								"id": 428
							}
						},
						{
							"id": 726,
							"name": "backgroundColor",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Background colour to be applied, shades are taken from the current\ntheme."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 70,
									"character": 17
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeColor",
								"id": 30
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.backgroundColor",
								"id": 4
							}
						},
						{
							"id": 727,
							"name": "borderColor",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Border colour to be applied, shades are taken from the current\ntheme."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 75,
									"character": 13
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeColor",
								"id": 30
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.borderColor",
								"id": 5
							}
						},
						{
							"id": 728,
							"name": "borderRadius",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Adds styling of a border radius to one of the size multiples."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 79,
									"character": 14
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "x1"
									},
									{
										"type": "stringLiteral",
										"value": "x2"
									},
									{
										"type": "stringLiteral",
										"value": "x3"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.borderRadius",
								"id": 6
							}
						},
						{
							"id": 729,
							"name": "borderSize",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Thickness of the border to be applied"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 81,
									"character": 12
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "x1"
									},
									{
										"type": "stringLiteral",
										"value": "x2"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.borderSize",
								"id": 7
							}
						},
						{
							"id": 712,
							"name": "breakOn",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "How the block of text should break onto new lines."
							},
							"sources": [
								{
									"fileName": "src/Text/Text.tsx",
									"line": 34,
									"character": 9
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "all"
									},
									{
										"type": "stringLiteral",
										"value": "none"
									},
									{
										"type": "stringLiteral",
										"value": "word"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TextProps.breakOn",
								"id": 429
							}
						},
						{
							"id": 730,
							"name": "clickable",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Adds styling to indicate that the element is clickable"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 83,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.clickable",
								"id": 8
							}
						},
						{
							"id": 731,
							"name": "container",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies relative positioning to contain child elements."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 85,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.container",
								"id": 9
							}
						},
						{
							"id": 732,
							"name": "display",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies display styling"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 87,
									"character": 9
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "block"
									},
									{
										"type": "stringLiteral",
										"value": "inline-block"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.display",
								"id": 10
							}
						},
						{
							"id": 713,
							"name": "ellipsis",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Replaces the overflow of text with the ellipsis character"
							},
							"sources": [
								{
									"fileName": "src/Text/Text.tsx",
									"line": 36,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TextProps.ellipsis",
								"id": 430
							}
						},
						{
							"id": 714,
							"name": "emphasis",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies emphasis styling"
							},
							"sources": [
								{
									"fileName": "src/Text/Text.tsx",
									"line": 38,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TextProps.emphasis",
								"id": 431
							}
						},
						{
							"id": 733,
							"name": "fixed",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Quick way of absolutely position to common places"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 89,
									"character": 7
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "fullscreen"
									},
									{
										"type": "stringLiteral",
										"value": "top"
									},
									{
										"type": "stringLiteral",
										"value": "top-left"
									},
									{
										"type": "stringLiteral",
										"value": "top-right"
									},
									{
										"type": "stringLiteral",
										"value": "bottom"
									},
									{
										"type": "stringLiteral",
										"value": "bottom-left"
									},
									{
										"type": "stringLiteral",
										"value": "bottom-right"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.fixed",
								"id": 11
							}
						},
						{
							"id": 715,
							"name": "heading",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies a heading font family style"
							},
							"sources": [
								{
									"fileName": "src/Text/Text.tsx",
									"line": 40,
									"character": 9
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TextProps.heading",
								"id": 432
							}
						},
						{
							"id": 734,
							"name": "height",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Fixed height applied through inline styling"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 98,
									"character": 8
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.height",
								"id": 12
							}
						},
						{
							"id": 716,
							"name": "inline",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Text default to block display, this will apply inline display."
							},
							"sources": [
								{
									"fileName": "src/Text/Text.tsx",
									"line": 42,
									"character": 8
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TextProps.inline",
								"id": 433
							}
						},
						{
							"id": 735,
							"name": "margin",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Margins applied for the global spacing variables"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 100,
									"character": 8
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeSize",
								"id": 31
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.margin",
								"id": 13
							}
						},
						{
							"id": 736,
							"name": "maxWidth",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Max width applied through inline styling"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 102,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.maxWidth",
								"id": 14
							}
						},
						{
							"id": 737,
							"name": "minHeight",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Max height applied through inline styling"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 104,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.minHeight",
								"id": 15
							}
						},
						{
							"id": 738,
							"name": "minWidth",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Min width applied through inline style"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 106,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.minWidth",
								"id": 16
							}
						},
						{
							"id": 717,
							"name": "monospace",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies a monospace font family style"
							},
							"sources": [
								{
									"fileName": "src/Text/Text.tsx",
									"line": 44,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TextProps.monospace",
								"id": 434
							}
						},
						{
							"id": 739,
							"name": "overflow",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Overflow"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 108,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "stringLiteral",
										"value": "hidden"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.overflow",
								"id": 17
							}
						},
						{
							"id": 740,
							"name": "padding",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Padding applied for the global spacing variables"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 110,
									"character": 9
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeSize",
								"id": 31
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.padding",
								"id": 18
							}
						},
						{
							"id": 741,
							"name": "paddingHorizontal",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Horizontal padding applied for the global spacing variables"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 112,
									"character": 19
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeSize",
								"id": 31
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.paddingHorizontal",
								"id": 19
							}
						},
						{
							"id": 742,
							"name": "paddingVertical",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Vertical pa?dding applied for the global spacing variables"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 114,
									"character": 17
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeSize",
								"id": 31
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.paddingVertical",
								"id": 20
							}
						},
						{
							"id": 743,
							"name": "scrollable",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies overflow styling to enable/disable scrolling."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 116,
									"character": 12
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.scrollable",
								"id": 21
							}
						},
						{
							"id": 718,
							"name": "size",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Size of the text"
							},
							"sources": [
								{
									"fileName": "src/Text/Text.tsx",
									"line": 46,
									"character": 6
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeTextSize",
								"id": 466
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TextProps.size",
								"id": 435
							}
						},
						{
							"id": 719,
							"name": "strong",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies strong weight styling"
							},
							"sources": [
								{
									"fileName": "src/Text/Text.tsx",
									"line": 48,
									"character": 8
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TextProps.strong",
								"id": 436
							}
						},
						{
							"id": 720,
							"name": "subscript",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies subscript baseline styling"
							},
							"sources": [
								{
									"fileName": "src/Text/Text.tsx",
									"line": 50,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TextProps.subscript",
								"id": 437
							}
						},
						{
							"id": 721,
							"name": "superscript",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies superscript baseline styling"
							},
							"sources": [
								{
									"fileName": "src/Text/Text.tsx",
									"line": 52,
									"character": 13
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TextProps.superscript",
								"id": 438
							}
						},
						{
							"id": 744,
							"name": "tag",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Any valid HTML or SVG element tag.",
								"tags": [
									{
										"tag": "reference",
										"text": "false\n"
									}
								]
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 122,
									"character": 5
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeAllElementTags",
								"id": 34
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.tag",
								"id": 22
							}
						},
						{
							"id": 745,
							"name": "textColor",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Text colour to be applied."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 126,
									"character": 11
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeColor",
								"id": 30
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.textColor",
								"id": 23
							}
						},
						{
							"id": 746,
							"name": "theme",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Theme applied to this element and inherited for child elements (until\na descendant theme is applied)."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 131,
									"character": 7
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeTheme",
								"id": 35
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.theme",
								"id": 24
							}
						},
						{
							"id": 722,
							"name": "titlecase",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies title casing styling"
							},
							"sources": [
								{
									"fileName": "src/Text/Text.tsx",
									"line": 54,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TextProps.titlecase",
								"id": 439
							}
						},
						{
							"id": 723,
							"name": "uppercase",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies uppercasing styling"
							},
							"sources": [
								{
									"fileName": "src/Text/Text.tsx",
									"line": 56,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TextProps.uppercase",
								"id": 440
							}
						},
						{
							"id": 724,
							"name": "weak",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies weak weight styling"
							},
							"sources": [
								{
									"fileName": "src/Text/Text.tsx",
									"line": 58,
									"character": 6
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TextProps.weak",
								"id": 441
							}
						},
						{
							"id": 747,
							"name": "width",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Fixed width applied through inline styling"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 133,
									"character": 7
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.width",
								"id": 25
							}
						},
						{
							"id": 748,
							"name": "zIndex",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "z-index number for layering elements."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 135,
									"character": 8
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "number"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.zIndex",
								"id": 26
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								725,
								711,
								726,
								727,
								728,
								729,
								712,
								730,
								731,
								732,
								713,
								714,
								733,
								715,
								734,
								716,
								735,
								736,
								737,
								738,
								717,
								739,
								740,
								741,
								742,
								743,
								718,
								719,
								720,
								721,
								744,
								745,
								746,
								722,
								723,
								724,
								747,
								748
							]
						}
					],
					"sources": [
						{
							"fileName": "src/Code/Code.tsx",
							"line": 5,
							"character": 26
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"name": "TextProps",
							"id": 427
						}
					]
				},
				{
					"id": 749,
					"name": "Code",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "src/Code/Code.tsx",
							"line": 7,
							"character": 10
						}
					],
					"type": {
						"type": "reference",
						"name": "ForwardRefExoticComponent",
						"typeArguments": [
							{
								"type": "intersection",
								"types": [
									{
										"type": "reference",
										"name": "CodeProps",
										"id": 710
									},
									{
										"type": "reflection",
										"declaration": {
											"id": 750,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {}
										}
									},
									{
										"type": "reference",
										"name": "RefAttributes",
										"typeArguments": [
											{
												"type": "reference",
												"name": "HTMLElement"
											}
										]
									}
								]
							}
						]
					},
					"defaultValue": " React.forwardRef<HTMLElement, Attributes<HTMLElement, CodeProps>>((props, ref) => {\n  return (\n    <Text { ...props }\n        monospace\n        ref={ ref }\n        tag=\"code\" />\n  );\n})"
				}
			],
			"groups": [
				{
					"title": "Interfaces",
					"kind": 256,
					"children": [
						710
					]
				},
				{
					"title": "Variables",
					"kind": 32,
					"children": [
						749
					]
				}
			],
			"sources": [
				{
					"fileName": "src/Code/Code.tsx",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 751,
			"name": "\"Code/CodeBlock\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "/Users/harry/Projects/personal/preshape/src/Code/CodeBlock.tsx",
			"children": [
				{
					"id": 752,
					"name": "CodeBlockProps",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"children": [
						{
							"id": 770,
							"name": "absolute",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Quick way of absolutely position to common places"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 58,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "fullscreen"
									},
									{
										"type": "stringLiteral",
										"value": "top"
									},
									{
										"type": "stringLiteral",
										"value": "top-left"
									},
									{
										"type": "stringLiteral",
										"value": "top-right"
									},
									{
										"type": "stringLiteral",
										"value": "bottom"
									},
									{
										"type": "stringLiteral",
										"value": "bottom-left"
									},
									{
										"type": "stringLiteral",
										"value": "bottom-right"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.absolute",
								"id": 3
							}
						},
						{
							"id": 756,
							"name": "align",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Text alignment"
							},
							"sources": [
								{
									"fileName": "src/Text/Text.tsx",
									"line": 32,
									"character": 7
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "start"
									},
									{
										"type": "stringLiteral",
										"value": "middle"
									},
									{
										"type": "stringLiteral",
										"value": "end"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TextProps.align",
								"id": 428
							}
						},
						{
							"id": 771,
							"name": "backgroundColor",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Background colour to be applied, shades are taken from the current\ntheme."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 70,
									"character": 17
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeColor",
								"id": 30
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.backgroundColor",
								"id": 4
							}
						},
						{
							"id": 772,
							"name": "borderColor",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Border colour to be applied, shades are taken from the current\ntheme."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 75,
									"character": 13
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeColor",
								"id": 30
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.borderColor",
								"id": 5
							}
						},
						{
							"id": 773,
							"name": "borderRadius",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Adds styling of a border radius to one of the size multiples."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 79,
									"character": 14
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "x1"
									},
									{
										"type": "stringLiteral",
										"value": "x2"
									},
									{
										"type": "stringLiteral",
										"value": "x3"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.borderRadius",
								"id": 6
							}
						},
						{
							"id": 774,
							"name": "borderSize",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Thickness of the border to be applied"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 81,
									"character": 12
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "x1"
									},
									{
										"type": "stringLiteral",
										"value": "x2"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.borderSize",
								"id": 7
							}
						},
						{
							"id": 757,
							"name": "breakOn",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "How the block of text should break onto new lines."
							},
							"sources": [
								{
									"fileName": "src/Text/Text.tsx",
									"line": 34,
									"character": 9
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "all"
									},
									{
										"type": "stringLiteral",
										"value": "none"
									},
									{
										"type": "stringLiteral",
										"value": "word"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TextProps.breakOn",
								"id": 429
							}
						},
						{
							"id": 753,
							"name": "children",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/Code/CodeBlock.tsx",
									"line": 13,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							}
						},
						{
							"id": 775,
							"name": "clickable",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Adds styling to indicate that the element is clickable"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 83,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.clickable",
								"id": 8
							}
						},
						{
							"id": 776,
							"name": "container",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies relative positioning to contain child elements."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 85,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.container",
								"id": 9
							}
						},
						{
							"id": 777,
							"name": "display",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies display styling"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 87,
									"character": 9
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "block"
									},
									{
										"type": "stringLiteral",
										"value": "inline-block"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.display",
								"id": 10
							}
						},
						{
							"id": 758,
							"name": "ellipsis",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Replaces the overflow of text with the ellipsis character"
							},
							"sources": [
								{
									"fileName": "src/Text/Text.tsx",
									"line": 36,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TextProps.ellipsis",
								"id": 430
							}
						},
						{
							"id": 759,
							"name": "emphasis",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies emphasis styling"
							},
							"sources": [
								{
									"fileName": "src/Text/Text.tsx",
									"line": 38,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TextProps.emphasis",
								"id": 431
							}
						},
						{
							"id": 778,
							"name": "fixed",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Quick way of absolutely position to common places"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 89,
									"character": 7
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "fullscreen"
									},
									{
										"type": "stringLiteral",
										"value": "top"
									},
									{
										"type": "stringLiteral",
										"value": "top-left"
									},
									{
										"type": "stringLiteral",
										"value": "top-right"
									},
									{
										"type": "stringLiteral",
										"value": "bottom"
									},
									{
										"type": "stringLiteral",
										"value": "bottom-left"
									},
									{
										"type": "stringLiteral",
										"value": "bottom-right"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.fixed",
								"id": 11
							}
						},
						{
							"id": 760,
							"name": "heading",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies a heading font family style"
							},
							"sources": [
								{
									"fileName": "src/Text/Text.tsx",
									"line": 40,
									"character": 9
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TextProps.heading",
								"id": 432
							}
						},
						{
							"id": 779,
							"name": "height",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Fixed height applied through inline styling"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 98,
									"character": 8
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.height",
								"id": 12
							}
						},
						{
							"id": 761,
							"name": "inline",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Text default to block display, this will apply inline display."
							},
							"sources": [
								{
									"fileName": "src/Text/Text.tsx",
									"line": 42,
									"character": 8
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TextProps.inline",
								"id": 433
							}
						},
						{
							"id": 754,
							"name": "language",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/Code/CodeBlock.tsx",
									"line": 14,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "stringLiteral",
										"value": "css"
									},
									{
										"type": "stringLiteral",
										"value": "html"
									},
									{
										"type": "stringLiteral",
										"value": "javascript"
									},
									{
										"type": "stringLiteral",
										"value": "js"
									},
									{
										"type": "stringLiteral",
										"value": "jsx"
									},
									{
										"type": "stringLiteral",
										"value": "json"
									}
								]
							}
						},
						{
							"id": 780,
							"name": "margin",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Margins applied for the global spacing variables"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 100,
									"character": 8
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeSize",
								"id": 31
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.margin",
								"id": 13
							}
						},
						{
							"id": 781,
							"name": "maxWidth",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Max width applied through inline styling"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 102,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.maxWidth",
								"id": 14
							}
						},
						{
							"id": 782,
							"name": "minHeight",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Max height applied through inline styling"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 104,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.minHeight",
								"id": 15
							}
						},
						{
							"id": 783,
							"name": "minWidth",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Min width applied through inline style"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 106,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.minWidth",
								"id": 16
							}
						},
						{
							"id": 762,
							"name": "monospace",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies a monospace font family style"
							},
							"sources": [
								{
									"fileName": "src/Text/Text.tsx",
									"line": 44,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TextProps.monospace",
								"id": 434
							}
						},
						{
							"id": 784,
							"name": "overflow",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Overflow"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 108,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "stringLiteral",
										"value": "hidden"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.overflow",
								"id": 17
							}
						},
						{
							"id": 785,
							"name": "padding",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Padding applied for the global spacing variables"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 110,
									"character": 9
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeSize",
								"id": 31
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.padding",
								"id": 18
							}
						},
						{
							"id": 786,
							"name": "paddingHorizontal",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Horizontal padding applied for the global spacing variables"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 112,
									"character": 19
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeSize",
								"id": 31
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.paddingHorizontal",
								"id": 19
							}
						},
						{
							"id": 787,
							"name": "paddingVertical",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Vertical pa?dding applied for the global spacing variables"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 114,
									"character": 17
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeSize",
								"id": 31
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.paddingVertical",
								"id": 20
							}
						},
						{
							"id": 788,
							"name": "scrollable",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies overflow styling to enable/disable scrolling."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 116,
									"character": 12
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.scrollable",
								"id": 21
							}
						},
						{
							"id": 763,
							"name": "size",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Size of the text"
							},
							"sources": [
								{
									"fileName": "src/Text/Text.tsx",
									"line": 46,
									"character": 6
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeTextSize",
								"id": 466
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TextProps.size",
								"id": 435
							}
						},
						{
							"id": 764,
							"name": "strong",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies strong weight styling"
							},
							"sources": [
								{
									"fileName": "src/Text/Text.tsx",
									"line": 48,
									"character": 8
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TextProps.strong",
								"id": 436
							}
						},
						{
							"id": 765,
							"name": "subscript",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies subscript baseline styling"
							},
							"sources": [
								{
									"fileName": "src/Text/Text.tsx",
									"line": 50,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TextProps.subscript",
								"id": 437
							}
						},
						{
							"id": 766,
							"name": "superscript",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies superscript baseline styling"
							},
							"sources": [
								{
									"fileName": "src/Text/Text.tsx",
									"line": 52,
									"character": 13
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TextProps.superscript",
								"id": 438
							}
						},
						{
							"id": 789,
							"name": "tag",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Any valid HTML or SVG element tag.",
								"tags": [
									{
										"tag": "reference",
										"text": "false\n"
									}
								]
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 122,
									"character": 5
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeAllElementTags",
								"id": 34
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.tag",
								"id": 22
							}
						},
						{
							"id": 790,
							"name": "textColor",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Text colour to be applied."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 126,
									"character": 11
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeColor",
								"id": 30
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.textColor",
								"id": 23
							}
						},
						{
							"id": 791,
							"name": "theme",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Theme applied to this element and inherited for child elements (until\na descendant theme is applied)."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 131,
									"character": 7
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeTheme",
								"id": 35
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.theme",
								"id": 24
							}
						},
						{
							"id": 767,
							"name": "titlecase",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies title casing styling"
							},
							"sources": [
								{
									"fileName": "src/Text/Text.tsx",
									"line": 54,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TextProps.titlecase",
								"id": 439
							}
						},
						{
							"id": 768,
							"name": "uppercase",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies uppercasing styling"
							},
							"sources": [
								{
									"fileName": "src/Text/Text.tsx",
									"line": 56,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TextProps.uppercase",
								"id": 440
							}
						},
						{
							"id": 769,
							"name": "weak",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies weak weight styling"
							},
							"sources": [
								{
									"fileName": "src/Text/Text.tsx",
									"line": 58,
									"character": 6
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TextProps.weak",
								"id": 441
							}
						},
						{
							"id": 792,
							"name": "width",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Fixed width applied through inline styling"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 133,
									"character": 7
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.width",
								"id": 25
							}
						},
						{
							"id": 755,
							"name": "wrap",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/Code/CodeBlock.tsx",
									"line": 22,
									"character": 6
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							}
						},
						{
							"id": 793,
							"name": "zIndex",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "z-index number for layering elements."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 135,
									"character": 8
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "number"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.zIndex",
								"id": 26
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								770,
								756,
								771,
								772,
								773,
								774,
								757,
								753,
								775,
								776,
								777,
								758,
								759,
								778,
								760,
								779,
								761,
								754,
								780,
								781,
								782,
								783,
								762,
								784,
								785,
								786,
								787,
								788,
								763,
								764,
								765,
								766,
								789,
								790,
								791,
								767,
								768,
								769,
								792,
								755,
								793
							]
						}
					],
					"sources": [
						{
							"fileName": "src/Code/CodeBlock.tsx",
							"line": 12,
							"character": 31
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"name": "TextProps",
							"id": 427
						}
					]
				},
				{
					"id": 794,
					"name": "CodeBlock",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "src/Code/CodeBlock.tsx",
							"line": 25,
							"character": 15
						}
					],
					"type": {
						"type": "reference",
						"name": "ForwardRefExoticComponent",
						"typeArguments": [
							{
								"type": "intersection",
								"types": [
									{
										"type": "reference",
										"name": "CodeBlockProps",
										"id": 752
									},
									{
										"type": "reflection",
										"declaration": {
											"id": 795,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {}
										}
									},
									{
										"type": "reference",
										"name": "RefAttributes",
										"typeArguments": [
											{
												"type": "reference",
												"name": "HTMLPreElement"
											}
										]
									}
								]
							}
						]
					},
					"defaultValue": " React.forwardRef<HTMLPreElement, Attributes<HTMLPreElement, CodeBlockProps>>((props, ref) => {\n  const { children, language, wrap, ...rest } = props;\n  const classes = classnames('CodeBlock', {\n    'CodeBlock--wrap': wrap,\n    [`language-${language}`]: language,\n  });\n\n  let content = children;\n\n  if (language && children) {\n    content = Prism.highlight(children, Prism.languages[language], language);\n  }\n\n  return (\n    <Text { ...rest }\n        className={ classes }\n        ref={ ref }\n        tag=\"pre\">\n      { language ? (\n        <Code dangerouslySetInnerHTML={ { __html: content as string } } />\n      ) : (\n        <Code>{ content }</Code>\n      ) }\n    </Text>\n  );\n})"
				}
			],
			"groups": [
				{
					"title": "Interfaces",
					"kind": 256,
					"children": [
						752
					]
				},
				{
					"title": "Variables",
					"kind": 32,
					"children": [
						794
					]
				}
			],
			"sources": [
				{
					"fileName": "src/Code/CodeBlock.tsx",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 238,
			"name": "\"Flex/Flex\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "/Users/harry/Projects/personal/preshape/src/Flex/Flex.tsx",
			"children": [
				{
					"id": 239,
					"name": "FlexProps",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"children": [
						{
							"id": 250,
							"name": "absolute",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Quick way of absolutely position to common places"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 58,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "fullscreen"
									},
									{
										"type": "stringLiteral",
										"value": "top"
									},
									{
										"type": "stringLiteral",
										"value": "top-left"
									},
									{
										"type": "stringLiteral",
										"value": "top-right"
									},
									{
										"type": "stringLiteral",
										"value": "bottom"
									},
									{
										"type": "stringLiteral",
										"value": "bottom-left"
									},
									{
										"type": "stringLiteral",
										"value": "bottom-right"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.absolute",
								"id": 3
							}
						},
						{
							"id": 240,
							"name": "alignChildren",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Short cut child alignment property for both alignChildrenHorizontal and\nalignChildrenVertical."
							},
							"sources": [
								{
									"fileName": "src/Flex/Flex.tsx",
									"line": 11,
									"character": 15
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "start"
									},
									{
										"type": "stringLiteral",
										"value": "middle"
									},
									{
										"type": "stringLiteral",
										"value": "end"
									}
								]
							}
						},
						{
							"id": 241,
							"name": "alignChildrenHorizontal",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Horizontal alignment of children flex items."
							},
							"sources": [
								{
									"fileName": "src/Flex/Flex.tsx",
									"line": 13,
									"character": 25
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "start"
									},
									{
										"type": "stringLiteral",
										"value": "middle"
									},
									{
										"type": "stringLiteral",
										"value": "end"
									},
									{
										"type": "stringLiteral",
										"value": "around"
									},
									{
										"type": "stringLiteral",
										"value": "between"
									}
								]
							}
						},
						{
							"id": 242,
							"name": "alignChildrenVertical",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Vertical alignment of children flex items."
							},
							"sources": [
								{
									"fileName": "src/Flex/Flex.tsx",
									"line": 15,
									"character": 23
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "start"
									},
									{
										"type": "stringLiteral",
										"value": "middle"
									},
									{
										"type": "stringLiteral",
										"value": "end"
									},
									{
										"type": "stringLiteral",
										"value": "around"
									},
									{
										"type": "stringLiteral",
										"value": "between"
									}
								]
							}
						},
						{
							"id": 243,
							"name": "alignSelf",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Flex item alignment property (changes with parent direction)."
							},
							"sources": [
								{
									"fileName": "src/Flex/Flex.tsx",
									"line": 17,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "start"
									},
									{
										"type": "stringLiteral",
										"value": "middle"
									},
									{
										"type": "stringLiteral",
										"value": "end"
									}
								]
							}
						},
						{
							"id": 251,
							"name": "backgroundColor",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Background colour to be applied, shades are taken from the current\ntheme."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 70,
									"character": 17
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeColor",
								"id": 30
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.backgroundColor",
								"id": 4
							}
						},
						{
							"id": 244,
							"name": "basis",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Initial width to flex from for a child item."
							},
							"sources": [
								{
									"fileName": "src/Flex/Flex.tsx",
									"line": 19,
									"character": 7
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "content"
									},
									{
										"type": "stringLiteral",
										"value": "container"
									},
									{
										"type": "stringLiteral",
										"value": "none"
									}
								]
							}
						},
						{
							"id": 252,
							"name": "borderColor",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Border colour to be applied, shades are taken from the current\ntheme."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 75,
									"character": 13
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeColor",
								"id": 30
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.borderColor",
								"id": 5
							}
						},
						{
							"id": 253,
							"name": "borderRadius",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Adds styling of a border radius to one of the size multiples."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 79,
									"character": 14
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "x1"
									},
									{
										"type": "stringLiteral",
										"value": "x2"
									},
									{
										"type": "stringLiteral",
										"value": "x3"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.borderRadius",
								"id": 6
							}
						},
						{
							"id": 254,
							"name": "borderSize",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Thickness of the border to be applied"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 81,
									"character": 12
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "x1"
									},
									{
										"type": "stringLiteral",
										"value": "x2"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.borderSize",
								"id": 7
							}
						},
						{
							"id": 255,
							"name": "clickable",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Adds styling to indicate that the element is clickable"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 83,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.clickable",
								"id": 8
							}
						},
						{
							"id": 256,
							"name": "container",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies relative positioning to contain child elements."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 85,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.container",
								"id": 9
							}
						},
						{
							"id": 245,
							"name": "direction",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Direction on which way to flex items."
							},
							"sources": [
								{
									"fileName": "src/Flex/Flex.tsx",
									"line": 21,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "horizontal"
									},
									{
										"type": "stringLiteral",
										"value": "vertical"
									}
								]
							}
						},
						{
							"id": 257,
							"name": "display",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies display styling"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 87,
									"character": 9
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "block"
									},
									{
										"type": "stringLiteral",
										"value": "inline-block"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.display",
								"id": 10
							}
						},
						{
							"id": 258,
							"name": "fixed",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Quick way of absolutely position to common places"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 89,
									"character": 7
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "fullscreen"
									},
									{
										"type": "stringLiteral",
										"value": "top"
									},
									{
										"type": "stringLiteral",
										"value": "top-left"
									},
									{
										"type": "stringLiteral",
										"value": "top-right"
									},
									{
										"type": "stringLiteral",
										"value": "bottom"
									},
									{
										"type": "stringLiteral",
										"value": "bottom-left"
									},
									{
										"type": "stringLiteral",
										"value": "bottom-right"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.fixed",
								"id": 11
							}
						},
						{
							"id": 246,
							"name": "gap",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Spacing applied between child flex items, values are global spacing variables."
							},
							"sources": [
								{
									"fileName": "src/Flex/Flex.tsx",
									"line": 23,
									"character": 5
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeSize",
								"id": 31
							}
						},
						{
							"id": 247,
							"name": "grow",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Flex item property if it should grow with available space."
							},
							"sources": [
								{
									"fileName": "src/Flex/Flex.tsx",
									"line": 25,
									"character": 6
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							}
						},
						{
							"id": 259,
							"name": "height",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Fixed height applied through inline styling"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 98,
									"character": 8
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.height",
								"id": 12
							}
						},
						{
							"id": 260,
							"name": "margin",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Margins applied for the global spacing variables"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 100,
									"character": 8
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeSize",
								"id": 31
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.margin",
								"id": 13
							}
						},
						{
							"id": 261,
							"name": "maxWidth",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Max width applied through inline styling"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 102,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.maxWidth",
								"id": 14
							}
						},
						{
							"id": 262,
							"name": "minHeight",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Max height applied through inline styling"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 104,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.minHeight",
								"id": 15
							}
						},
						{
							"id": 263,
							"name": "minWidth",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Min width applied through inline style"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 106,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.minWidth",
								"id": 16
							}
						},
						{
							"id": 264,
							"name": "overflow",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Overflow"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 108,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "stringLiteral",
										"value": "hidden"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.overflow",
								"id": 17
							}
						},
						{
							"id": 265,
							"name": "padding",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Padding applied for the global spacing variables"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 110,
									"character": 9
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeSize",
								"id": 31
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.padding",
								"id": 18
							}
						},
						{
							"id": 266,
							"name": "paddingHorizontal",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Horizontal padding applied for the global spacing variables"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 112,
									"character": 19
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeSize",
								"id": 31
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.paddingHorizontal",
								"id": 19
							}
						},
						{
							"id": 267,
							"name": "paddingVertical",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Vertical pa?dding applied for the global spacing variables"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 114,
									"character": 17
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeSize",
								"id": 31
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.paddingVertical",
								"id": 20
							}
						},
						{
							"id": 268,
							"name": "scrollable",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies overflow styling to enable/disable scrolling."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 116,
									"character": 12
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.scrollable",
								"id": 21
							}
						},
						{
							"id": 248,
							"name": "shrink",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Flex item property if it should shrink."
							},
							"sources": [
								{
									"fileName": "src/Flex/Flex.tsx",
									"line": 27,
									"character": 8
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							}
						},
						{
							"id": 269,
							"name": "tag",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Any valid HTML or SVG element tag.",
								"tags": [
									{
										"tag": "reference",
										"text": "false\n"
									}
								]
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 122,
									"character": 5
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeAllElementTags",
								"id": 34
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.tag",
								"id": 22
							}
						},
						{
							"id": 270,
							"name": "textColor",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Text colour to be applied."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 126,
									"character": 11
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeColor",
								"id": 30
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.textColor",
								"id": 23
							}
						},
						{
							"id": 271,
							"name": "theme",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Theme applied to this element and inherited for child elements (until\na descendant theme is applied)."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 131,
									"character": 7
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeTheme",
								"id": 35
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.theme",
								"id": 24
							}
						},
						{
							"id": 272,
							"name": "width",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Fixed width applied through inline styling"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 133,
									"character": 7
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.width",
								"id": 25
							}
						},
						{
							"id": 249,
							"name": "wrap",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Flag to allow flex items to wrap over to new lines"
							},
							"sources": [
								{
									"fileName": "src/Flex/Flex.tsx",
									"line": 29,
									"character": 6
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							}
						},
						{
							"id": 273,
							"name": "zIndex",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "z-index number for layering elements."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 135,
									"character": 8
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "number"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.zIndex",
								"id": 26
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								250,
								240,
								241,
								242,
								243,
								251,
								244,
								252,
								253,
								254,
								255,
								256,
								245,
								257,
								258,
								246,
								247,
								259,
								260,
								261,
								262,
								263,
								264,
								265,
								266,
								267,
								268,
								248,
								269,
								270,
								271,
								272,
								249,
								273
							]
						}
					],
					"sources": [
						{
							"fileName": "src/Flex/Flex.tsx",
							"line": 6,
							"character": 26
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"name": "BaseProps",
							"id": 2
						}
					],
					"extendedBy": [
						{
							"type": "reference",
							"name": "AppearProps",
							"id": 277
						},
						{
							"type": "reference",
							"name": "ButtonProps",
							"id": 578
						},
						{
							"type": "reference",
							"name": "ButtonsProps",
							"id": 620
						},
						{
							"type": "reference",
							"name": "SelectInputLabelProps",
							"id": 661
						},
						{
							"type": "reference",
							"name": "GridProps",
							"id": 825
						},
						{
							"type": "reference",
							"name": "GridItemProps",
							"id": 868
						},
						{
							"type": "reference",
							"name": "InputLabelProps",
							"id": 1007
						},
						{
							"type": "reference",
							"name": "ListProps",
							"id": 1212
						},
						{
							"type": "reference",
							"name": "ListItemProps",
							"id": 1250
						},
						{
							"type": "reference",
							"name": "PlacementContentProps",
							"id": 1435
						},
						{
							"type": "reference",
							"name": "TabContentProps",
							"id": 1582
						},
						{
							"type": "reference",
							"name": "TabsProps",
							"id": 1620
						}
					]
				},
				{
					"id": 274,
					"name": "Flex",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "src/Flex/Flex.tsx",
							"line": 33,
							"character": 10
						}
					],
					"type": {
						"type": "reference",
						"name": "ForwardRefExoticComponent",
						"typeArguments": [
							{
								"type": "intersection",
								"types": [
									{
										"type": "reference",
										"name": "FlexProps",
										"id": 239
									},
									{
										"type": "reflection",
										"declaration": {
											"id": 275,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {}
										}
									},
									{
										"type": "reference",
										"name": "RefAttributes",
										"typeArguments": [
											{
												"type": "reference",
												"name": "HTMLElement"
											}
										]
									}
								]
							}
						]
					},
					"defaultValue": " React.forwardRef<HTMLElement, Attributes<HTMLElement, FlexProps>>((props, ref) => {\n  const {\n    alignChildren,\n    alignChildrenHorizontal = alignChildren,\n    alignChildrenVertical = alignChildren,\n    alignSelf,\n    className,\n    direction,\n    grow,\n    gap,\n    basis,\n    shrink,\n    wrap,\n    ...rest\n  } = props;\n\n  const classes = classnames('Flex', {\n    [`Flex--align-horz-${alignChildrenHorizontal}`]: alignChildrenHorizontal,\n    [`Flex--align-self-${alignSelf}`]: alignSelf,\n    [`Flex--align-vert-${alignChildrenVertical}`]: alignChildrenVertical,\n    [`Flex--${direction}`]: direction,\n    [`Flex--basis-${basis}`]: basis,\n    [`Flex--gap-${gap}`]: gap,\n    'Flex--grow': grow,\n    'Flex--shrink': shrink,\n    'Flex--wrap': wrap,\n  }, className);\n\n  return (\n    <Base { ...rest }\n        className={ classes }\n        ref={ ref } />\n  );\n})"
				}
			],
			"groups": [
				{
					"title": "Interfaces",
					"kind": 256,
					"children": [
						239
					]
				},
				{
					"title": "Variables",
					"kind": 32,
					"children": [
						274
					]
				}
			],
			"sources": [
				{
					"fileName": "src/Flex/Flex.tsx",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 796,
			"name": "\"Form/Form\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "/Users/harry/Projects/personal/preshape/src/Form/Form.tsx",
			"children": [
				{
					"id": 797,
					"name": "Props",
					"kind": 256,
					"kindString": "Interface",
					"flags": {},
					"children": [
						{
							"id": 798,
							"name": "absolute",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Quick way of absolutely position to common places"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 58,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "fullscreen"
									},
									{
										"type": "stringLiteral",
										"value": "top"
									},
									{
										"type": "stringLiteral",
										"value": "top-left"
									},
									{
										"type": "stringLiteral",
										"value": "top-right"
									},
									{
										"type": "stringLiteral",
										"value": "bottom"
									},
									{
										"type": "stringLiteral",
										"value": "bottom-left"
									},
									{
										"type": "stringLiteral",
										"value": "bottom-right"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.absolute",
								"id": 3
							}
						},
						{
							"id": 799,
							"name": "backgroundColor",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Background colour to be applied, shades are taken from the current\ntheme."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 70,
									"character": 17
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeColor",
								"id": 30
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.backgroundColor",
								"id": 4
							}
						},
						{
							"id": 800,
							"name": "borderColor",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Border colour to be applied, shades are taken from the current\ntheme."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 75,
									"character": 13
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeColor",
								"id": 30
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.borderColor",
								"id": 5
							}
						},
						{
							"id": 801,
							"name": "borderRadius",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Adds styling of a border radius to one of the size multiples."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 79,
									"character": 14
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "x1"
									},
									{
										"type": "stringLiteral",
										"value": "x2"
									},
									{
										"type": "stringLiteral",
										"value": "x3"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.borderRadius",
								"id": 6
							}
						},
						{
							"id": 802,
							"name": "borderSize",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Thickness of the border to be applied"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 81,
									"character": 12
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "x1"
									},
									{
										"type": "stringLiteral",
										"value": "x2"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.borderSize",
								"id": 7
							}
						},
						{
							"id": 803,
							"name": "clickable",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Adds styling to indicate that the element is clickable"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 83,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.clickable",
								"id": 8
							}
						},
						{
							"id": 804,
							"name": "container",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies relative positioning to contain child elements."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 85,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.container",
								"id": 9
							}
						},
						{
							"id": 805,
							"name": "display",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies display styling"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 87,
									"character": 9
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "block"
									},
									{
										"type": "stringLiteral",
										"value": "inline-block"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.display",
								"id": 10
							}
						},
						{
							"id": 806,
							"name": "fixed",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Quick way of absolutely position to common places"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 89,
									"character": 7
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "fullscreen"
									},
									{
										"type": "stringLiteral",
										"value": "top"
									},
									{
										"type": "stringLiteral",
										"value": "top-left"
									},
									{
										"type": "stringLiteral",
										"value": "top-right"
									},
									{
										"type": "stringLiteral",
										"value": "bottom"
									},
									{
										"type": "stringLiteral",
										"value": "bottom-left"
									},
									{
										"type": "stringLiteral",
										"value": "bottom-right"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.fixed",
								"id": 11
							}
						},
						{
							"id": 807,
							"name": "height",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Fixed height applied through inline styling"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 98,
									"character": 8
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.height",
								"id": 12
							}
						},
						{
							"id": 808,
							"name": "margin",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Margins applied for the global spacing variables"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 100,
									"character": 8
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeSize",
								"id": 31
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.margin",
								"id": 13
							}
						},
						{
							"id": 809,
							"name": "maxWidth",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Max width applied through inline styling"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 102,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.maxWidth",
								"id": 14
							}
						},
						{
							"id": 810,
							"name": "minHeight",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Max height applied through inline styling"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 104,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.minHeight",
								"id": 15
							}
						},
						{
							"id": 811,
							"name": "minWidth",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Min width applied through inline style"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 106,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.minWidth",
								"id": 16
							}
						},
						{
							"id": 812,
							"name": "overflow",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Overflow"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 108,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "stringLiteral",
										"value": "hidden"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.overflow",
								"id": 17
							}
						},
						{
							"id": 813,
							"name": "padding",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Padding applied for the global spacing variables"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 110,
									"character": 9
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeSize",
								"id": 31
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.padding",
								"id": 18
							}
						},
						{
							"id": 814,
							"name": "paddingHorizontal",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Horizontal padding applied for the global spacing variables"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 112,
									"character": 19
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeSize",
								"id": 31
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.paddingHorizontal",
								"id": 19
							}
						},
						{
							"id": 815,
							"name": "paddingVertical",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Vertical pa?dding applied for the global spacing variables"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 114,
									"character": 17
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeSize",
								"id": 31
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.paddingVertical",
								"id": 20
							}
						},
						{
							"id": 816,
							"name": "scrollable",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies overflow styling to enable/disable scrolling."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 116,
									"character": 12
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.scrollable",
								"id": 21
							}
						},
						{
							"id": 817,
							"name": "tag",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Any valid HTML or SVG element tag.",
								"tags": [
									{
										"tag": "reference",
										"text": "false\n"
									}
								]
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 122,
									"character": 5
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeAllElementTags",
								"id": 34
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.tag",
								"id": 22
							}
						},
						{
							"id": 818,
							"name": "textColor",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Text colour to be applied."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 126,
									"character": 11
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeColor",
								"id": 30
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.textColor",
								"id": 23
							}
						},
						{
							"id": 819,
							"name": "theme",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Theme applied to this element and inherited for child elements (until\na descendant theme is applied)."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 131,
									"character": 7
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeTheme",
								"id": 35
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.theme",
								"id": 24
							}
						},
						{
							"id": 820,
							"name": "width",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Fixed width applied through inline styling"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 133,
									"character": 7
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.width",
								"id": 25
							}
						},
						{
							"id": 821,
							"name": "zIndex",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "z-index number for layering elements."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 135,
									"character": 8
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "number"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.zIndex",
								"id": 26
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								798,
								799,
								800,
								801,
								802,
								803,
								804,
								805,
								806,
								807,
								808,
								809,
								810,
								811,
								812,
								813,
								814,
								815,
								816,
								817,
								818,
								819,
								820,
								821
							]
						}
					],
					"sources": [
						{
							"fileName": "src/Form/Form.tsx",
							"line": 4,
							"character": 15
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"name": "BaseProps",
							"id": 2
						}
					]
				},
				{
					"id": 822,
					"name": "Form",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "src/Form/Form.tsx",
							"line": 6,
							"character": 10
						}
					],
					"type": {
						"type": "reference",
						"name": "ForwardRefExoticComponent",
						"typeArguments": [
							{
								"type": "intersection",
								"types": [
									{
										"type": "reference",
										"name": "Props",
										"id": 797
									},
									{
										"type": "reflection",
										"declaration": {
											"id": 823,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {}
										}
									},
									{
										"type": "reference",
										"name": "RefAttributes",
										"typeArguments": [
											{
												"type": "reference",
												"name": "HTMLFormElement"
											}
										]
									}
								]
							}
						]
					},
					"defaultValue": " React.forwardRef<HTMLFormElement, Attributes<HTMLFormElement, Props>>((props, ref) => {\n  return (\n    <Base { ...props } ref={ ref } tag=\"form\" />\n  );\n})"
				}
			],
			"groups": [
				{
					"title": "Interfaces",
					"kind": 256,
					"children": [
						797
					]
				},
				{
					"title": "Variables",
					"kind": 32,
					"children": [
						822
					]
				}
			],
			"sources": [
				{
					"fileName": "src/Form/Form.tsx",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 824,
			"name": "\"Grid/Grid\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "/Users/harry/Projects/personal/preshape/src/Grid/Grid.tsx",
			"children": [
				{
					"id": 825,
					"name": "GridProps",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"children": [
						{
							"id": 841,
							"name": "absolute",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Quick way of absolutely position to common places"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 58,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "fullscreen"
									},
									{
										"type": "stringLiteral",
										"value": "top"
									},
									{
										"type": "stringLiteral",
										"value": "top-left"
									},
									{
										"type": "stringLiteral",
										"value": "top-right"
									},
									{
										"type": "stringLiteral",
										"value": "bottom"
									},
									{
										"type": "stringLiteral",
										"value": "bottom-left"
									},
									{
										"type": "stringLiteral",
										"value": "bottom-right"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.absolute",
								"id": 3
							}
						},
						{
							"id": 826,
							"name": "alignChildren",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/Grid/Grid.tsx",
									"line": 8,
									"character": 15
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "start"
									},
									{
										"type": "stringLiteral",
										"value": "middle"
									},
									{
										"type": "stringLiteral",
										"value": "end"
									}
								]
							},
							"overwrites": {
								"type": "reference",
								"name": "FlexProps.alignChildren",
								"id": 240
							}
						},
						{
							"id": 833,
							"name": "alignChildrenHorizontal",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Horizontal alignment of children flex items."
							},
							"sources": [
								{
									"fileName": "src/Flex/Flex.tsx",
									"line": 13,
									"character": 25
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "start"
									},
									{
										"type": "stringLiteral",
										"value": "middle"
									},
									{
										"type": "stringLiteral",
										"value": "end"
									},
									{
										"type": "stringLiteral",
										"value": "around"
									},
									{
										"type": "stringLiteral",
										"value": "between"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "FlexProps.alignChildrenHorizontal",
								"id": 241
							}
						},
						{
							"id": 834,
							"name": "alignChildrenVertical",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Vertical alignment of children flex items."
							},
							"sources": [
								{
									"fileName": "src/Flex/Flex.tsx",
									"line": 15,
									"character": 23
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "start"
									},
									{
										"type": "stringLiteral",
										"value": "middle"
									},
									{
										"type": "stringLiteral",
										"value": "end"
									},
									{
										"type": "stringLiteral",
										"value": "around"
									},
									{
										"type": "stringLiteral",
										"value": "between"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "FlexProps.alignChildrenVertical",
								"id": 242
							}
						},
						{
							"id": 835,
							"name": "alignSelf",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Flex item alignment property (changes with parent direction)."
							},
							"sources": [
								{
									"fileName": "src/Flex/Flex.tsx",
									"line": 17,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "start"
									},
									{
										"type": "stringLiteral",
										"value": "middle"
									},
									{
										"type": "stringLiteral",
										"value": "end"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "FlexProps.alignSelf",
								"id": 243
							}
						},
						{
							"id": 827,
							"name": "autoFitWidthMax",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/Grid/Grid.tsx",
									"line": 9,
									"character": 17
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							}
						},
						{
							"id": 828,
							"name": "autoFitWidthMin",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/Grid/Grid.tsx",
									"line": 10,
									"character": 17
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							}
						},
						{
							"id": 842,
							"name": "backgroundColor",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Background colour to be applied, shades are taken from the current\ntheme."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 70,
									"character": 17
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeColor",
								"id": 30
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.backgroundColor",
								"id": 4
							}
						},
						{
							"id": 836,
							"name": "basis",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Initial width to flex from for a child item."
							},
							"sources": [
								{
									"fileName": "src/Flex/Flex.tsx",
									"line": 19,
									"character": 7
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "content"
									},
									{
										"type": "stringLiteral",
										"value": "container"
									},
									{
										"type": "stringLiteral",
										"value": "none"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "FlexProps.basis",
								"id": 244
							}
						},
						{
							"id": 843,
							"name": "borderColor",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Border colour to be applied, shades are taken from the current\ntheme."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 75,
									"character": 13
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeColor",
								"id": 30
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.borderColor",
								"id": 5
							}
						},
						{
							"id": 844,
							"name": "borderRadius",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Adds styling of a border radius to one of the size multiples."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 79,
									"character": 14
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "x1"
									},
									{
										"type": "stringLiteral",
										"value": "x2"
									},
									{
										"type": "stringLiteral",
										"value": "x3"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.borderRadius",
								"id": 6
							}
						},
						{
							"id": 845,
							"name": "borderSize",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Thickness of the border to be applied"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 81,
									"character": 12
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "x1"
									},
									{
										"type": "stringLiteral",
										"value": "x2"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.borderSize",
								"id": 7
							}
						},
						{
							"id": 829,
							"name": "className",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/Grid/Grid.tsx",
									"line": 11,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							}
						},
						{
							"id": 846,
							"name": "clickable",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Adds styling to indicate that the element is clickable"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 83,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.clickable",
								"id": 8
							}
						},
						{
							"id": 830,
							"name": "columnCount",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/Grid/Grid.tsx",
									"line": 12,
									"character": 13
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							}
						},
						{
							"id": 831,
							"name": "columnWidth",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/Grid/Grid.tsx",
									"line": 13,
									"character": 13
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							}
						},
						{
							"id": 847,
							"name": "container",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies relative positioning to contain child elements."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 85,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.container",
								"id": 9
							}
						},
						{
							"id": 837,
							"name": "direction",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Direction on which way to flex items."
							},
							"sources": [
								{
									"fileName": "src/Flex/Flex.tsx",
									"line": 21,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "horizontal"
									},
									{
										"type": "stringLiteral",
										"value": "vertical"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "FlexProps.direction",
								"id": 245
							}
						},
						{
							"id": 848,
							"name": "display",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies display styling"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 87,
									"character": 9
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "block"
									},
									{
										"type": "stringLiteral",
										"value": "inline-block"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.display",
								"id": 10
							}
						},
						{
							"id": 849,
							"name": "fixed",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Quick way of absolutely position to common places"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 89,
									"character": 7
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "fullscreen"
									},
									{
										"type": "stringLiteral",
										"value": "top"
									},
									{
										"type": "stringLiteral",
										"value": "top-left"
									},
									{
										"type": "stringLiteral",
										"value": "top-right"
									},
									{
										"type": "stringLiteral",
										"value": "bottom"
									},
									{
										"type": "stringLiteral",
										"value": "bottom-left"
									},
									{
										"type": "stringLiteral",
										"value": "bottom-right"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.fixed",
								"id": 11
							}
						},
						{
							"id": 832,
							"name": "gap",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/Grid/Grid.tsx",
									"line": 14,
									"character": 5
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeSize",
								"id": 31
							},
							"overwrites": {
								"type": "reference",
								"name": "FlexProps.gap",
								"id": 246
							}
						},
						{
							"id": 838,
							"name": "grow",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Flex item property if it should grow with available space."
							},
							"sources": [
								{
									"fileName": "src/Flex/Flex.tsx",
									"line": 25,
									"character": 6
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "FlexProps.grow",
								"id": 247
							}
						},
						{
							"id": 850,
							"name": "height",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Fixed height applied through inline styling"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 98,
									"character": 8
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.height",
								"id": 12
							}
						},
						{
							"id": 851,
							"name": "margin",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Margins applied for the global spacing variables"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 100,
									"character": 8
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeSize",
								"id": 31
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.margin",
								"id": 13
							}
						},
						{
							"id": 852,
							"name": "maxWidth",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Max width applied through inline styling"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 102,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.maxWidth",
								"id": 14
							}
						},
						{
							"id": 853,
							"name": "minHeight",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Max height applied through inline styling"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 104,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.minHeight",
								"id": 15
							}
						},
						{
							"id": 854,
							"name": "minWidth",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Min width applied through inline style"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 106,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.minWidth",
								"id": 16
							}
						},
						{
							"id": 855,
							"name": "overflow",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Overflow"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 108,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "stringLiteral",
										"value": "hidden"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.overflow",
								"id": 17
							}
						},
						{
							"id": 856,
							"name": "padding",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Padding applied for the global spacing variables"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 110,
									"character": 9
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeSize",
								"id": 31
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.padding",
								"id": 18
							}
						},
						{
							"id": 857,
							"name": "paddingHorizontal",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Horizontal padding applied for the global spacing variables"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 112,
									"character": 19
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeSize",
								"id": 31
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.paddingHorizontal",
								"id": 19
							}
						},
						{
							"id": 858,
							"name": "paddingVertical",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Vertical pa?dding applied for the global spacing variables"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 114,
									"character": 17
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeSize",
								"id": 31
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.paddingVertical",
								"id": 20
							}
						},
						{
							"id": 859,
							"name": "scrollable",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies overflow styling to enable/disable scrolling."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 116,
									"character": 12
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.scrollable",
								"id": 21
							}
						},
						{
							"id": 839,
							"name": "shrink",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Flex item property if it should shrink."
							},
							"sources": [
								{
									"fileName": "src/Flex/Flex.tsx",
									"line": 27,
									"character": 8
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "FlexProps.shrink",
								"id": 248
							}
						},
						{
							"id": 860,
							"name": "tag",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Any valid HTML or SVG element tag.",
								"tags": [
									{
										"tag": "reference",
										"text": "false\n"
									}
								]
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 122,
									"character": 5
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeAllElementTags",
								"id": 34
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.tag",
								"id": 22
							}
						},
						{
							"id": 861,
							"name": "textColor",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Text colour to be applied."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 126,
									"character": 11
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeColor",
								"id": 30
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.textColor",
								"id": 23
							}
						},
						{
							"id": 862,
							"name": "theme",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Theme applied to this element and inherited for child elements (until\na descendant theme is applied)."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 131,
									"character": 7
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeTheme",
								"id": 35
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.theme",
								"id": 24
							}
						},
						{
							"id": 863,
							"name": "width",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Fixed width applied through inline styling"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 133,
									"character": 7
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.width",
								"id": 25
							}
						},
						{
							"id": 840,
							"name": "wrap",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Flag to allow flex items to wrap over to new lines"
							},
							"sources": [
								{
									"fileName": "src/Flex/Flex.tsx",
									"line": 29,
									"character": 6
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "FlexProps.wrap",
								"id": 249
							}
						},
						{
							"id": 864,
							"name": "zIndex",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "z-index number for layering elements."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 135,
									"character": 8
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "number"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.zIndex",
								"id": 26
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								841,
								826,
								833,
								834,
								835,
								827,
								828,
								842,
								836,
								843,
								844,
								845,
								829,
								846,
								830,
								831,
								847,
								837,
								848,
								849,
								832,
								838,
								850,
								851,
								852,
								853,
								854,
								855,
								856,
								857,
								858,
								859,
								839,
								860,
								861,
								862,
								863,
								840,
								864
							]
						}
					],
					"sources": [
						{
							"fileName": "src/Grid/Grid.tsx",
							"line": 7,
							"character": 26
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"name": "FlexProps",
							"id": 239
						}
					]
				},
				{
					"id": 865,
					"name": "Grid",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "src/Grid/Grid.tsx",
							"line": 17,
							"character": 10
						}
					],
					"type": {
						"type": "reference",
						"name": "ForwardRefExoticComponent",
						"typeArguments": [
							{
								"type": "intersection",
								"types": [
									{
										"type": "reference",
										"name": "GridProps",
										"id": 825
									},
									{
										"type": "reflection",
										"declaration": {
											"id": 866,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {}
										}
									},
									{
										"type": "reference",
										"name": "RefAttributes",
										"typeArguments": [
											{
												"type": "reference",
												"name": "HTMLElement"
											}
										]
									}
								]
							}
						]
					},
					"defaultValue": " React.forwardRef<HTMLElement, Attributes<HTMLElement, GridProps>>((props, ref) => {\n  const {\n    alignChildren,\n    autoFitWidthMax,\n    autoFitWidthMin,\n    className,\n    columnCount,\n    columnWidth,\n    gap,\n    ...rest\n  } = props;\n\n  const classes = classnames('Grid', {\n    [`Grid--align-${alignChildren}`]: alignChildren,\n    [`Grid--gap-${gap}`]: gap,\n  }, className);\n\n  const style = {\n    gridTemplateColumns:\n      (columnCount && `repeat(${columnCount}, ${columnWidth || 'max-content'})`) ||\n      ((autoFitWidthMin && `repeat(auto-fit, minmax(${autoFitWidthMin}, ${autoFitWidthMax || '1fr'})`) || undefined),\n  };\n\n  return (\n    <Flex { ...rest } className={ classes } ref={ ref } style={ style } />\n  );\n})"
				}
			],
			"groups": [
				{
					"title": "Interfaces",
					"kind": 256,
					"children": [
						825
					]
				},
				{
					"title": "Variables",
					"kind": 32,
					"children": [
						865
					]
				}
			],
			"sources": [
				{
					"fileName": "src/Grid/Grid.tsx",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 867,
			"name": "\"Grid/GridItem\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "/Users/harry/Projects/personal/preshape/src/Grid/GridItem.tsx",
			"children": [
				{
					"id": 868,
					"name": "GridItemProps",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"children": [
						{
							"id": 881,
							"name": "absolute",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Quick way of absolutely position to common places"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 58,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "fullscreen"
									},
									{
										"type": "stringLiteral",
										"value": "top"
									},
									{
										"type": "stringLiteral",
										"value": "top-left"
									},
									{
										"type": "stringLiteral",
										"value": "top-right"
									},
									{
										"type": "stringLiteral",
										"value": "bottom"
									},
									{
										"type": "stringLiteral",
										"value": "bottom-left"
									},
									{
										"type": "stringLiteral",
										"value": "bottom-right"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.absolute",
								"id": 3
							}
						},
						{
							"id": 871,
							"name": "alignChildren",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Short cut child alignment property for both alignChildrenHorizontal and\nalignChildrenVertical."
							},
							"sources": [
								{
									"fileName": "src/Flex/Flex.tsx",
									"line": 11,
									"character": 15
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "start"
									},
									{
										"type": "stringLiteral",
										"value": "middle"
									},
									{
										"type": "stringLiteral",
										"value": "end"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "FlexProps.alignChildren",
								"id": 240
							}
						},
						{
							"id": 872,
							"name": "alignChildrenHorizontal",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Horizontal alignment of children flex items."
							},
							"sources": [
								{
									"fileName": "src/Flex/Flex.tsx",
									"line": 13,
									"character": 25
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "start"
									},
									{
										"type": "stringLiteral",
										"value": "middle"
									},
									{
										"type": "stringLiteral",
										"value": "end"
									},
									{
										"type": "stringLiteral",
										"value": "around"
									},
									{
										"type": "stringLiteral",
										"value": "between"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "FlexProps.alignChildrenHorizontal",
								"id": 241
							}
						},
						{
							"id": 873,
							"name": "alignChildrenVertical",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Vertical alignment of children flex items."
							},
							"sources": [
								{
									"fileName": "src/Flex/Flex.tsx",
									"line": 15,
									"character": 23
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "start"
									},
									{
										"type": "stringLiteral",
										"value": "middle"
									},
									{
										"type": "stringLiteral",
										"value": "end"
									},
									{
										"type": "stringLiteral",
										"value": "around"
									},
									{
										"type": "stringLiteral",
										"value": "between"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "FlexProps.alignChildrenVertical",
								"id": 242
							}
						},
						{
							"id": 874,
							"name": "alignSelf",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Flex item alignment property (changes with parent direction)."
							},
							"sources": [
								{
									"fileName": "src/Flex/Flex.tsx",
									"line": 17,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "start"
									},
									{
										"type": "stringLiteral",
										"value": "middle"
									},
									{
										"type": "stringLiteral",
										"value": "end"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "FlexProps.alignSelf",
								"id": 243
							}
						},
						{
							"id": 882,
							"name": "backgroundColor",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Background colour to be applied, shades are taken from the current\ntheme."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 70,
									"character": 17
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeColor",
								"id": 30
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.backgroundColor",
								"id": 4
							}
						},
						{
							"id": 875,
							"name": "basis",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Initial width to flex from for a child item."
							},
							"sources": [
								{
									"fileName": "src/Flex/Flex.tsx",
									"line": 19,
									"character": 7
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "content"
									},
									{
										"type": "stringLiteral",
										"value": "container"
									},
									{
										"type": "stringLiteral",
										"value": "none"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "FlexProps.basis",
								"id": 244
							}
						},
						{
							"id": 883,
							"name": "borderColor",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Border colour to be applied, shades are taken from the current\ntheme."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 75,
									"character": 13
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeColor",
								"id": 30
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.borderColor",
								"id": 5
							}
						},
						{
							"id": 884,
							"name": "borderRadius",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Adds styling of a border radius to one of the size multiples."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 79,
									"character": 14
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "x1"
									},
									{
										"type": "stringLiteral",
										"value": "x2"
									},
									{
										"type": "stringLiteral",
										"value": "x3"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.borderRadius",
								"id": 6
							}
						},
						{
							"id": 885,
							"name": "borderSize",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Thickness of the border to be applied"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 81,
									"character": 12
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "x1"
									},
									{
										"type": "stringLiteral",
										"value": "x2"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.borderSize",
								"id": 7
							}
						},
						{
							"id": 886,
							"name": "clickable",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Adds styling to indicate that the element is clickable"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 83,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.clickable",
								"id": 8
							}
						},
						{
							"id": 869,
							"name": "column",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Specifies a specific column this item should be in."
							},
							"sources": [
								{
									"fileName": "src/Grid/GridItem.tsx",
									"line": 7,
									"character": 8
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "number"
									}
								]
							}
						},
						{
							"id": 887,
							"name": "container",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies relative positioning to contain child elements."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 85,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.container",
								"id": 9
							}
						},
						{
							"id": 876,
							"name": "direction",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Direction on which way to flex items."
							},
							"sources": [
								{
									"fileName": "src/Flex/Flex.tsx",
									"line": 21,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "horizontal"
									},
									{
										"type": "stringLiteral",
										"value": "vertical"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "FlexProps.direction",
								"id": 245
							}
						},
						{
							"id": 888,
							"name": "display",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies display styling"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 87,
									"character": 9
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "block"
									},
									{
										"type": "stringLiteral",
										"value": "inline-block"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.display",
								"id": 10
							}
						},
						{
							"id": 889,
							"name": "fixed",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Quick way of absolutely position to common places"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 89,
									"character": 7
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "fullscreen"
									},
									{
										"type": "stringLiteral",
										"value": "top"
									},
									{
										"type": "stringLiteral",
										"value": "top-left"
									},
									{
										"type": "stringLiteral",
										"value": "top-right"
									},
									{
										"type": "stringLiteral",
										"value": "bottom"
									},
									{
										"type": "stringLiteral",
										"value": "bottom-left"
									},
									{
										"type": "stringLiteral",
										"value": "bottom-right"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.fixed",
								"id": 11
							}
						},
						{
							"id": 877,
							"name": "gap",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Spacing applied between child flex items, values are global spacing variables."
							},
							"sources": [
								{
									"fileName": "src/Flex/Flex.tsx",
									"line": 23,
									"character": 5
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeSize",
								"id": 31
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "FlexProps.gap",
								"id": 246
							}
						},
						{
							"id": 878,
							"name": "grow",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Flex item property if it should grow with available space."
							},
							"sources": [
								{
									"fileName": "src/Flex/Flex.tsx",
									"line": 25,
									"character": 6
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "FlexProps.grow",
								"id": 247
							}
						},
						{
							"id": 890,
							"name": "height",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Fixed height applied through inline styling"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 98,
									"character": 8
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.height",
								"id": 12
							}
						},
						{
							"id": 891,
							"name": "margin",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Margins applied for the global spacing variables"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 100,
									"character": 8
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeSize",
								"id": 31
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.margin",
								"id": 13
							}
						},
						{
							"id": 892,
							"name": "maxWidth",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Max width applied through inline styling"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 102,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.maxWidth",
								"id": 14
							}
						},
						{
							"id": 893,
							"name": "minHeight",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Max height applied through inline styling"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 104,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.minHeight",
								"id": 15
							}
						},
						{
							"id": 894,
							"name": "minWidth",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Min width applied through inline style"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 106,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.minWidth",
								"id": 16
							}
						},
						{
							"id": 895,
							"name": "overflow",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Overflow"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 108,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "stringLiteral",
										"value": "hidden"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.overflow",
								"id": 17
							}
						},
						{
							"id": 896,
							"name": "padding",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Padding applied for the global spacing variables"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 110,
									"character": 9
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeSize",
								"id": 31
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.padding",
								"id": 18
							}
						},
						{
							"id": 897,
							"name": "paddingHorizontal",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Horizontal padding applied for the global spacing variables"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 112,
									"character": 19
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeSize",
								"id": 31
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.paddingHorizontal",
								"id": 19
							}
						},
						{
							"id": 898,
							"name": "paddingVertical",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Vertical pa?dding applied for the global spacing variables"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 114,
									"character": 17
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeSize",
								"id": 31
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.paddingVertical",
								"id": 20
							}
						},
						{
							"id": 870,
							"name": "row",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Specifies a specific row this item should be in."
							},
							"sources": [
								{
									"fileName": "src/Grid/GridItem.tsx",
									"line": 9,
									"character": 5
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "number"
									}
								]
							}
						},
						{
							"id": 899,
							"name": "scrollable",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies overflow styling to enable/disable scrolling."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 116,
									"character": 12
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.scrollable",
								"id": 21
							}
						},
						{
							"id": 879,
							"name": "shrink",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Flex item property if it should shrink."
							},
							"sources": [
								{
									"fileName": "src/Flex/Flex.tsx",
									"line": 27,
									"character": 8
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "FlexProps.shrink",
								"id": 248
							}
						},
						{
							"id": 900,
							"name": "tag",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Any valid HTML or SVG element tag.",
								"tags": [
									{
										"tag": "reference",
										"text": "false\n"
									}
								]
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 122,
									"character": 5
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeAllElementTags",
								"id": 34
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.tag",
								"id": 22
							}
						},
						{
							"id": 901,
							"name": "textColor",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Text colour to be applied."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 126,
									"character": 11
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeColor",
								"id": 30
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.textColor",
								"id": 23
							}
						},
						{
							"id": 902,
							"name": "theme",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Theme applied to this element and inherited for child elements (until\na descendant theme is applied)."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 131,
									"character": 7
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeTheme",
								"id": 35
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.theme",
								"id": 24
							}
						},
						{
							"id": 903,
							"name": "width",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Fixed width applied through inline styling"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 133,
									"character": 7
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.width",
								"id": 25
							}
						},
						{
							"id": 880,
							"name": "wrap",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Flag to allow flex items to wrap over to new lines"
							},
							"sources": [
								{
									"fileName": "src/Flex/Flex.tsx",
									"line": 29,
									"character": 6
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "FlexProps.wrap",
								"id": 249
							}
						},
						{
							"id": 904,
							"name": "zIndex",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "z-index number for layering elements."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 135,
									"character": 8
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "number"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.zIndex",
								"id": 26
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								881,
								871,
								872,
								873,
								874,
								882,
								875,
								883,
								884,
								885,
								886,
								869,
								887,
								876,
								888,
								889,
								877,
								878,
								890,
								891,
								892,
								893,
								894,
								895,
								896,
								897,
								898,
								870,
								899,
								879,
								900,
								901,
								902,
								903,
								880,
								904
							]
						}
					],
					"sources": [
						{
							"fileName": "src/Grid/GridItem.tsx",
							"line": 5,
							"character": 30
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"name": "FlexProps",
							"id": 239
						}
					]
				},
				{
					"id": 905,
					"name": "GridItem",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "src/Grid/GridItem.tsx",
							"line": 12,
							"character": 14
						}
					],
					"type": {
						"type": "reference",
						"name": "ForwardRefExoticComponent",
						"typeArguments": [
							{
								"type": "intersection",
								"types": [
									{
										"type": "reference",
										"name": "GridItemProps",
										"id": 868
									},
									{
										"type": "reflection",
										"declaration": {
											"id": 906,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {}
										}
									},
									{
										"type": "reference",
										"name": "RefAttributes",
										"typeArguments": [
											{
												"type": "reference",
												"name": "HTMLElement"
											}
										]
									}
								]
							}
						]
					},
					"defaultValue": " React.forwardRef<HTMLElement, Attributes<HTMLElement, GridItemProps>>((props, ref) => {\n  const {\n    column,\n    row,\n    ...rest\n  } = props;\n\n  const style = {\n    gridColumn: column,\n    gridRow: row,\n  };\n\n  return (\n    <Flex { ...rest } className=\"GridItem\" ref={ ref } style={ style } />\n  );\n})"
				}
			],
			"groups": [
				{
					"title": "Interfaces",
					"kind": 256,
					"children": [
						868
					]
				},
				{
					"title": "Variables",
					"kind": 32,
					"children": [
						905
					]
				}
			],
			"sources": [
				{
					"fileName": "src/Grid/GridItem.tsx",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 907,
			"name": "\"Icon/Icon\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "/Users/harry/Projects/personal/preshape/src/Icon/Icon.tsx",
			"children": [
				{
					"id": 908,
					"name": "IconProps",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"children": [
						{
							"id": 912,
							"name": "absolute",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Quick way of absolutely position to common places"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 58,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "fullscreen"
									},
									{
										"type": "stringLiteral",
										"value": "top"
									},
									{
										"type": "stringLiteral",
										"value": "top-left"
									},
									{
										"type": "stringLiteral",
										"value": "top-right"
									},
									{
										"type": "stringLiteral",
										"value": "bottom"
									},
									{
										"type": "stringLiteral",
										"value": "bottom-left"
									},
									{
										"type": "stringLiteral",
										"value": "bottom-right"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.absolute",
								"id": 3
							}
						},
						{
							"id": 913,
							"name": "backgroundColor",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Background colour to be applied, shades are taken from the current\ntheme."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 70,
									"character": 17
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeColor",
								"id": 30
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.backgroundColor",
								"id": 4
							}
						},
						{
							"id": 914,
							"name": "borderColor",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Border colour to be applied, shades are taken from the current\ntheme."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 75,
									"character": 13
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeColor",
								"id": 30
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.borderColor",
								"id": 5
							}
						},
						{
							"id": 915,
							"name": "borderRadius",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Adds styling of a border radius to one of the size multiples."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 79,
									"character": 14
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "x1"
									},
									{
										"type": "stringLiteral",
										"value": "x2"
									},
									{
										"type": "stringLiteral",
										"value": "x3"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.borderRadius",
								"id": 6
							}
						},
						{
							"id": 916,
							"name": "borderSize",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Thickness of the border to be applied"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 81,
									"character": 12
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "x1"
									},
									{
										"type": "stringLiteral",
										"value": "x2"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.borderSize",
								"id": 7
							}
						},
						{
							"id": 917,
							"name": "clickable",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Adds styling to indicate that the element is clickable"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 83,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.clickable",
								"id": 8
							}
						},
						{
							"id": 918,
							"name": "container",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies relative positioning to contain child elements."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 85,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.container",
								"id": 9
							}
						},
						{
							"id": 919,
							"name": "display",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies display styling"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 87,
									"character": 9
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "block"
									},
									{
										"type": "stringLiteral",
										"value": "inline-block"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.display",
								"id": 10
							}
						},
						{
							"id": 920,
							"name": "fixed",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Quick way of absolutely position to common places"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 89,
									"character": 7
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "fullscreen"
									},
									{
										"type": "stringLiteral",
										"value": "top"
									},
									{
										"type": "stringLiteral",
										"value": "top-left"
									},
									{
										"type": "stringLiteral",
										"value": "top-right"
									},
									{
										"type": "stringLiteral",
										"value": "bottom"
									},
									{
										"type": "stringLiteral",
										"value": "bottom-left"
									},
									{
										"type": "stringLiteral",
										"value": "bottom-right"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.fixed",
								"id": 11
							}
						},
						{
							"id": 921,
							"name": "height",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Fixed height applied through inline styling"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 98,
									"character": 8
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.height",
								"id": 12
							}
						},
						{
							"id": 922,
							"name": "margin",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Margins applied for the global spacing variables"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 100,
									"character": 8
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeSize",
								"id": 31
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.margin",
								"id": 13
							}
						},
						{
							"id": 923,
							"name": "maxWidth",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Max width applied through inline styling"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 102,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.maxWidth",
								"id": 14
							}
						},
						{
							"id": 924,
							"name": "minHeight",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Max height applied through inline styling"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 104,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.minHeight",
								"id": 15
							}
						},
						{
							"id": 925,
							"name": "minWidth",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Min width applied through inline style"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 106,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.minWidth",
								"id": 16
							}
						},
						{
							"id": 909,
							"name": "name",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Name of the icon to be displayed"
							},
							"sources": [
								{
									"fileName": "src/Icon/Icon.tsx",
									"line": 205,
									"character": 6
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeIcon",
								"id": 936
							}
						},
						{
							"id": 926,
							"name": "overflow",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Overflow"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 108,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "stringLiteral",
										"value": "hidden"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.overflow",
								"id": 17
							}
						},
						{
							"id": 927,
							"name": "padding",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Padding applied for the global spacing variables"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 110,
									"character": 9
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeSize",
								"id": 31
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.padding",
								"id": 18
							}
						},
						{
							"id": 928,
							"name": "paddingHorizontal",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Horizontal padding applied for the global spacing variables"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 112,
									"character": 19
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeSize",
								"id": 31
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.paddingHorizontal",
								"id": 19
							}
						},
						{
							"id": 929,
							"name": "paddingVertical",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Vertical pa?dding applied for the global spacing variables"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 114,
									"character": 17
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeSize",
								"id": 31
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.paddingVertical",
								"id": 20
							}
						},
						{
							"id": 930,
							"name": "scrollable",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies overflow styling to enable/disable scrolling."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 116,
									"character": 12
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.scrollable",
								"id": 21
							}
						},
						{
							"id": 910,
							"name": "size",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Size to be used for with and height of the icon"
							},
							"sources": [
								{
									"fileName": "src/Icon/Icon.tsx",
									"line": 207,
									"character": 6
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 911,
							"name": "spin",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Spins the Icon, by the given speed reference."
							},
							"sources": [
								{
									"fileName": "src/Icon/Icon.tsx",
									"line": 209,
									"character": 6
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "slow"
									},
									{
										"type": "stringLiteral",
										"value": "base"
									},
									{
										"type": "stringLiteral",
										"value": "fast"
									}
								]
							}
						},
						{
							"id": 931,
							"name": "tag",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Any valid HTML or SVG element tag.",
								"tags": [
									{
										"tag": "reference",
										"text": "false\n"
									}
								]
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 122,
									"character": 5
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeAllElementTags",
								"id": 34
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.tag",
								"id": 22
							}
						},
						{
							"id": 932,
							"name": "textColor",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Text colour to be applied."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 126,
									"character": 11
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeColor",
								"id": 30
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.textColor",
								"id": 23
							}
						},
						{
							"id": 933,
							"name": "theme",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Theme applied to this element and inherited for child elements (until\na descendant theme is applied)."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 131,
									"character": 7
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeTheme",
								"id": 35
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.theme",
								"id": 24
							}
						},
						{
							"id": 934,
							"name": "width",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Fixed width applied through inline styling"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 133,
									"character": 7
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.width",
								"id": 25
							}
						},
						{
							"id": 935,
							"name": "zIndex",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "z-index number for layering elements."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 135,
									"character": 8
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "number"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.zIndex",
								"id": 26
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								912,
								913,
								914,
								915,
								916,
								917,
								918,
								919,
								920,
								921,
								922,
								923,
								924,
								925,
								909,
								926,
								927,
								928,
								929,
								930,
								910,
								911,
								931,
								932,
								933,
								934,
								935
							]
						}
					],
					"sources": [
						{
							"fileName": "src/Icon/Icon.tsx",
							"line": 203,
							"character": 26
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"name": "BaseProps",
							"id": 2
						}
					]
				},
				{
					"id": 936,
					"name": "TypeIcon",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {
						"isExported": true
					},
					"sources": [
						{
							"fileName": "src/Icon/Icon.tsx",
							"line": 6,
							"character": 20
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "stringLiteral",
								"value": "Backward"
							},
							{
								"type": "stringLiteral",
								"value": "Beginning"
							},
							{
								"type": "stringLiteral",
								"value": "Book"
							},
							{
								"type": "stringLiteral",
								"value": "ChevronLeft"
							},
							{
								"type": "stringLiteral",
								"value": "ChevronRight"
							},
							{
								"type": "stringLiteral",
								"value": "Circle"
							},
							{
								"type": "stringLiteral",
								"value": "Code"
							},
							{
								"type": "stringLiteral",
								"value": "Cog"
							},
							{
								"type": "stringLiteral",
								"value": "Copy"
							},
							{
								"type": "stringLiteral",
								"value": "Cross"
							},
							{
								"type": "stringLiteral",
								"value": "Delete"
							},
							{
								"type": "stringLiteral",
								"value": "End"
							},
							{
								"type": "stringLiteral",
								"value": "Error"
							},
							{
								"type": "stringLiteral",
								"value": "ExternalLink"
							},
							{
								"type": "stringLiteral",
								"value": "Eye"
							},
							{
								"type": "stringLiteral",
								"value": "Forward"
							},
							{
								"type": "stringLiteral",
								"value": "Github"
							},
							{
								"type": "stringLiteral",
								"value": "File"
							},
							{
								"type": "stringLiteral",
								"value": "Info"
							},
							{
								"type": "stringLiteral",
								"value": "Letter"
							},
							{
								"type": "stringLiteral",
								"value": "Maximize"
							},
							{
								"type": "stringLiteral",
								"value": "Menu"
							},
							{
								"type": "stringLiteral",
								"value": "Minimize"
							},
							{
								"type": "stringLiteral",
								"value": "Moon"
							},
							{
								"type": "stringLiteral",
								"value": "Pause"
							},
							{
								"type": "stringLiteral",
								"value": "Pencil"
							},
							{
								"type": "stringLiteral",
								"value": "Play"
							},
							{
								"type": "stringLiteral",
								"value": "Progress"
							},
							{
								"type": "stringLiteral",
								"value": "QuestionMark"
							},
							{
								"type": "stringLiteral",
								"value": "Redo"
							},
							{
								"type": "stringLiteral",
								"value": "Refresh"
							},
							{
								"type": "stringLiteral",
								"value": "Save"
							},
							{
								"type": "stringLiteral",
								"value": "Square"
							},
							{
								"type": "stringLiteral",
								"value": "Star"
							},
							{
								"type": "stringLiteral",
								"value": "Sun"
							},
							{
								"type": "stringLiteral",
								"value": "Twitter"
							},
							{
								"type": "stringLiteral",
								"value": "Undo"
							},
							{
								"type": "stringLiteral",
								"value": "Water"
							}
						]
					}
				},
				{
					"id": 976,
					"name": "Icon",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "src/Icon/Icon.tsx",
							"line": 212,
							"character": 10
						}
					],
					"type": {
						"type": "reference",
						"name": "ForwardRefExoticComponent",
						"typeArguments": [
							{
								"type": "intersection",
								"types": [
									{
										"type": "reference",
										"name": "IconProps",
										"id": 908
									},
									{
										"type": "reflection",
										"declaration": {
											"id": 977,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {}
										}
									},
									{
										"type": "reference",
										"name": "RefAttributes",
										"typeArguments": [
											{
												"type": "reference",
												"name": "SVGSVGElement"
											}
										]
									}
								]
							}
						]
					},
					"defaultValue": " React.forwardRef<SVGSVGElement, Attributes<SVGSVGElement, IconProps>>((props, ref) => {\n  const { name, size, spin, ...rest } = props;\n  const classes = classnames('Icon', {\n    [`Icon--spin-${spin}`]: spin,\n  });\n\n  if (!IconPathMap[name]) {\n    return null;\n  }\n\n  return (\n    <Base { ...rest }\n        className={ classes }\n        height={ size }\n        ref={ ref }\n        tag=\"svg\"\n        viewBox=\"0 0 1024 1024\"\n        width={ size }>\n      { IconPathMap[name].map((d, i) => <path d={ d } key={ i } />) }\n    </Base>\n  );\n})"
				},
				{
					"id": 937,
					"name": "IconPathMap",
					"kind": 2097152,
					"kindString": "Object literal",
					"flags": {
						"isConst": true
					},
					"children": [
						{
							"id": 938,
							"name": "Backward",
							"kind": 32,
							"kindString": "Variable",
							"flags": {},
							"sources": [
								{
									"fileName": "src/Icon/Icon.tsx",
									"line": 47,
									"character": 12
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "string"
								}
							},
							"defaultValue": " [\n    'M486.4 174.933c-12.8-8.533-34.133-4.267-46.933 4.267l-384 298.667c-8.533 8.533-12.8 21.333-12.8 34.133s4.267 25.6 17.067 34.133l384 298.667c8.533 4.267 17.067 8.533 25.6 8.533 4.267 0 12.8 0 17.067-4.267 12.8-8.533 25.6-21.333 25.6-38.4v-597.333c0-17.067-8.533-29.867-25.6-38.4zM426.667 725.333l-273.067-213.333 273.067-213.333v426.667z',\n    'M955.733 174.933c-12.8-8.533-34.133-4.267-46.933 4.267l-384 298.667c-8.533 8.533-12.8 21.333-12.8 34.133s4.267 25.6 17.067 34.133l384 298.667c8.533 4.267 17.067 8.533 25.6 8.533 4.267 0 12.8 0 17.067-4.267 12.8-8.533 25.6-21.333 25.6-38.4v-597.333c0-17.067-8.533-29.867-25.6-38.4zM896 725.333l-273.067-213.333 273.067-213.333v426.667z',\n  ]"
						},
						{
							"id": 939,
							"name": "Beginning",
							"kind": 32,
							"kindString": "Variable",
							"flags": {},
							"sources": [
								{
									"fileName": "src/Icon/Icon.tsx",
									"line": 51,
									"character": 13
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "string"
								}
							},
							"defaultValue": " [\n    'M827.733 132.267c-12.8-8.533-34.133-4.267-46.933 4.267l-426.667 341.333c-8.533 8.533-12.8 21.333-12.8 34.133s4.267 25.6 17.067 34.133l426.667 341.333c8.533 4.267 17.067 8.533 25.6 8.533 4.267 0 12.8 0 17.067-4.267 12.8-8.533 25.6-21.333 25.6-38.4v-682.667c0-17.067-8.533-29.867-25.6-38.4zM768 763.733l-315.733-251.733 315.733-251.733v503.467z',\n    'M213.333 170.667c-25.6 0-42.667 17.067-42.667 42.667v597.333c0 25.6 17.067 42.667 42.667 42.667s42.667-17.067 42.667-42.667v-597.333c0-25.6-17.067-42.667-42.667-42.667z',\n  ]"
						},
						{
							"id": 940,
							"name": "Book",
							"kind": 32,
							"kindString": "Variable",
							"flags": {},
							"sources": [
								{
									"fileName": "src/Icon/Icon.tsx",
									"line": 55,
									"character": 8
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "string"
								}
							},
							"defaultValue": " [\n    'M853.333 42.667h-576c-81.067 0-149.333 68.267-149.333 149.333v640c0 81.067 68.267 149.333 149.333 149.333h576c25.6 0 42.667-17.067 42.667-42.667v-853.333c0-25.6-17.067-42.667-42.667-42.667zM277.333 128h533.333v554.667h-533.333c-21.333 0-42.667 4.267-64 17.067v-507.733c0-34.133 29.867-64 64-64zM277.333 896c-34.133 0-64-29.867-64-64s29.867-64 64-64h533.333v128h-533.333z',\n  ]"
						},
						{
							"id": 941,
							"name": "ChevronLeft",
							"kind": 32,
							"kindString": "Variable",
							"flags": {},
							"sources": [
								{
									"fileName": "src/Icon/Icon.tsx",
									"line": 58,
									"character": 15
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "string"
								}
							},
							"defaultValue": " [\n    'M443.733 512l226.133-226.133c17.067-17.067 17.067-42.667 0-59.733s-42.667-17.067-59.733 0l-256 256c-17.067 17.067-17.067 42.667 0 59.733l256 256c8.533 8.533 21.333 12.8 29.867 12.8s21.333-4.267 29.867-12.8c17.067-17.067 17.067-42.667 0-59.733l-226.133-226.133z',\n  ]"
						},
						{
							"id": 942,
							"name": "ChevronRight",
							"kind": 32,
							"kindString": "Variable",
							"flags": {},
							"sources": [
								{
									"fileName": "src/Icon/Icon.tsx",
									"line": 61,
									"character": 16
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "string"
								}
							},
							"defaultValue": " [\n    'M669.867 482.133l-256-256c-17.067-17.067-42.667-17.067-59.733 0s-17.067 42.667 0 59.733l226.133 226.133-226.133 226.133c-17.067 17.067-17.067 42.667 0 59.733 8.533 8.533 17.067 12.8 29.867 12.8s21.333-4.267 29.867-12.8l256-256c17.067-17.067 17.067-42.667 0-59.733z',\n  ]"
						},
						{
							"id": 943,
							"name": "Circle",
							"kind": 32,
							"kindString": "Variable",
							"flags": {},
							"sources": [
								{
									"fileName": "src/Icon/Icon.tsx",
									"line": 64,
									"character": 10
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "string"
								}
							},
							"defaultValue": " [\n    'M512 42.667c-260.267 0-469.333 209.067-469.333 469.333s209.067 469.333 469.333 469.333 469.333-209.067 469.333-469.333-209.067-469.333-469.333-469.333zM512 896c-213.333 0-384-170.667-384-384s170.667-384 384-384c213.333 0 384 170.667 384 384s-170.667 384-384 384z',\n  ]"
						},
						{
							"id": 944,
							"name": "Code",
							"kind": 32,
							"kindString": "Variable",
							"flags": {},
							"sources": [
								{
									"fileName": "src/Icon/Icon.tsx",
									"line": 67,
									"character": 8
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "string"
								}
							},
							"defaultValue": " [\n    'M968.533 482.133l-256-256c-17.067-17.067-42.667-17.067-59.733 0s-17.067 42.667 0 59.733l226.133 226.133-226.133 226.133c-17.067 17.067-17.067 42.667 0 59.733 8.533 8.533 21.333 12.8 29.867 12.8s21.333-4.267 29.867-12.8l256-256c17.067-17.067 17.067-42.667 0-59.733z',\n    'M371.2 226.133c-17.067-17.067-42.667-17.067-59.733 0l-256 256c-17.067 17.067-17.067 42.667 0 59.733l256 256c8.533 8.533 17.067 12.8 29.867 12.8s21.333-4.267 29.867-12.8c17.067-17.067 17.067-42.667 0-59.733l-226.133-226.133 226.133-226.133c17.067-17.067 17.067-42.667 0-59.733z',\n  ]"
						},
						{
							"id": 945,
							"name": "Cog",
							"kind": 32,
							"kindString": "Variable",
							"flags": {},
							"sources": [
								{
									"fileName": "src/Icon/Icon.tsx",
									"line": 71,
									"character": 7
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "string"
								}
							},
							"defaultValue": " [\n    'M512 341.333c-93.867 0-170.667 76.8-170.667 170.667s76.8 170.667 170.667 170.667c93.867 0 170.667-76.8 170.667-170.667s-76.8-170.667-170.667-170.667zM512 597.333c-46.933 0-85.333-38.4-85.333-85.333s38.4-85.333 85.333-85.333c46.933 0 85.333 38.4 85.333 85.333s-38.4 85.333-85.333 85.333z',\n    'M866.133 657.067c4.267-8.533 12.8-17.067 29.867-17.067 72.533 0 128-55.467 128-128s-55.467-128-128-128h-8.533c-8.533 0-17.067-4.267-21.333-12.8 0-4.267 0-4.267-4.267-8.533-4.267-8.533-4.267-21.333 8.533-34.133 51.2-51.2 51.2-132.267 0-179.2v0c0 0 0 0 0 0-25.6-25.6-55.467-38.4-89.6-38.4 0 0 0 0 0 0-34.133 0-68.267 12.8-93.867 38.4-8.533 8.533-21.333 8.533-29.867 4.267-8.533 0-17.067-12.8-17.067-25.6 0-72.533-55.467-128-128-128s-128 55.467-128 128v8.533c0 8.533-4.267 17.067-12.8 21.333-4.267 0-4.267 0-8.533 4.267-8.533 4.267-21.333 0-34.133-8.533-51.2-51.2-132.267-51.2-179.2 0-51.2 51.2-51.2 132.267 4.267 183.467 8.533 8.533 8.533 21.333 4.267 34.133-4.267 8.533-17.067 17.067-29.867 17.067-72.533 0-128 55.467-128 128s55.467 128 128 128h8.533c12.8 0 21.333 8.533 25.6 17.067s4.267 21.333-8.533 34.133c-25.6 25.6-38.4 55.467-38.4 89.6s12.8 64 38.4 89.6c0 0 0 0 0 0 51.2 51.2 132.267 51.2 183.467-4.267 8.533-8.533 21.333-8.533 34.133-4.267s17.067 12.8 17.067 29.867c0 72.533 55.467 128 128 128s128-55.467 128-128v-8.533c0-12.8 8.533-21.333 17.067-25.6s21.333-4.267 34.133 8.533c51.2 51.2 132.267 51.2 179.2 0 51.2-51.2 51.2-132.267-4.267-183.467-4.267-8.533-8.533-21.333-4.267-29.867 0 0 0 0 0 0zM789.333 622.933c-17.067 42.667-8.533 89.6 25.6 128 8.533 8.533 12.8 17.067 12.8 29.867s-4.267 21.333-12.8 29.867c-8.533 8.533-17.067 12.8-29.867 12.8 0 0 0 0 0 0-12.8 0-21.333-4.267-34.133-17.067-34.133-34.133-81.067-42.667-123.733-21.333-42.667 17.067-68.267 59.733-68.267 102.4v8.533c0 25.6-17.067 42.667-42.667 42.667s-42.667-17.067-42.667-42.667c0 0 0-4.267 0-4.267 0-46.933-29.867-85.333-72.533-102.4-12.8-8.533-29.867-8.533-46.933-8.533-29.867 0-59.733 12.8-81.067 34.133-17.067 17.067-42.667 17.067-59.733 0 0 0 0 0 0 0v0c-8.533-8.533-12.8-17.067-12.8-29.867s4.267-21.333 17.067-34.133c34.133-34.133 42.667-81.067 21.333-123.733-17.067-42.667-59.733-68.267-102.4-68.267h-8.533c-25.6 0-42.667-17.067-42.667-42.667s17.067-42.667 42.667-42.667c0 0 4.267 0 4.267 0 46.933 0 85.333-29.867 102.4-72.533s8.533-89.6-25.6-128c-17.067-17.067-17.067-42.667 0-59.733s42.667-17.067 64 4.267c29.867 29.867 76.8 38.4 115.2 25.6 4.267 0 8.533 0 12.8-4.267 42.667-17.067 68.267-59.733 68.267-102.4v-8.533c0-25.6 17.067-42.667 42.667-42.667s42.667 17.067 42.667 46.933c0 46.933 25.6 85.333 68.267 102.4s89.6 8.533 128-25.6c8.533-8.533 17.067-12.8 29.867-12.8v0c12.8 0 21.333 4.267 29.867 12.8 0 0 0 0 0 0 17.067 17.067 17.067 42.667-4.267 64-29.867 29.867-38.4 76.8-25.6 115.2 0 4.267 0 8.533 4.267 12.8 17.067 42.667 59.733 68.267 102.4 68.267h8.533c25.6 0 42.667 17.067 42.667 42.667s-17.067 42.667-46.933 42.667c-42.667-0-85.333 25.6-102.4 68.267z',\n  ]"
						},
						{
							"id": 946,
							"name": "Copy",
							"kind": 32,
							"kindString": "Variable",
							"flags": {},
							"sources": [
								{
									"fileName": "src/Icon/Icon.tsx",
									"line": 75,
									"character": 8
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "string"
								}
							},
							"defaultValue": " [\n    'M853.333 341.333h-384c-72.533 0-128 55.467-128 128v384c0 72.533 55.467 128 128 128h384c72.533 0 128-55.467 128-128v-384c0-72.533-55.467-128-128-128zM896 853.333c0 25.6-17.067 42.667-42.667 42.667h-384c-25.6 0-42.667-17.067-42.667-42.667v-384c0-25.6 17.067-42.667 42.667-42.667h384c25.6 0 42.667 17.067 42.667 42.667v384z',\n    'M213.333 597.333h-42.667c-25.6 0-42.667-17.067-42.667-42.667v-384c0-25.6 17.067-42.667 42.667-42.667h384c25.6 0 42.667 17.067 42.667 42.667v42.667c0 25.6 17.067 42.667 42.667 42.667s42.667-17.067 42.667-42.667v-42.667c0-72.533-55.467-128-128-128h-384c-72.533 0-128 55.467-128 128v384c0 72.533 55.467 128 128 128h42.667c25.6 0 42.667-17.067 42.667-42.667s-17.067-42.667-42.667-42.667z',\n  ]"
						},
						{
							"id": 947,
							"name": "Cross",
							"kind": 32,
							"kindString": "Variable",
							"flags": {},
							"sources": [
								{
									"fileName": "src/Icon/Icon.tsx",
									"line": 79,
									"character": 9
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "string"
								}
							},
							"defaultValue": " [\n    'M571.733 512l226.133-226.133c17.067-17.067 17.067-42.667 0-59.733s-42.667-17.067-59.733 0l-226.133 226.133-226.133-226.133c-17.067-17.067-42.667-17.067-59.733 0s-17.067 42.667 0 59.733l226.133 226.133-226.133 226.133c-17.067 17.067-17.067 42.667 0 59.733 8.533 8.533 17.067 12.8 29.867 12.8s21.333-4.267 29.867-12.8l226.133-226.133 226.133 226.133c8.533 8.533 21.333 12.8 29.867 12.8s21.333-4.267 29.867-12.8c17.067-17.067 17.067-42.667 0-59.733l-226.133-226.133z',\n  ]"
						},
						{
							"id": 948,
							"name": "Delete",
							"kind": 32,
							"kindString": "Variable",
							"flags": {},
							"sources": [
								{
									"fileName": "src/Icon/Icon.tsx",
									"line": 82,
									"character": 10
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "string"
								}
							},
							"defaultValue": " [\n    'M896 213.333h-170.667v-42.667c0-72.533-55.467-128-128-128h-170.667c-72.533 0-128 55.467-128 128v42.667h-170.667c-25.6 0-42.667 17.067-42.667 42.667s17.067 42.667 42.667 42.667h42.667v554.667c0 72.533 55.467 128 128 128h426.667c72.533 0 128-55.467 128-128v-554.667h42.667c25.6 0 42.667-17.067 42.667-42.667s-17.067-42.667-42.667-42.667zM384 170.667c0-25.6 17.067-42.667 42.667-42.667h170.667c25.6 0 42.667 17.067 42.667 42.667v42.667h-256v-42.667zM768 853.333c0 25.6-17.067 42.667-42.667 42.667h-426.667c-25.6 0-42.667-17.067-42.667-42.667v-554.667h512v554.667z',\n    'M426.667 426.667c-25.6 0-42.667 17.067-42.667 42.667v256c0 25.6 17.067 42.667 42.667 42.667s42.667-17.067 42.667-42.667v-256c0-25.6-17.067-42.667-42.667-42.667z',\n    'M597.333 426.667c-25.6 0-42.667 17.067-42.667 42.667v256c0 25.6 17.067 42.667 42.667 42.667s42.667-17.067 42.667-42.667v-256c0-25.6-17.067-42.667-42.667-42.667z',\n  ]"
						},
						{
							"id": 949,
							"name": "End",
							"kind": 32,
							"kindString": "Variable",
							"flags": {},
							"sources": [
								{
									"fileName": "src/Icon/Icon.tsx",
									"line": 87,
									"character": 7
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "string"
								}
							},
							"defaultValue": " [\n    'M238.933 136.533c-12.8-8.533-29.867-12.8-42.667-4.267-17.067 8.533-25.6 21.333-25.6 38.4v682.667c0 17.067 8.533 29.867 25.6 38.4 4.267 4.267 12.8 4.267 17.067 4.267 8.533 0 17.067-4.267 25.6-8.533l426.667-341.333c8.533-8.533 17.067-21.333 17.067-34.133s-4.267-25.6-17.067-34.133l-426.667-341.333zM256 763.733v-503.467l315.733 251.733-315.733 251.733z',\n    'M810.667 170.667c-25.6 0-42.667 17.067-42.667 42.667v597.333c0 25.6 17.067 42.667 42.667 42.667s42.667-17.067 42.667-42.667v-597.333c0-25.6-17.067-42.667-42.667-42.667z',\n  ]"
						},
						{
							"id": 950,
							"name": "Error",
							"kind": 32,
							"kindString": "Variable",
							"flags": {},
							"sources": [
								{
									"fileName": "src/Icon/Icon.tsx",
									"line": 91,
									"character": 9
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "string"
								}
							},
							"defaultValue": " [\n    'M981.333 746.667l-358.4-605.867c-17.067-29.867-46.933-51.2-81.067-59.733s-68.267-4.267-98.133 12.8c-17.067 8.533-34.133 25.6-42.667 42.667 0 0 0 0 0 0l-358.4 610.133c-34.133 59.733-12.8 140.8 46.933 174.933 17.067 12.8 38.4 17.067 59.733 17.067h725.333c34.133 0 68.267-12.8 89.6-38.4 25.6-25.6 38.4-55.467 38.4-89.6-4.267-21.333-8.533-46.933-21.333-64zM904.533 840.533c-8.533 8.533-21.333 12.8-29.867 12.8h-725.333c-8.533 0-12.8 0-21.333-4.267-21.333-12.8-25.6-38.4-17.067-59.733l362.667-601.6c4.267-4.267 8.533-12.8 12.8-12.8 21.333-12.8 46.933-4.267 59.733 12.8l362.667 601.6c4.267 4.267 4.267 12.8 4.267 21.333 4.267 12.8-4.267 21.333-8.533 29.867z',\n    'M512 341.333c-25.6 0-42.667 17.067-42.667 42.667v170.667c0 25.6 17.067 42.667 42.667 42.667s42.667-17.067 42.667-42.667v-170.667c0-25.6-17.067-42.667-42.667-42.667z',\n    'M482.133 695.467c-8.533 8.533-12.8 17.067-12.8 29.867s4.267 21.333 12.8 29.867c8.533 8.533 17.067 12.8 29.867 12.8s21.333-4.267 29.867-12.8c8.533-8.533 12.8-21.333 12.8-29.867s-4.267-21.333-12.8-29.867c-17.067-17.067-42.667-17.067-59.733 0z',\n  ]"
						},
						{
							"id": 951,
							"name": "ExternalLink",
							"kind": 32,
							"kindString": "Variable",
							"flags": {},
							"sources": [
								{
									"fileName": "src/Icon/Icon.tsx",
									"line": 96,
									"character": 16
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "string"
								}
							},
							"defaultValue": " [\n    'M768 512c-25.6 0-42.667 17.067-42.667 42.667v256c0 25.6-17.067 42.667-42.667 42.667h-469.333c-25.6 0-42.667-17.067-42.667-42.667v-469.333c0-25.6 17.067-42.667 42.667-42.667h256c25.6 0 42.667-17.067 42.667-42.667s-17.067-42.667-42.667-42.667h-256c-72.533 0-128 55.467-128 128v469.333c0 72.533 55.467 128 128 128h469.333c72.533 0 128-55.467 128-128v-256c0-25.6-17.067-42.667-42.667-42.667z',\n    'M934.4 110.933c-4.267-8.533-12.8-17.067-21.333-21.333-4.267-4.267-12.8-4.267-17.067-4.267h-256c-25.6 0-42.667 17.067-42.667 42.667s17.067 42.667 42.667 42.667h153.6l-396.8 396.8c-17.067 17.067-17.067 42.667 0 59.733 8.533 8.533 17.067 12.8 29.867 12.8s21.333-4.267 29.867-12.8l396.8-396.8v153.6c0 25.6 17.067 42.667 42.667 42.667s42.667-17.067 42.667-42.667v-256c0-4.267 0-12.8-4.267-17.067z',\n  ]"
						},
						{
							"id": 952,
							"name": "Eye",
							"kind": 32,
							"kindString": "Variable",
							"flags": {},
							"sources": [
								{
									"fileName": "src/Icon/Icon.tsx",
									"line": 100,
									"character": 7
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "string"
								}
							},
							"defaultValue": " [\n    'M1019.733 494.933c-8.533-17.067-187.733-366.933-507.733-366.933s-499.2 349.867-507.733 366.933c-4.267 12.8-4.267 25.6 0 38.4 8.533 12.8 187.733 362.667 507.733 362.667s499.2-349.867 507.733-366.933c4.267-8.533 4.267-25.6 0-34.133zM512 810.667c-230.4 0-379.733-230.4-422.4-298.667 38.4-68.267 192-298.667 422.4-298.667s379.733 230.4 422.4 298.667c-42.667 68.267-192 298.667-422.4 298.667z',\n    'M512 341.333c-93.867 0-170.667 76.8-170.667 170.667s76.8 170.667 170.667 170.667c93.867 0 170.667-76.8 170.667-170.667s-76.8-170.667-170.667-170.667zM512 597.333c-46.933 0-85.333-38.4-85.333-85.333s38.4-85.333 85.333-85.333c46.933 0 85.333 38.4 85.333 85.333s-38.4 85.333-85.333 85.333z',\n  ]"
						},
						{
							"id": 955,
							"name": "File",
							"kind": 32,
							"kindString": "Variable",
							"flags": {},
							"sources": [
								{
									"fileName": "src/Icon/Icon.tsx",
									"line": 111,
									"character": 8
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "string"
								}
							},
							"defaultValue": " [\n    'M891.733 366.933c-4.267-4.267-4.267-8.533-8.533-12.8l-298.667-298.667c-4.267-4.267-8.533-8.533-12.8-8.533-4.267-4.267-12.8-4.267-17.067-4.267h-298.667c-72.533 0-128 55.467-128 128v682.667c0 72.533 55.467 128 128 128h512c72.533 0 128-55.467 128-128v-469.333c0-4.267 0-12.8-4.267-17.067zM597.333 187.733l153.6 153.6h-153.6v-153.6zM768 896h-512c-25.6 0-42.667-17.067-42.667-42.667v-682.667c0-25.6 17.067-42.667 42.667-42.667h256v256c0 25.6 17.067 42.667 42.667 42.667h256v426.667c0 25.6-17.067 42.667-42.667 42.667z',\n  ]"
						},
						{
							"id": 953,
							"name": "Forward",
							"kind": 32,
							"kindString": "Variable",
							"flags": {},
							"sources": [
								{
									"fileName": "src/Icon/Icon.tsx",
									"line": 104,
									"character": 11
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "string"
								}
							},
							"defaultValue": " [\n    'M964.267 477.867l-384-298.667c-12.8-8.533-29.867-12.8-46.933-4.267-12.8 8.533-21.333 21.333-21.333 38.4v597.333c0 17.067 8.533 29.867 25.6 38.4 4.267 4.267 12.8 4.267 17.067 4.267 8.533 0 17.067-4.267 25.6-8.533l384-298.667c8.533-8.533 17.067-21.333 17.067-34.133s-4.267-25.6-17.067-34.133zM597.333 725.333v-426.667l273.067 213.333-273.067 213.333z',\n    'M110.933 179.2c-12.8-8.533-29.867-12.8-42.667-4.267-17.067 8.533-25.6 21.333-25.6 38.4v597.333c0 17.067 8.533 29.867 25.6 38.4 4.267 4.267 12.8 4.267 17.067 4.267 8.533 0 17.067-4.267 25.6-8.533l384-298.667c8.533-8.533 17.067-21.333 17.067-34.133s-4.267-25.6-17.067-34.133l-384-298.667zM128 725.333v-426.667l273.067 213.333-273.067 213.333z',\n  ]"
						},
						{
							"id": 954,
							"name": "Github",
							"kind": 32,
							"kindString": "Variable",
							"flags": {},
							"sources": [
								{
									"fileName": "src/Icon/Icon.tsx",
									"line": 108,
									"character": 10
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "string"
								}
							},
							"defaultValue": " [\n    'M960 362.667c0-64-21.333-119.467-59.733-170.667 12.8-55.467 8.533-115.2-12.8-166.4-4.267-12.8-12.8-21.333-25.6-25.6-17.067-4.267-72.533-12.8-187.733 59.733-93.867-21.333-192-21.333-281.6 0-115.2-72.533-170.667-64-187.733-59.733-12.8 4.267-21.333 12.8-25.6 25.6-25.6 55.467-29.867 110.933-12.8 166.4-38.4 51.2-59.733 110.933-59.733 170.667 0 230.4 128 302.933 247.467 328.533-8.533 29.867-12.8 55.467-12.8 81.067v4.267c-89.6 17.067-119.467-17.067-153.6-64-21.333-29.867-46.933-64-93.867-72.533-21.333-4.267-46.933 8.533-51.2 29.867s8.533 46.933 29.867 51.2c12.8 4.267 29.867 21.333 46.933 42.667 38.4 51.2 93.867 119.467 221.867 102.4v72.533c0 25.6 17.067 42.667 42.667 42.667s42.667-17.067 42.667-42.667v-123.733c0 0 0-4.267 0-4.267v-38.4c0-29.867 8.533-55.467 29.867-76.8 12.8-12.8 17.067-29.867 8.533-42.667-4.267-17.067-17.067-25.6-34.133-29.867-123.733-17.067-238.933-55.467-238.933-256 0-51.2 17.067-93.867 51.2-132.267 12.8-12.8 12.8-29.867 8.533-42.667-12.8-38.4-12.8-72.533-4.267-106.667 21.333 4.267 59.733 17.067 110.933 55.467 12.8 8.533 25.6 8.533 38.4 4.267 89.6-25.6 187.733-25.6 277.333 0 12.8 4.267 25.6 0 34.133-4.267 55.467-38.4 93.867-51.2 110.933-55.467 8.533 34.133 8.533 68.267-4.267 102.4-4.267 17.067-4.267 34.133 8.533 42.667 34.133 34.133 51.2 81.067 51.2 132.267 0 200.533-115.2 243.2-238.933 256-17.067 0-29.867 12.8-34.133 29.867s0 34.133 8.533 42.667c21.333 21.333 29.867 51.2 29.867 81.067v166.4c0 25.6 17.067 42.667 42.667 42.667s42.667-17.067 42.667-42.667v-162.133c4.267-29.867 0-55.467-12.8-81.067 102.4-21.333 247.467-89.6 247.467-332.8z',\n  ]"
						},
						{
							"id": 956,
							"name": "Info",
							"kind": 32,
							"kindString": "Variable",
							"flags": {},
							"sources": [
								{
									"fileName": "src/Icon/Icon.tsx",
									"line": 114,
									"character": 8
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "string"
								}
							},
							"defaultValue": " [\n    'M981.333 512c0-129.579-52.565-246.997-137.472-331.861s-202.283-137.472-331.861-137.472-246.997 52.565-331.861 137.472-137.472 202.283-137.472 331.861 52.565 246.997 137.472 331.861 202.283 137.472 331.861 137.472 246.997-52.565 331.861-137.472 137.472-202.283 137.472-331.861zM896 512c0 106.069-42.923 201.984-112.469 271.531s-165.461 112.469-271.531 112.469-201.984-42.923-271.531-112.469-112.469-165.461-112.469-271.531 42.923-201.984 112.469-271.531 165.461-112.469 271.531-112.469 201.984 42.923 271.531 112.469 112.469 165.461 112.469 271.531zM554.667 682.667v-170.667c0-23.552-19.115-42.667-42.667-42.667s-42.667 19.115-42.667 42.667v170.667c0 23.552 19.115 42.667 42.667 42.667s42.667-19.115 42.667-42.667zM512 384c23.552 0 42.667-19.115 42.667-42.667s-19.115-42.667-42.667-42.667-42.667 19.115-42.667 42.667 19.115 42.667 42.667 42.667z',\n  ]"
						},
						{
							"id": 957,
							"name": "Letter",
							"kind": 32,
							"kindString": "Variable",
							"flags": {},
							"sources": [
								{
									"fileName": "src/Icon/Icon.tsx",
									"line": 117,
									"character": 10
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "string"
								}
							},
							"defaultValue": " [\n    'M853.333 128h-682.667c-72.533 0-128 55.467-128 128v512c0 72.533 55.467 128 128 128h682.667c72.533 0 128-55.467 128-128v-512c0-72.533-55.467-128-128-128zM170.667 213.333h682.667c17.067 0 29.867 8.533 38.4 25.6l-379.733 264.533-379.733-264.533c8.533-17.067 21.333-25.6 38.4-25.6zM853.333 810.667h-682.667c-25.6 0-42.667-17.067-42.667-42.667v-430.933l358.4 251.733c8.533 4.267 17.067 8.533 25.6 8.533s17.067-4.267 25.6-8.533l358.4-251.733v430.933c0 25.6-17.067 42.667-42.667 42.667z',\n  ]"
						},
						{
							"id": 958,
							"name": "Maximize",
							"kind": 32,
							"kindString": "Variable",
							"flags": {},
							"sources": [
								{
									"fileName": "src/Icon/Icon.tsx",
									"line": 120,
									"character": 12
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "string"
								}
							},
							"defaultValue": " [\n    'M341.333 853.333h-128c-25.6 0-42.667-17.067-42.667-42.667v-128c0-25.6-17.067-42.667-42.667-42.667s-42.667 17.067-42.667 42.667v128c0 72.533 55.467 128 128 128h128c25.6 0 42.667-17.067 42.667-42.667s-17.067-42.667-42.667-42.667z',\n    'M341.333 85.333h-128c-72.533 0-128 55.467-128 128v128c0 25.6 17.067 42.667 42.667 42.667s42.667-17.067 42.667-42.667v-128c0-25.6 17.067-42.667 42.667-42.667h128c25.6 0 42.667-17.067 42.667-42.667s-17.067-42.667-42.667-42.667z',\n    'M810.667 85.333h-128c-25.6 0-42.667 17.067-42.667 42.667s17.067 42.667 42.667 42.667h128c25.6 0 42.667 17.067 42.667 42.667v128c0 25.6 17.067 42.667 42.667 42.667s42.667-17.067 42.667-42.667v-128c0-72.533-55.467-128-128-128z',\n    'M896 640c-25.6 0-42.667 17.067-42.667 42.667v128c0 25.6-17.067 42.667-42.667 42.667h-128c-25.6 0-42.667 17.067-42.667 42.667s17.067 42.667 42.667 42.667h128c72.533 0 128-55.467 128-128v-128c0-25.6-17.067-42.667-42.667-42.667z',\n  ]"
						},
						{
							"id": 959,
							"name": "Menu",
							"kind": 32,
							"kindString": "Variable",
							"flags": {},
							"sources": [
								{
									"fileName": "src/Icon/Icon.tsx",
									"line": 126,
									"character": 8
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "string"
								}
							},
							"defaultValue": " [\n    'M896 469.333h-768c-25.6 0-42.667 17.067-42.667 42.667s17.067 42.667 42.667 42.667h768c25.6 0 42.667-17.067 42.667-42.667s-17.067-42.667-42.667-42.667z',\n    'M128 298.667h768c25.6 0 42.667-17.067 42.667-42.667s-17.067-42.667-42.667-42.667h-768c-25.6 0-42.667 17.067-42.667 42.667s17.067 42.667 42.667 42.667z',\n    'M896 725.333h-768c-25.6 0-42.667 17.067-42.667 42.667s17.067 42.667 42.667 42.667h768c25.6 0 42.667-17.067 42.667-42.667s-17.067-42.667-42.667-42.667z',\n  ]"
						},
						{
							"id": 960,
							"name": "Minimize",
							"kind": 32,
							"kindString": "Variable",
							"flags": {},
							"sources": [
								{
									"fileName": "src/Icon/Icon.tsx",
									"line": 131,
									"character": 12
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "string"
								}
							},
							"defaultValue": " [\n    'M256 640h-128c-25.6 0-42.667 17.067-42.667 42.667s17.067 42.667 42.667 42.667h128c25.6 0 42.667 17.067 42.667 42.667v128c0 25.6 17.067 42.667 42.667 42.667s42.667-17.067 42.667-42.667v-128c0-72.533-55.467-128-128-128z',\n    'M768 384h128c25.6 0 42.667-17.067 42.667-42.667s-17.067-42.667-42.667-42.667h-128c-25.6 0-42.667-17.067-42.667-42.667v-128c0-25.6-17.067-42.667-42.667-42.667s-42.667 17.067-42.667 42.667v128c0 72.533 55.467 128 128 128z',\n    'M896 640h-128c-72.533 0-128 55.467-128 128v128c0 25.6 17.067 42.667 42.667 42.667s42.667-17.067 42.667-42.667v-128c0-25.6 17.067-42.667 42.667-42.667h128c25.6 0 42.667-17.067 42.667-42.667s-17.067-42.667-42.667-42.667z',\n    'M341.333 85.333c-25.6 0-42.667 17.067-42.667 42.667v128c0 25.6-17.067 42.667-42.667 42.667h-128c-25.6 0-42.667 17.067-42.667 42.667s17.067 42.667 42.667 42.667h128c72.533 0 128-55.467 128-128v-128c0-25.6-17.067-42.667-42.667-42.667z',\n  ]"
						},
						{
							"id": 961,
							"name": "Moon",
							"kind": 32,
							"kindString": "Variable",
							"flags": {},
							"sources": [
								{
									"fileName": "src/Icon/Icon.tsx",
									"line": 137,
									"character": 8
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "string"
								}
							},
							"defaultValue": " [\n    'M917.333 507.733c-12.8-8.533-34.133-8.533-46.933 4.267-89.6 68.267-213.333 68.267-302.933 0-115.2-85.333-140.8-243.2-55.467-358.4 8.533-12.8 12.8-29.867 4.267-46.933-8.533-12.8-25.6-21.333-42.667-21.333-204.8 17.067-366.933 179.2-384 384-21.333 234.667 149.333 443.733 384 465.067 12.8 0 25.6 0 38.4 0 98.133 0 196.267-34.133 273.067-98.133 89.6-72.533 140.8-174.933 153.6-290.133 0-12.8-8.533-29.867-21.333-38.4zM733.867 772.267c-68.267 59.733-157.867 85.333-247.467 76.8-187.733-17.067-324.267-183.467-307.2-371.2 12.8-132.267 102.4-247.467 221.867-290.133-51.2 136.533-4.267 298.667 119.467 392.533 93.867 68.267 213.333 85.333 320 46.933-25.6 55.467-59.733 106.667-106.667 145.067z',\n  ]"
						},
						{
							"id": 962,
							"name": "Pause",
							"kind": 32,
							"kindString": "Variable",
							"flags": {},
							"sources": [
								{
									"fileName": "src/Icon/Icon.tsx",
									"line": 140,
									"character": 9
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "string"
								}
							},
							"defaultValue": " [\n    'M426.667 128h-170.667c-25.6 0-42.667 17.067-42.667 42.667v682.667c0 25.6 17.067 42.667 42.667 42.667h170.667c25.6 0 42.667-17.067 42.667-42.667v-682.667c0-25.6-17.067-42.667-42.667-42.667zM384 810.667h-85.333v-597.333h85.333v597.333z',\n    'M768 128h-170.667c-25.6 0-42.667 17.067-42.667 42.667v682.667c0 25.6 17.067 42.667 42.667 42.667h170.667c25.6 0 42.667-17.067 42.667-42.667v-682.667c0-25.6-17.067-42.667-42.667-42.667zM725.333 810.667h-85.333v-597.333h85.333v597.333z',\n  ]"
						},
						{
							"id": 963,
							"name": "Pencil",
							"kind": 32,
							"kindString": "Variable",
							"flags": {},
							"sources": [
								{
									"fileName": "src/Icon/Icon.tsx",
									"line": 144,
									"character": 10
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "string"
								}
							},
							"defaultValue": " [\n    'M925.867 311.467l-213.333-213.333c-17.067-17.067-42.667-17.067-59.733 0l-554.667 554.667c-8.533 8.533-12.8 17.067-12.8 29.867v213.333c0 25.6 17.067 42.667 42.667 42.667h213.333c12.8 0 21.333-4.267 29.867-12.8l554.667-554.667c17.067-17.067 17.067-42.667 0-59.733zM324.267 853.333h-153.6v-153.6l512-512 153.6 153.6-512 512z',\n  ]"
						},
						{
							"id": 964,
							"name": "Play",
							"kind": 32,
							"kindString": "Variable",
							"flags": {},
							"sources": [
								{
									"fileName": "src/Icon/Icon.tsx",
									"line": 147,
									"character": 8
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "string"
								}
							},
							"defaultValue": " [\n    'M832 477.867l-597.333-384c-12.8-8.533-29.867-8.533-42.667 0-12.8 4.267-21.333 17.067-21.333 34.133v768c0 17.067 8.533 29.867 21.333 38.4 8.533 4.267 12.8 4.267 21.333 4.267s17.067-4.267 21.333-8.533l597.333-384c12.8-8.533 21.333-21.333 21.333-34.133s-8.533-29.867-21.333-34.133zM256 819.2v-614.4l477.867 307.2-477.867 307.2z',\n  ]"
						},
						{
							"id": 965,
							"name": "Progress",
							"kind": 32,
							"kindString": "Variable",
							"flags": {},
							"sources": [
								{
									"fileName": "src/Icon/Icon.tsx",
									"line": 150,
									"character": 12
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "string"
								}
							},
							"defaultValue": " [\n    'M512 42.667c-25.6 0-42.667 17.067-42.667 42.667v170.667c0 25.6 17.067 42.667 42.667 42.667s42.667-17.067 42.667-42.667v-170.667c0-25.6-17.067-42.667-42.667-42.667z',\n    'M512 725.333c-25.6 0-42.667 17.067-42.667 42.667v170.667c0 25.6 17.067 42.667 42.667 42.667s42.667-17.067 42.667-42.667v-170.667c0-25.6-17.067-42.667-42.667-42.667z',\n    'M238.933 179.2c-17.067-17.067-42.667-17.067-59.733 0s-17.067 42.667 0 59.733l119.467 119.467c8.533 8.533 21.333 12.8 29.867 12.8s21.333-4.267 29.867-12.8c17.067-17.067 17.067-42.667 0-59.733l-119.467-119.467z',\n    'M721.067 661.333c-17.067-17.067-42.667-17.067-59.733 0s-17.067 42.667 0 59.733l119.467 119.467c8.533 8.533 21.333 12.8 29.867 12.8s21.333-4.267 29.867-12.8c17.067-17.067 17.067-42.667 0-59.733l-119.467-119.467z',\n    'M298.667 512c0-25.6-17.067-42.667-42.667-42.667h-170.667c-25.6 0-42.667 17.067-42.667 42.667s17.067 42.667 42.667 42.667h170.667c25.6 0 42.667-17.067 42.667-42.667z',\n    'M938.667 469.333h-170.667c-25.6 0-42.667 17.067-42.667 42.667s17.067 42.667 42.667 42.667h170.667c25.6 0 42.667-17.067 42.667-42.667s-17.067-42.667-42.667-42.667z',\n    'M302.933 661.333l-119.467 119.467c-17.067 17.067-17.067 42.667 0 59.733 8.533 8.533 21.333 12.8 29.867 12.8s21.333-4.267 29.867-12.8l119.467-119.467c17.067-17.067 17.067-42.667 0-59.733s-46.933-17.067-59.733 0z',\n    'M691.2 375.467c12.8 0 21.333-4.267 29.867-12.8l119.467-119.467c17.067-17.067 17.067-42.667 0-59.733s-42.667-17.067-59.733 0l-119.467 119.467c-17.067 17.067-17.067 42.667 0 59.733 8.533 8.533 21.333 12.8 29.867 12.8z',\n  ]"
						},
						{
							"id": 966,
							"name": "QuestionMark",
							"kind": 32,
							"kindString": "Variable",
							"flags": {},
							"sources": [
								{
									"fileName": "src/Icon/Icon.tsx",
									"line": 160,
									"character": 16
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "string"
								}
							},
							"defaultValue": " [\n    'M512 42.667c-260.267 0-469.333 209.067-469.333 469.333s209.067 469.333 469.333 469.333 469.333-209.067 469.333-469.333-209.067-469.333-469.333-469.333zM512 896c-213.333 0-384-170.667-384-384s170.667-384 384-384c213.333 0 384 170.667 384 384s-170.667 384-384 384z',\n    'M563.2 264.533c-89.6-29.867-187.733 17.067-217.6 102.4-4.267 25.6 4.267 51.2 29.867 55.467 21.333 8.533 46.933-4.267 55.467-25.6 17.067-42.667 64-68.267 110.933-51.2 34.133 12.8 55.467 42.667 55.467 81.067 0 42.667-72.533 76.8-98.133 89.6-21.333 8.533-34.133 29.867-25.6 55.467 4.267 17.067 21.333 29.867 38.4 29.867 4.267 0 8.533 0 12.8-4.267 17.067-4.267 157.867-55.467 157.867-166.4-4.267-76.8-51.2-140.8-119.467-166.4z',\n    'M482.133 695.467c-8.533 8.533-12.8 17.067-12.8 29.867s4.267 21.333 12.8 29.867c8.533 8.533 17.067 12.8 29.867 12.8s21.333-4.267 29.867-12.8c8.533-8.533 12.8-21.333 12.8-29.867s-4.267-21.333-12.8-29.867c-17.067-17.067-42.667-17.067-59.733 0z',\n  ]"
						},
						{
							"id": 967,
							"name": "Redo",
							"kind": 32,
							"kindString": "Variable",
							"flags": {},
							"sources": [
								{
									"fileName": "src/Icon/Icon.tsx",
									"line": 165,
									"character": 8
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "string"
								}
							},
							"defaultValue": " [\n    'M1024 430.933c0 0 0-4.267 0-4.267v-256c0-25.6-17.067-42.667-42.667-42.667s-42.667 17.067-42.667 42.667v157.867l-123.733-119.467c-42.667-42.667-98.133-81.067-157.867-102.4-226.133-76.8-469.333 42.667-546.133 264.533s38.4 465.067 260.267 546.133c46.933 12.8 93.867 21.333 140.8 21.333 174.933 0 341.333-110.933 401.067-285.867 8.533-21.333-4.267-46.933-25.6-55.467s-46.933 4.267-55.467 25.6c-64 179.2-256 268.8-435.2 209.067-179.2-64-268.8-256-209.067-435.2 64-174.933 260.267-268.8 439.467-204.8 46.933 17.067 93.867 42.667 128 81.067l119.467 110.933h-149.333c-25.6 0-42.667 17.067-42.667 42.667s17.067 42.667 42.667 42.667h256c0 0 0 0 0 0 4.267 0 8.533 0 8.533-4.267 0 0 4.267 0 4.267 0s4.267-4.267 4.267-4.267c4.267 0 8.533-4.267 8.533-8.533 0 0 0 0 0 0s0-4.267 4.267-4.267c0-4.267 4.267-4.267 4.267-8.533 8.533-0 8.533-4.267 8.533-8.533z',\n  ]"
						},
						{
							"id": 968,
							"name": "Refresh",
							"kind": 32,
							"kindString": "Variable",
							"flags": {},
							"sources": [
								{
									"fileName": "src/Icon/Icon.tsx",
									"line": 168,
									"character": 11
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "string"
								}
							},
							"defaultValue": " [\n    'M887.467 601.6c-21.333-8.533-46.933 4.267-55.467 25.6-17.067 46.933-42.667 93.867-81.067 128-59.733 64-149.333 98.133-238.933 98.133 0 0 0 0 0 0-89.6 0-174.933-34.133-243.2-102.4l-119.467-110.933h149.333c25.6 0 42.667-17.067 42.667-42.667s-17.067-42.667-42.667-42.667h-256c0 0 0 0 0 0-4.267 0-8.533 0-8.533 4.267 0 0-4.267 0-4.267 0s-4.267 0-4.267 4.267c-4.267 0-8.533 4.267-8.533 8.533 0 0 0 0 0 0s0 4.267-4.267 4.267c0 4.267-4.267 4.267-4.267 8.533s0 4.267 0 8.533c0 0 0 4.267 0 4.267v256c0 25.6 17.067 42.667 42.667 42.667s42.667-17.067 42.667-42.667v-157.867l123.733 119.467c72.533 81.067 179.2 123.733 294.4 123.733 0 0 0 0 0 0 115.2 0 221.867-42.667 302.933-123.733 42.667-42.667 81.067-98.133 102.4-157.867 4.267-25.6-8.533-51.2-29.867-55.467z',\n    'M1024 430.933c0 0 0-4.267 0-4.267v-256c0-25.6-17.067-42.667-42.667-42.667s-42.667 17.067-42.667 42.667v157.867l-123.733-119.467c-42.667-42.667-98.133-81.067-157.867-102.4-110.933-34.133-226.133-29.867-328.533 21.333-102.4 46.933-179.2 132.267-217.6 243.2-8.533 21.333 4.267 46.933 25.6 51.2 21.333 8.533 46.933-4.267 55.467-25.6 29.867-85.333 93.867-153.6 174.933-196.267 81.067-38.4 174.933-42.667 260.267-12.8 46.933 17.067 93.867 42.667 128 81.067l119.467 115.2h-149.333c-25.6 0-42.667 17.067-42.667 42.667s17.067 42.667 42.667 42.667h256c4.267 0 12.8 0 17.067-4.267 0 0 0 0 0 0 4.267-4.267 8.533-4.267 12.8-8.533 0 0 0 0 0 0s0-4.267 4.267-4.267c0-4.267 4.267-4.267 4.267-8.533 4.267-4.267 4.267-8.533 4.267-12.8z',\n  ]"
						},
						{
							"id": 969,
							"name": "Save",
							"kind": 32,
							"kindString": "Variable",
							"flags": {},
							"sources": [
								{
									"fileName": "src/Icon/Icon.tsx",
									"line": 172,
									"character": 8
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "string"
								}
							},
							"defaultValue": " [\n    'M925.867 311.467l-213.333-213.333c-8.533-8.533-17.067-12.8-29.867-12.8h-469.333c-72.533 0-128 55.467-128 128v597.333c0 72.533 55.467 128 128 128h597.333c72.533 0 128-55.467 128-128v-469.333c0-12.8-4.267-21.333-12.8-29.867zM682.667 853.333h-341.333v-256h341.333v256zM853.333 810.667c0 25.6-17.067 42.667-42.667 42.667h-42.667v-298.667c0-25.6-17.067-42.667-42.667-42.667h-426.667c-25.6 0-42.667 17.067-42.667 42.667v298.667h-42.667c-25.6 0-42.667-17.067-42.667-42.667v-597.333c0-25.6 17.067-42.667 42.667-42.667h42.667v170.667c0 25.6 17.067 42.667 42.667 42.667h341.333c25.6 0 42.667-17.067 42.667-42.667s-17.067-42.667-42.667-42.667h-298.667v-128h324.267l187.733 187.733v452.267z',\n  ]"
						},
						{
							"id": 970,
							"name": "Square",
							"kind": 32,
							"kindString": "Variable",
							"flags": {},
							"sources": [
								{
									"fileName": "src/Icon/Icon.tsx",
									"line": 175,
									"character": 10
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "string"
								}
							},
							"defaultValue": " [\n    'M810.667 85.333h-597.333c-72.533 0-128 55.467-128 128v597.333c0 72.533 55.467 128 128 128h597.333c72.533 0 128-55.467 128-128v-597.333c0-72.533-55.467-128-128-128zM853.333 810.667c0 25.6-17.067 42.667-42.667 42.667h-597.333c-25.6 0-42.667-17.067-42.667-42.667v-597.333c0-25.6 17.067-42.667 42.667-42.667h597.333c25.6 0 42.667 17.067 42.667 42.667v597.333z',\n  ]"
						},
						{
							"id": 971,
							"name": "Star",
							"kind": 32,
							"kindString": "Variable",
							"flags": {},
							"sources": [
								{
									"fileName": "src/Icon/Icon.tsx",
									"line": 178,
									"character": 8
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "string"
								}
							},
							"defaultValue": " [\n    'M981.333 384c-4.267-17.067-17.067-25.6-34.133-29.867l-273.067-38.4-123.733-247.467c-12.8-29.867-64-29.867-76.8 0l-123.733 243.2-268.8 42.667c-17.067 0-29.867 12.8-38.4 29.867-4.267 17.067 0 34.133 12.8 42.667l196.267 192-46.933 273.067c-4.267 17.067 4.267 34.133 17.067 42.667s29.867 12.8 46.933 4.267l243.2-128 243.2 128c8.533 0 12.8 0 21.333 0s17.067-4.267 25.6-8.533c12.8-8.533 21.333-25.6 17.067-42.667l-46.933-273.067 196.267-192c12.8-8.533 17.067-25.6 12.8-38.4zM695.467 571.733c-8.533 12.8-12.8 25.6-12.8 38.4l34.133 209.067-187.733-98.133c-12.8-8.533-25.6-8.533-38.4 0l-187.733 98.133 38.4-209.067c0-12.8-4.267-25.6-12.8-38.4l-153.6-145.067 209.067-29.867c12.8 0 25.6-12.8 34.133-21.333l93.867-192 93.867 187.733c4.267 12.8 17.067 21.333 34.133 21.333l209.067 29.867-153.6 149.333z',\n  ]"
						},
						{
							"id": 972,
							"name": "Sun",
							"kind": 32,
							"kindString": "Variable",
							"flags": {},
							"sources": [
								{
									"fileName": "src/Icon/Icon.tsx",
									"line": 181,
									"character": 7
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "string"
								}
							},
							"defaultValue": " [\n    'M512 256c-140.8 0-256 115.2-256 256s115.2 256 256 256 256-115.2 256-256-115.2-256-256-256zM512 682.667c-93.867 0-170.667-76.8-170.667-170.667s76.8-170.667 170.667-170.667c93.867 0 170.667 76.8 170.667 170.667s-76.8 170.667-170.667 170.667z',\n    'M512 170.667c25.6 0 42.667-17.067 42.667-42.667v-85.333c0-25.6-17.067-42.667-42.667-42.667s-42.667 17.067-42.667 42.667v85.333c0 25.6 17.067 42.667 42.667 42.667z',\n    'M512 853.333c-25.6 0-42.667 17.067-42.667 42.667v85.333c0 25.6 17.067 42.667 42.667 42.667s42.667-17.067 42.667-42.667v-85.333c0-25.6-17.067-42.667-42.667-42.667z',\n    'M209.067 268.8c8.533 8.533 21.333 12.8 29.867 12.8s21.333-4.267 29.867-12.8c17.067-17.067 17.067-42.667 0-59.733l-59.733-59.733c-17.067-17.067-42.667-17.067-59.733 0s-17.067 42.667 0 59.733l59.733 59.733z',\n    'M814.933 755.2c-17.067-17.067-42.667-17.067-59.733 0s-17.067 42.667 0 59.733l59.733 59.733c8.533 8.533 21.333 12.8 29.867 12.8s21.333-4.267 29.867-12.8c17.067-17.067 17.067-42.667 0-59.733l-59.733-59.733z',\n    'M170.667 512c0-25.6-17.067-42.667-42.667-42.667h-85.333c-25.6 0-42.667 17.067-42.667 42.667s17.067 42.667 42.667 42.667h85.333c25.6 0 42.667-17.067 42.667-42.667z',\n    'M981.333 469.333h-85.333c-25.6 0-42.667 17.067-42.667 42.667s17.067 42.667 42.667 42.667h85.333c25.6 0 42.667-17.067 42.667-42.667s-17.067-42.667-42.667-42.667z',\n    'M209.067 755.2l-59.733 59.733c-17.067 17.067-17.067 42.667 0 59.733 8.533 8.533 21.333 12.8 29.867 12.8s21.333-4.267 29.867-12.8l59.733-59.733c17.067-17.067 17.067-42.667 0-59.733s-42.667-17.067-59.733 0z',\n    'M785.067 281.6c12.8 0 21.333-4.267 29.867-12.8l59.733-59.733c17.067-17.067 17.067-42.667 0-59.733s-42.667-17.067-59.733 0l-59.733 59.733c-17.067 17.067-17.067 42.667 0 59.733 4.267 8.533 17.067 12.8 29.867 12.8z',\n  ]"
						},
						{
							"id": 973,
							"name": "Twitter",
							"kind": 32,
							"kindString": "Variable",
							"flags": {},
							"sources": [
								{
									"fileName": "src/Icon/Icon.tsx",
									"line": 192,
									"character": 11
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "string"
								}
							},
							"defaultValue": " [\n    'M1006.933 93.867c-12.8-8.533-34.133-8.533-46.933 0-29.867 21.333-64 38.4-98.133 51.2-85.333-76.8-217.6-81.067-307.2-4.267-55.467 46.933-85.333 110.933-85.333 179.2-123.733-8.533-234.667-72.533-307.2-174.933-8.533-12.8-21.333-17.067-38.4-17.067s-29.867 12.8-34.133 25.6c-4.267 4.267-46.933 106.667-42.667 230.4 4.267 106.667 46.933 243.2 204.8 341.333-64 29.867-136.533 42.667-209.067 42.667-17.067 0-38.4 12.8-42.667 29.867s4.267 38.4 21.333 46.933c106.667 59.733 221.867 89.6 328.533 89.6s209.067-25.6 302.933-81.067c183.467-102.4 285.867-298.667 285.867-533.333 0-8.533 0-12.8 0-21.333 42.667-46.933 72.533-102.4 85.333-162.133 4.267-17.067-4.267-34.133-17.067-42.667zM861.867 256c-8.533 8.533-12.8 25.6-12.8 38.4 4.267 8.533 4.267 17.067 4.267 25.6 0 204.8-89.6 371.2-243.2 460.8-119.467 68.267-260.267 85.333-401.067 51.2 55.467-17.067 106.667-38.4 153.6-72.533 17.067-8.533 21.333-21.333 21.333-38.4s-12.8-29.867-25.6-34.133c-247.467-110.933-238.933-320-213.333-426.667 93.867 93.867 226.133 149.333 366.933 145.067 21.333 0 42.667-21.333 42.667-42.667v-42.667c0-42.667 17.067-85.333 51.2-115.2 59.733-55.467 157.867-46.933 209.067 12.8 12.8 12.8 29.867 17.067 42.667 12.8 8.533-4.267 21.333-4.267 29.867-8.533-8.533 12.8-17.067 21.333-25.6 34.133z',\n  ]"
						},
						{
							"id": 974,
							"name": "Undo",
							"kind": 32,
							"kindString": "Variable",
							"flags": {},
							"sources": [
								{
									"fileName": "src/Icon/Icon.tsx",
									"line": 195,
									"character": 8
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "string"
								}
							},
							"defaultValue": " [\n    'M913.067 371.2c-38.4-106.667-115.2-192-217.6-243.2s-217.6-55.467-324.267-17.067c-59.733 21.333-115.2 55.467-157.867 98.133l-128 119.467v-157.867c0-25.6-17.067-42.667-42.667-42.667s-42.667 17.067-42.667 42.667v256c0 0 0 4.267 0 4.267 0 4.267 0 8.533 0 8.533 0 4.267 4.267 4.267 4.267 8.533 0 0 0 4.267 4.267 4.267 0 0 0 0 0 0 4.267 4.267 4.267 4.267 8.533 4.267 0 0 4.267 4.267 4.267 4.267s4.267 0 4.267 0 8.533 0 8.533 0c0 0 0 0 0 0h256c25.6 0 42.667-17.067 42.667-42.667s-8.533-34.133-34.133-34.133h-149.333l119.467-115.2c34.133-34.133 81.067-64 128-81.067 85.333-29.867 179.2-25.6 260.267 12.8s145.067 106.667 174.933 196.267c29.867 85.333 25.6 179.2-12.8 260.267s-106.667 145.067-196.267 174.933c-179.2 64-371.2-29.867-435.2-209.067-8.533-21.333-34.133-34.133-55.467-25.6s-34.133 34.133-25.6 55.467c64 174.933 230.4 285.867 405.333 285.867 46.933 0 93.867-8.533 140.8-25.6 221.867-76.8 341.333-320 260.267-541.867z',\n  ]"
						},
						{
							"id": 975,
							"name": "Water",
							"kind": 32,
							"kindString": "Variable",
							"flags": {},
							"sources": [
								{
									"fileName": "src/Icon/Icon.tsx",
									"line": 198,
									"character": 9
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "string"
								}
							},
							"defaultValue": " [\n    'M785.067 324.267l-243.2-238.933c-8.533-8.533-17.067-12.8-29.867-12.8v0c-12.8 0-21.333 4.267-29.867 12.8l-238.933 238.933c0 0 0 0 0 0-76.8 72.533-115.2 170.667-115.2 273.067s38.4 200.533 110.933 273.067c72.533 72.533 170.667 110.933 273.067 110.933 0 0 0 0 0 0 102.4 0 200.533-38.4 273.067-110.933 149.333-149.333 149.333-392.533 0-546.133zM725.333 810.667c-59.733 55.467-132.267 85.333-213.333 85.333 0 0 0 0 0 0-81.067 0-153.6-29.867-209.067-85.333-59.733-59.733-89.6-132.267-89.6-213.333s29.867-153.6 85.333-209.067c0 0 0 0 0 0l209.067-213.333 213.333 213.333c119.467 115.2 119.467 302.933 4.267 422.4z',\n  ]"
						}
					],
					"groups": [
						{
							"title": "Variables",
							"kind": 32,
							"children": [
								938,
								939,
								940,
								941,
								942,
								943,
								944,
								945,
								946,
								947,
								948,
								949,
								950,
								951,
								952,
								955,
								953,
								954,
								956,
								957,
								958,
								959,
								960,
								961,
								962,
								963,
								964,
								965,
								966,
								967,
								968,
								969,
								970,
								971,
								972,
								973,
								974,
								975
							]
						}
					],
					"sources": [
						{
							"fileName": "src/Icon/Icon.tsx",
							"line": 46,
							"character": 17
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "object"
					}
				}
			],
			"groups": [
				{
					"title": "Interfaces",
					"kind": 256,
					"children": [
						908
					]
				},
				{
					"title": "Type aliases",
					"kind": 4194304,
					"children": [
						936
					]
				},
				{
					"title": "Variables",
					"kind": 32,
					"children": [
						976
					]
				},
				{
					"title": "Object literals",
					"kind": 2097152,
					"children": [
						937
					]
				}
			],
			"sources": [
				{
					"fileName": "src/Icon/Icon.tsx",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 978,
			"name": "\"Image/Image\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "/Users/harry/Projects/personal/preshape/src/Image/Image.tsx",
			"children": [
				{
					"id": 979,
					"name": "ImageProps",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"children": [
						{
							"id": 980,
							"name": "absolute",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Quick way of absolutely position to common places"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 58,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "fullscreen"
									},
									{
										"type": "stringLiteral",
										"value": "top"
									},
									{
										"type": "stringLiteral",
										"value": "top-left"
									},
									{
										"type": "stringLiteral",
										"value": "top-right"
									},
									{
										"type": "stringLiteral",
										"value": "bottom"
									},
									{
										"type": "stringLiteral",
										"value": "bottom-left"
									},
									{
										"type": "stringLiteral",
										"value": "bottom-right"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.absolute",
								"id": 3
							}
						},
						{
							"id": 981,
							"name": "backgroundColor",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Background colour to be applied, shades are taken from the current\ntheme."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 70,
									"character": 17
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeColor",
								"id": 30
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.backgroundColor",
								"id": 4
							}
						},
						{
							"id": 982,
							"name": "borderColor",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Border colour to be applied, shades are taken from the current\ntheme."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 75,
									"character": 13
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeColor",
								"id": 30
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.borderColor",
								"id": 5
							}
						},
						{
							"id": 983,
							"name": "borderRadius",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Adds styling of a border radius to one of the size multiples."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 79,
									"character": 14
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "x1"
									},
									{
										"type": "stringLiteral",
										"value": "x2"
									},
									{
										"type": "stringLiteral",
										"value": "x3"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.borderRadius",
								"id": 6
							}
						},
						{
							"id": 984,
							"name": "borderSize",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Thickness of the border to be applied"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 81,
									"character": 12
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "x1"
									},
									{
										"type": "stringLiteral",
										"value": "x2"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.borderSize",
								"id": 7
							}
						},
						{
							"id": 985,
							"name": "clickable",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Adds styling to indicate that the element is clickable"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 83,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.clickable",
								"id": 8
							}
						},
						{
							"id": 986,
							"name": "container",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies relative positioning to contain child elements."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 85,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.container",
								"id": 9
							}
						},
						{
							"id": 987,
							"name": "display",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies display styling"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 87,
									"character": 9
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "block"
									},
									{
										"type": "stringLiteral",
										"value": "inline-block"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.display",
								"id": 10
							}
						},
						{
							"id": 988,
							"name": "fixed",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Quick way of absolutely position to common places"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 89,
									"character": 7
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "fullscreen"
									},
									{
										"type": "stringLiteral",
										"value": "top"
									},
									{
										"type": "stringLiteral",
										"value": "top-left"
									},
									{
										"type": "stringLiteral",
										"value": "top-right"
									},
									{
										"type": "stringLiteral",
										"value": "bottom"
									},
									{
										"type": "stringLiteral",
										"value": "bottom-left"
									},
									{
										"type": "stringLiteral",
										"value": "bottom-right"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.fixed",
								"id": 11
							}
						},
						{
							"id": 989,
							"name": "height",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Fixed height applied through inline styling"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 98,
									"character": 8
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.height",
								"id": 12
							}
						},
						{
							"id": 990,
							"name": "margin",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Margins applied for the global spacing variables"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 100,
									"character": 8
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeSize",
								"id": 31
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.margin",
								"id": 13
							}
						},
						{
							"id": 991,
							"name": "maxWidth",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Max width applied through inline styling"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 102,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.maxWidth",
								"id": 14
							}
						},
						{
							"id": 992,
							"name": "minHeight",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Max height applied through inline styling"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 104,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.minHeight",
								"id": 15
							}
						},
						{
							"id": 993,
							"name": "minWidth",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Min width applied through inline style"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 106,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.minWidth",
								"id": 16
							}
						},
						{
							"id": 994,
							"name": "overflow",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Overflow"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 108,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "stringLiteral",
										"value": "hidden"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.overflow",
								"id": 17
							}
						},
						{
							"id": 995,
							"name": "padding",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Padding applied for the global spacing variables"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 110,
									"character": 9
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeSize",
								"id": 31
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.padding",
								"id": 18
							}
						},
						{
							"id": 996,
							"name": "paddingHorizontal",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Horizontal padding applied for the global spacing variables"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 112,
									"character": 19
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeSize",
								"id": 31
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.paddingHorizontal",
								"id": 19
							}
						},
						{
							"id": 997,
							"name": "paddingVertical",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Vertical pa?dding applied for the global spacing variables"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 114,
									"character": 17
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeSize",
								"id": 31
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.paddingVertical",
								"id": 20
							}
						},
						{
							"id": 998,
							"name": "scrollable",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies overflow styling to enable/disable scrolling."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 116,
									"character": 12
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.scrollable",
								"id": 21
							}
						},
						{
							"id": 999,
							"name": "tag",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Any valid HTML or SVG element tag.",
								"tags": [
									{
										"tag": "reference",
										"text": "false\n"
									}
								]
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 122,
									"character": 5
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeAllElementTags",
								"id": 34
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.tag",
								"id": 22
							}
						},
						{
							"id": 1000,
							"name": "textColor",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Text colour to be applied."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 126,
									"character": 11
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeColor",
								"id": 30
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.textColor",
								"id": 23
							}
						},
						{
							"id": 1001,
							"name": "theme",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Theme applied to this element and inherited for child elements (until\na descendant theme is applied)."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 131,
									"character": 7
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeTheme",
								"id": 35
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.theme",
								"id": 24
							}
						},
						{
							"id": 1002,
							"name": "width",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Fixed width applied through inline styling"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 133,
									"character": 7
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.width",
								"id": 25
							}
						},
						{
							"id": 1003,
							"name": "zIndex",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "z-index number for layering elements."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 135,
									"character": 8
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "number"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.zIndex",
								"id": 26
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								980,
								981,
								982,
								983,
								984,
								985,
								986,
								987,
								988,
								989,
								990,
								991,
								992,
								993,
								994,
								995,
								996,
								997,
								998,
								999,
								1000,
								1001,
								1002,
								1003
							]
						}
					],
					"sources": [
						{
							"fileName": "src/Image/Image.tsx",
							"line": 5,
							"character": 27
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"name": "BaseProps",
							"id": 2
						}
					]
				},
				{
					"id": 1004,
					"name": "Image",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "src/Image/Image.tsx",
							"line": 7,
							"character": 11
						}
					],
					"type": {
						"type": "reference",
						"name": "ForwardRefExoticComponent",
						"typeArguments": [
							{
								"type": "intersection",
								"types": [
									{
										"type": "reference",
										"name": "ImageProps",
										"id": 979
									},
									{
										"type": "reflection",
										"declaration": {
											"id": 1005,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {}
										}
									},
									{
										"type": "reference",
										"name": "RefAttributes",
										"typeArguments": [
											{
												"type": "reference",
												"name": "HTMLImageElement"
											}
										]
									}
								]
							}
						]
					},
					"defaultValue": " React.forwardRef<HTMLImageElement, Attributes<HTMLImageElement, ImageProps>>((props, ref) => {\n  return (\n    <Base { ...props }\n        className=\"Image\"\n        ref={ ref }\n        tag=\"img\" />\n  );\n})"
				}
			],
			"groups": [
				{
					"title": "Interfaces",
					"kind": 256,
					"children": [
						979
					]
				},
				{
					"title": "Variables",
					"kind": 32,
					"children": [
						1004
					]
				}
			],
			"sources": [
				{
					"fileName": "src/Image/Image.tsx",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 1047,
			"name": "\"Input/Input\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "/Users/harry/Projects/personal/preshape/src/Input/Input.tsx",
			"children": [
				{
					"id": 1048,
					"name": "InputProps",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"children": [
						{
							"id": 1064,
							"name": "absolute",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Quick way of absolutely position to common places"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 58,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "fullscreen"
									},
									{
										"type": "stringLiteral",
										"value": "top"
									},
									{
										"type": "stringLiteral",
										"value": "top-left"
									},
									{
										"type": "stringLiteral",
										"value": "top-right"
									},
									{
										"type": "stringLiteral",
										"value": "bottom"
									},
									{
										"type": "stringLiteral",
										"value": "bottom-left"
									},
									{
										"type": "stringLiteral",
										"value": "bottom-right"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.absolute",
								"id": 3
							}
						},
						{
							"id": 1050,
							"name": "align",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Text alignment"
							},
							"sources": [
								{
									"fileName": "src/Text/Text.tsx",
									"line": 32,
									"character": 7
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "start"
									},
									{
										"type": "stringLiteral",
										"value": "middle"
									},
									{
										"type": "stringLiteral",
										"value": "end"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TextProps.align",
								"id": 428
							}
						},
						{
							"id": 1065,
							"name": "backgroundColor",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Background colour to be applied, shades are taken from the current\ntheme."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 70,
									"character": 17
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeColor",
								"id": 30
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.backgroundColor",
								"id": 4
							}
						},
						{
							"id": 1066,
							"name": "borderColor",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Border colour to be applied, shades are taken from the current\ntheme."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 75,
									"character": 13
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeColor",
								"id": 30
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.borderColor",
								"id": 5
							}
						},
						{
							"id": 1067,
							"name": "borderRadius",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Adds styling of a border radius to one of the size multiples."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 79,
									"character": 14
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "x1"
									},
									{
										"type": "stringLiteral",
										"value": "x2"
									},
									{
										"type": "stringLiteral",
										"value": "x3"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.borderRadius",
								"id": 6
							}
						},
						{
							"id": 1068,
							"name": "borderSize",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Thickness of the border to be applied"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 81,
									"character": 12
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "x1"
									},
									{
										"type": "stringLiteral",
										"value": "x2"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.borderSize",
								"id": 7
							}
						},
						{
							"id": 1051,
							"name": "breakOn",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "How the block of text should break onto new lines."
							},
							"sources": [
								{
									"fileName": "src/Text/Text.tsx",
									"line": 34,
									"character": 9
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "all"
									},
									{
										"type": "stringLiteral",
										"value": "none"
									},
									{
										"type": "stringLiteral",
										"value": "word"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TextProps.breakOn",
								"id": 429
							}
						},
						{
							"id": 1069,
							"name": "clickable",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Adds styling to indicate that the element is clickable"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 83,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.clickable",
								"id": 8
							}
						},
						{
							"id": 1070,
							"name": "container",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies relative positioning to contain child elements."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 85,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.container",
								"id": 9
							}
						},
						{
							"id": 1071,
							"name": "display",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies display styling"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 87,
									"character": 9
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "block"
									},
									{
										"type": "stringLiteral",
										"value": "inline-block"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.display",
								"id": 10
							}
						},
						{
							"id": 1052,
							"name": "ellipsis",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Replaces the overflow of text with the ellipsis character"
							},
							"sources": [
								{
									"fileName": "src/Text/Text.tsx",
									"line": 36,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TextProps.ellipsis",
								"id": 430
							}
						},
						{
							"id": 1053,
							"name": "emphasis",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies emphasis styling"
							},
							"sources": [
								{
									"fileName": "src/Text/Text.tsx",
									"line": 38,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TextProps.emphasis",
								"id": 431
							}
						},
						{
							"id": 1072,
							"name": "fixed",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Quick way of absolutely position to common places"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 89,
									"character": 7
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "fullscreen"
									},
									{
										"type": "stringLiteral",
										"value": "top"
									},
									{
										"type": "stringLiteral",
										"value": "top-left"
									},
									{
										"type": "stringLiteral",
										"value": "top-right"
									},
									{
										"type": "stringLiteral",
										"value": "bottom"
									},
									{
										"type": "stringLiteral",
										"value": "bottom-left"
									},
									{
										"type": "stringLiteral",
										"value": "bottom-right"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.fixed",
								"id": 11
							}
						},
						{
							"id": 1054,
							"name": "heading",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies a heading font family style"
							},
							"sources": [
								{
									"fileName": "src/Text/Text.tsx",
									"line": 40,
									"character": 9
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TextProps.heading",
								"id": 432
							}
						},
						{
							"id": 1073,
							"name": "height",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Fixed height applied through inline styling"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 98,
									"character": 8
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.height",
								"id": 12
							}
						},
						{
							"id": 1055,
							"name": "inline",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Text default to block display, this will apply inline display."
							},
							"sources": [
								{
									"fileName": "src/Text/Text.tsx",
									"line": 42,
									"character": 8
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TextProps.inline",
								"id": 433
							}
						},
						{
							"id": 1049,
							"name": "label",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "A label that gives describes what the input is for"
							},
							"sources": [
								{
									"fileName": "src/Input/Input.tsx",
									"line": 9,
									"character": 7
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							}
						},
						{
							"id": 1074,
							"name": "margin",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Margins applied for the global spacing variables"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 100,
									"character": 8
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeSize",
								"id": 31
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.margin",
								"id": 13
							}
						},
						{
							"id": 1075,
							"name": "maxWidth",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Max width applied through inline styling"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 102,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.maxWidth",
								"id": 14
							}
						},
						{
							"id": 1076,
							"name": "minHeight",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Max height applied through inline styling"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 104,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.minHeight",
								"id": 15
							}
						},
						{
							"id": 1077,
							"name": "minWidth",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Min width applied through inline style"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 106,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.minWidth",
								"id": 16
							}
						},
						{
							"id": 1056,
							"name": "monospace",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies a monospace font family style"
							},
							"sources": [
								{
									"fileName": "src/Text/Text.tsx",
									"line": 44,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TextProps.monospace",
								"id": 434
							}
						},
						{
							"id": 1078,
							"name": "overflow",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Overflow"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 108,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "stringLiteral",
										"value": "hidden"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.overflow",
								"id": 17
							}
						},
						{
							"id": 1079,
							"name": "padding",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Padding applied for the global spacing variables"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 110,
									"character": 9
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeSize",
								"id": 31
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.padding",
								"id": 18
							}
						},
						{
							"id": 1080,
							"name": "paddingHorizontal",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Horizontal padding applied for the global spacing variables"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 112,
									"character": 19
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeSize",
								"id": 31
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.paddingHorizontal",
								"id": 19
							}
						},
						{
							"id": 1081,
							"name": "paddingVertical",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Vertical pa?dding applied for the global spacing variables"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 114,
									"character": 17
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeSize",
								"id": 31
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.paddingVertical",
								"id": 20
							}
						},
						{
							"id": 1082,
							"name": "scrollable",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies overflow styling to enable/disable scrolling."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 116,
									"character": 12
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.scrollable",
								"id": 21
							}
						},
						{
							"id": 1057,
							"name": "size",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Size of the text"
							},
							"sources": [
								{
									"fileName": "src/Text/Text.tsx",
									"line": 46,
									"character": 6
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeTextSize",
								"id": 466
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TextProps.size",
								"id": 435
							}
						},
						{
							"id": 1058,
							"name": "strong",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies strong weight styling"
							},
							"sources": [
								{
									"fileName": "src/Text/Text.tsx",
									"line": 48,
									"character": 8
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TextProps.strong",
								"id": 436
							}
						},
						{
							"id": 1059,
							"name": "subscript",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies subscript baseline styling"
							},
							"sources": [
								{
									"fileName": "src/Text/Text.tsx",
									"line": 50,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TextProps.subscript",
								"id": 437
							}
						},
						{
							"id": 1060,
							"name": "superscript",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies superscript baseline styling"
							},
							"sources": [
								{
									"fileName": "src/Text/Text.tsx",
									"line": 52,
									"character": 13
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TextProps.superscript",
								"id": 438
							}
						},
						{
							"id": 1083,
							"name": "tag",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Any valid HTML or SVG element tag.",
								"tags": [
									{
										"tag": "reference",
										"text": "false\n"
									}
								]
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 122,
									"character": 5
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeAllElementTags",
								"id": 34
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.tag",
								"id": 22
							}
						},
						{
							"id": 1084,
							"name": "textColor",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Text colour to be applied."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 126,
									"character": 11
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeColor",
								"id": 30
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.textColor",
								"id": 23
							}
						},
						{
							"id": 1085,
							"name": "theme",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Theme applied to this element and inherited for child elements (until\na descendant theme is applied)."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 131,
									"character": 7
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeTheme",
								"id": 35
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.theme",
								"id": 24
							}
						},
						{
							"id": 1061,
							"name": "titlecase",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies title casing styling"
							},
							"sources": [
								{
									"fileName": "src/Text/Text.tsx",
									"line": 54,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TextProps.titlecase",
								"id": 439
							}
						},
						{
							"id": 1062,
							"name": "uppercase",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies uppercasing styling"
							},
							"sources": [
								{
									"fileName": "src/Text/Text.tsx",
									"line": 56,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TextProps.uppercase",
								"id": 440
							}
						},
						{
							"id": 1063,
							"name": "weak",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies weak weight styling"
							},
							"sources": [
								{
									"fileName": "src/Text/Text.tsx",
									"line": 58,
									"character": 6
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TextProps.weak",
								"id": 441
							}
						},
						{
							"id": 1086,
							"name": "width",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Fixed width applied through inline styling"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 133,
									"character": 7
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.width",
								"id": 25
							}
						},
						{
							"id": 1087,
							"name": "zIndex",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "z-index number for layering elements."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 135,
									"character": 8
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "number"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.zIndex",
								"id": 26
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								1064,
								1050,
								1065,
								1066,
								1067,
								1068,
								1051,
								1069,
								1070,
								1071,
								1052,
								1053,
								1072,
								1054,
								1073,
								1055,
								1049,
								1074,
								1075,
								1076,
								1077,
								1056,
								1078,
								1079,
								1080,
								1081,
								1082,
								1057,
								1058,
								1059,
								1060,
								1083,
								1084,
								1085,
								1061,
								1062,
								1063,
								1086,
								1087
							]
						}
					],
					"sources": [
						{
							"fileName": "src/Input/Input.tsx",
							"line": 7,
							"character": 27
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"name": "TextProps",
							"id": 427
						}
					]
				},
				{
					"id": 1088,
					"name": "Input",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "src/Input/Input.tsx",
							"line": 12,
							"character": 11
						}
					],
					"type": {
						"type": "reference",
						"name": "ForwardRefExoticComponent",
						"typeArguments": [
							{
								"type": "intersection",
								"types": [
									{
										"type": "reference",
										"name": "InputProps",
										"id": 1048
									},
									{
										"type": "reflection",
										"declaration": {
											"id": 1089,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {}
										}
									},
									{
										"type": "reference",
										"name": "RefAttributes",
										"typeArguments": [
											{
												"type": "reference",
												"name": "HTMLInputElement"
											}
										]
									}
								]
							}
						]
					},
					"defaultValue": " React.forwardRef<HTMLInputElement, Attributes<HTMLInputElement, InputProps>>((props, ref) => {\n  const {\n    disabled,\n    label,\n    margin,\n    padding,\n    paddingHorizontal = 'x3',\n    paddingVertical = 'x2',\n    ...rest\n  } = props;\n\n  return (\n    <InputLabel\n        disabled={ disabled }\n        label={ label }\n        margin={ margin }\n        paddingHorizontal={ padding || paddingHorizontal }\n        paddingVertical={ padding || paddingVertical }>\n      <Text { ...rest }\n          className=\"Input\"\n          disabled={ disabled }\n          paddingHorizontal={ padding || paddingHorizontal }\n          paddingVertical={ padding || paddingVertical }\n          ref={ ref }\n          size=\"x1\"\n          strong\n          tag=\"input\" />\n    </InputLabel>\n  );\n})"
				}
			],
			"groups": [
				{
					"title": "Interfaces",
					"kind": 256,
					"children": [
						1048
					]
				},
				{
					"title": "Variables",
					"kind": 32,
					"children": [
						1088
					]
				}
			],
			"sources": [
				{
					"fileName": "src/Input/Input.tsx",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 1006,
			"name": "\"InputLabel/InputLabel\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "/Users/harry/Projects/personal/preshape/src/InputLabel/InputLabel.tsx",
			"children": [
				{
					"id": 1007,
					"name": "InputLabelProps",
					"kind": 256,
					"kindString": "Interface",
					"flags": {},
					"children": [
						{
							"id": 1023,
							"name": "absolute",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Quick way of absolutely position to common places"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 58,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "fullscreen"
									},
									{
										"type": "stringLiteral",
										"value": "top"
									},
									{
										"type": "stringLiteral",
										"value": "top-left"
									},
									{
										"type": "stringLiteral",
										"value": "top-right"
									},
									{
										"type": "stringLiteral",
										"value": "bottom"
									},
									{
										"type": "stringLiteral",
										"value": "bottom-left"
									},
									{
										"type": "stringLiteral",
										"value": "bottom-right"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.absolute",
								"id": 3
							}
						},
						{
							"id": 1013,
							"name": "alignChildren",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Short cut child alignment property for both alignChildrenHorizontal and\nalignChildrenVertical."
							},
							"sources": [
								{
									"fileName": "src/Flex/Flex.tsx",
									"line": 11,
									"character": 15
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "start"
									},
									{
										"type": "stringLiteral",
										"value": "middle"
									},
									{
										"type": "stringLiteral",
										"value": "end"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "FlexProps.alignChildren",
								"id": 240
							}
						},
						{
							"id": 1014,
							"name": "alignChildrenHorizontal",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Horizontal alignment of children flex items."
							},
							"sources": [
								{
									"fileName": "src/Flex/Flex.tsx",
									"line": 13,
									"character": 25
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "start"
									},
									{
										"type": "stringLiteral",
										"value": "middle"
									},
									{
										"type": "stringLiteral",
										"value": "end"
									},
									{
										"type": "stringLiteral",
										"value": "around"
									},
									{
										"type": "stringLiteral",
										"value": "between"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "FlexProps.alignChildrenHorizontal",
								"id": 241
							}
						},
						{
							"id": 1015,
							"name": "alignChildrenVertical",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Vertical alignment of children flex items."
							},
							"sources": [
								{
									"fileName": "src/Flex/Flex.tsx",
									"line": 15,
									"character": 23
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "start"
									},
									{
										"type": "stringLiteral",
										"value": "middle"
									},
									{
										"type": "stringLiteral",
										"value": "end"
									},
									{
										"type": "stringLiteral",
										"value": "around"
									},
									{
										"type": "stringLiteral",
										"value": "between"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "FlexProps.alignChildrenVertical",
								"id": 242
							}
						},
						{
							"id": 1016,
							"name": "alignSelf",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Flex item alignment property (changes with parent direction)."
							},
							"sources": [
								{
									"fileName": "src/Flex/Flex.tsx",
									"line": 17,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "start"
									},
									{
										"type": "stringLiteral",
										"value": "middle"
									},
									{
										"type": "stringLiteral",
										"value": "end"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "FlexProps.alignSelf",
								"id": 243
							}
						},
						{
							"id": 1024,
							"name": "backgroundColor",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Background colour to be applied, shades are taken from the current\ntheme."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 70,
									"character": 17
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeColor",
								"id": 30
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.backgroundColor",
								"id": 4
							}
						},
						{
							"id": 1017,
							"name": "basis",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Initial width to flex from for a child item."
							},
							"sources": [
								{
									"fileName": "src/Flex/Flex.tsx",
									"line": 19,
									"character": 7
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "content"
									},
									{
										"type": "stringLiteral",
										"value": "container"
									},
									{
										"type": "stringLiteral",
										"value": "none"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "FlexProps.basis",
								"id": 244
							}
						},
						{
							"id": 1025,
							"name": "borderColor",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Border colour to be applied, shades are taken from the current\ntheme."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 75,
									"character": 13
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeColor",
								"id": 30
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.borderColor",
								"id": 5
							}
						},
						{
							"id": 1026,
							"name": "borderRadius",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Adds styling of a border radius to one of the size multiples."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 79,
									"character": 14
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "x1"
									},
									{
										"type": "stringLiteral",
										"value": "x2"
									},
									{
										"type": "stringLiteral",
										"value": "x3"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.borderRadius",
								"id": 6
							}
						},
						{
							"id": 1027,
							"name": "borderSize",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Thickness of the border to be applied"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 81,
									"character": 12
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "x1"
									},
									{
										"type": "stringLiteral",
										"value": "x2"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.borderSize",
								"id": 7
							}
						},
						{
							"id": 1008,
							"name": "children",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "src/InputLabel/InputLabel.tsx",
									"line": 8,
									"character": 10
								}
							],
							"type": {
								"type": "reference",
								"name": "React.ReactNode"
							}
						},
						{
							"id": 1028,
							"name": "clickable",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Adds styling to indicate that the element is clickable"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 83,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.clickable",
								"id": 8
							}
						},
						{
							"id": 1029,
							"name": "container",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies relative positioning to contain child elements."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 85,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.container",
								"id": 9
							}
						},
						{
							"id": 1018,
							"name": "direction",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Direction on which way to flex items."
							},
							"sources": [
								{
									"fileName": "src/Flex/Flex.tsx",
									"line": 21,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "horizontal"
									},
									{
										"type": "stringLiteral",
										"value": "vertical"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "FlexProps.direction",
								"id": 245
							}
						},
						{
							"id": 1009,
							"name": "disabled",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/InputLabel/InputLabel.tsx",
									"line": 9,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							}
						},
						{
							"id": 1030,
							"name": "display",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies display styling"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 87,
									"character": 9
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "block"
									},
									{
										"type": "stringLiteral",
										"value": "inline-block"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.display",
								"id": 10
							}
						},
						{
							"id": 1031,
							"name": "fixed",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Quick way of absolutely position to common places"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 89,
									"character": 7
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "fullscreen"
									},
									{
										"type": "stringLiteral",
										"value": "top"
									},
									{
										"type": "stringLiteral",
										"value": "top-left"
									},
									{
										"type": "stringLiteral",
										"value": "top-right"
									},
									{
										"type": "stringLiteral",
										"value": "bottom"
									},
									{
										"type": "stringLiteral",
										"value": "bottom-left"
									},
									{
										"type": "stringLiteral",
										"value": "bottom-right"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.fixed",
								"id": 11
							}
						},
						{
							"id": 1019,
							"name": "gap",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Spacing applied between child flex items, values are global spacing variables."
							},
							"sources": [
								{
									"fileName": "src/Flex/Flex.tsx",
									"line": 23,
									"character": 5
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeSize",
								"id": 31
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "FlexProps.gap",
								"id": 246
							}
						},
						{
							"id": 1020,
							"name": "grow",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Flex item property if it should grow with available space."
							},
							"sources": [
								{
									"fileName": "src/Flex/Flex.tsx",
									"line": 25,
									"character": 6
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "FlexProps.grow",
								"id": 247
							}
						},
						{
							"id": 1032,
							"name": "height",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Fixed height applied through inline styling"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 98,
									"character": 8
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.height",
								"id": 12
							}
						},
						{
							"id": 1010,
							"name": "label",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/InputLabel/InputLabel.tsx",
									"line": 10,
									"character": 7
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							}
						},
						{
							"id": 1033,
							"name": "margin",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Margins applied for the global spacing variables"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 100,
									"character": 8
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeSize",
								"id": 31
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.margin",
								"id": 13
							}
						},
						{
							"id": 1034,
							"name": "maxWidth",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Max width applied through inline styling"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 102,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.maxWidth",
								"id": 14
							}
						},
						{
							"id": 1035,
							"name": "minHeight",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Max height applied through inline styling"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 104,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.minHeight",
								"id": 15
							}
						},
						{
							"id": 1036,
							"name": "minWidth",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Min width applied through inline style"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 106,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.minWidth",
								"id": 16
							}
						},
						{
							"id": 1037,
							"name": "overflow",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Overflow"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 108,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "stringLiteral",
										"value": "hidden"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.overflow",
								"id": 17
							}
						},
						{
							"id": 1038,
							"name": "padding",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Padding applied for the global spacing variables"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 110,
									"character": 9
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeSize",
								"id": 31
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.padding",
								"id": 18
							}
						},
						{
							"id": 1011,
							"name": "paddingHorizontal",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/InputLabel/InputLabel.tsx",
									"line": 11,
									"character": 19
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeSize",
								"id": 31
							},
							"overwrites": {
								"type": "reference",
								"name": "BaseProps.paddingHorizontal",
								"id": 19
							}
						},
						{
							"id": 1012,
							"name": "paddingVertical",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/InputLabel/InputLabel.tsx",
									"line": 12,
									"character": 17
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeSize",
								"id": 31
							},
							"overwrites": {
								"type": "reference",
								"name": "BaseProps.paddingVertical",
								"id": 20
							}
						},
						{
							"id": 1039,
							"name": "scrollable",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies overflow styling to enable/disable scrolling."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 116,
									"character": 12
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.scrollable",
								"id": 21
							}
						},
						{
							"id": 1021,
							"name": "shrink",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Flex item property if it should shrink."
							},
							"sources": [
								{
									"fileName": "src/Flex/Flex.tsx",
									"line": 27,
									"character": 8
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "FlexProps.shrink",
								"id": 248
							}
						},
						{
							"id": 1040,
							"name": "tag",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Any valid HTML or SVG element tag.",
								"tags": [
									{
										"tag": "reference",
										"text": "false\n"
									}
								]
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 122,
									"character": 5
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeAllElementTags",
								"id": 34
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.tag",
								"id": 22
							}
						},
						{
							"id": 1041,
							"name": "textColor",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Text colour to be applied."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 126,
									"character": 11
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeColor",
								"id": 30
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.textColor",
								"id": 23
							}
						},
						{
							"id": 1042,
							"name": "theme",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Theme applied to this element and inherited for child elements (until\na descendant theme is applied)."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 131,
									"character": 7
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeTheme",
								"id": 35
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.theme",
								"id": 24
							}
						},
						{
							"id": 1043,
							"name": "width",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Fixed width applied through inline styling"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 133,
									"character": 7
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.width",
								"id": 25
							}
						},
						{
							"id": 1022,
							"name": "wrap",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Flag to allow flex items to wrap over to new lines"
							},
							"sources": [
								{
									"fileName": "src/Flex/Flex.tsx",
									"line": 29,
									"character": 6
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "FlexProps.wrap",
								"id": 249
							}
						},
						{
							"id": 1044,
							"name": "zIndex",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "z-index number for layering elements."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 135,
									"character": 8
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "number"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.zIndex",
								"id": 26
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								1023,
								1013,
								1014,
								1015,
								1016,
								1024,
								1017,
								1025,
								1026,
								1027,
								1008,
								1028,
								1029,
								1018,
								1009,
								1030,
								1031,
								1019,
								1020,
								1032,
								1010,
								1033,
								1034,
								1035,
								1036,
								1037,
								1038,
								1011,
								1012,
								1039,
								1021,
								1040,
								1041,
								1042,
								1043,
								1022,
								1044
							]
						}
					],
					"sources": [
						{
							"fileName": "src/InputLabel/InputLabel.tsx",
							"line": 7,
							"character": 25
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"name": "FlexProps",
							"id": 239
						}
					]
				},
				{
					"id": 1045,
					"name": "InputLabel",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "src/InputLabel/InputLabel.tsx",
							"line": 15,
							"character": 16
						}
					],
					"type": {
						"type": "reference",
						"name": "ForwardRefExoticComponent",
						"typeArguments": [
							{
								"type": "intersection",
								"types": [
									{
										"type": "reference",
										"name": "InputLabelProps",
										"id": 1007
									},
									{
										"type": "reflection",
										"declaration": {
											"id": 1046,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {}
										}
									},
									{
										"type": "reference",
										"name": "RefAttributes",
										"typeArguments": [
											{
												"type": "reference",
												"name": "HTMLLabelElement"
											}
										]
									}
								]
							}
						]
					},
					"defaultValue": " React.forwardRef<HTMLLabelElement, Attributes<HTMLLabelElement, InputLabelProps>>((props, ref) => {\n  const {\n    children,\n    disabled,\n    label,\n    paddingHorizontal,\n    paddingVertical,\n    ...rest\n  } = props;\n\n  return (\n    <Flex { ...rest }\n        className=\"InputLabel\"\n        direction=\"vertical\"\n        disabled={ disabled }\n        ref={ ref }\n        tag=\"label\">\n      { label && (\n        <Text\n            ellipsis\n            paddingHorizontal={ paddingHorizontal }\n            paddingVertical={ paddingVertical }\n            size=\"x1\"\n            strong>\n          { label }\n        </Text>\n      ) }\n\n      { children }\n    </Flex>\n  );\n})"
				}
			],
			"groups": [
				{
					"title": "Interfaces",
					"kind": 256,
					"children": [
						1007
					]
				},
				{
					"title": "Variables",
					"kind": 32,
					"children": [
						1045
					]
				}
			],
			"sources": [
				{
					"fileName": "src/InputLabel/InputLabel.tsx",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 1090,
			"name": "\"Label/Label\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "/Users/harry/Projects/personal/preshape/src/Label/Label.tsx",
			"children": [
				{
					"id": 1091,
					"name": "LabelProps",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"children": [
						{
							"id": 1106,
							"name": "absolute",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Quick way of absolutely position to common places"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 58,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "fullscreen"
									},
									{
										"type": "stringLiteral",
										"value": "top"
									},
									{
										"type": "stringLiteral",
										"value": "top-left"
									},
									{
										"type": "stringLiteral",
										"value": "top-right"
									},
									{
										"type": "stringLiteral",
										"value": "bottom"
									},
									{
										"type": "stringLiteral",
										"value": "bottom-left"
									},
									{
										"type": "stringLiteral",
										"value": "bottom-right"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.absolute",
								"id": 3
							}
						},
						{
							"id": 1092,
							"name": "align",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Text alignment"
							},
							"sources": [
								{
									"fileName": "src/Text/Text.tsx",
									"line": 32,
									"character": 7
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "start"
									},
									{
										"type": "stringLiteral",
										"value": "middle"
									},
									{
										"type": "stringLiteral",
										"value": "end"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TextProps.align",
								"id": 428
							}
						},
						{
							"id": 1107,
							"name": "backgroundColor",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Background colour to be applied, shades are taken from the current\ntheme."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 70,
									"character": 17
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeColor",
								"id": 30
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.backgroundColor",
								"id": 4
							}
						},
						{
							"id": 1108,
							"name": "borderColor",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Border colour to be applied, shades are taken from the current\ntheme."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 75,
									"character": 13
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeColor",
								"id": 30
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.borderColor",
								"id": 5
							}
						},
						{
							"id": 1109,
							"name": "borderRadius",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Adds styling of a border radius to one of the size multiples."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 79,
									"character": 14
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "x1"
									},
									{
										"type": "stringLiteral",
										"value": "x2"
									},
									{
										"type": "stringLiteral",
										"value": "x3"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.borderRadius",
								"id": 6
							}
						},
						{
							"id": 1110,
							"name": "borderSize",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Thickness of the border to be applied"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 81,
									"character": 12
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "x1"
									},
									{
										"type": "stringLiteral",
										"value": "x2"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.borderSize",
								"id": 7
							}
						},
						{
							"id": 1093,
							"name": "breakOn",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "How the block of text should break onto new lines."
							},
							"sources": [
								{
									"fileName": "src/Text/Text.tsx",
									"line": 34,
									"character": 9
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "all"
									},
									{
										"type": "stringLiteral",
										"value": "none"
									},
									{
										"type": "stringLiteral",
										"value": "word"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TextProps.breakOn",
								"id": 429
							}
						},
						{
							"id": 1111,
							"name": "clickable",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Adds styling to indicate that the element is clickable"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 83,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.clickable",
								"id": 8
							}
						},
						{
							"id": 1112,
							"name": "container",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies relative positioning to contain child elements."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 85,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.container",
								"id": 9
							}
						},
						{
							"id": 1113,
							"name": "display",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies display styling"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 87,
									"character": 9
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "block"
									},
									{
										"type": "stringLiteral",
										"value": "inline-block"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.display",
								"id": 10
							}
						},
						{
							"id": 1094,
							"name": "ellipsis",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Replaces the overflow of text with the ellipsis character"
							},
							"sources": [
								{
									"fileName": "src/Text/Text.tsx",
									"line": 36,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TextProps.ellipsis",
								"id": 430
							}
						},
						{
							"id": 1095,
							"name": "emphasis",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies emphasis styling"
							},
							"sources": [
								{
									"fileName": "src/Text/Text.tsx",
									"line": 38,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TextProps.emphasis",
								"id": 431
							}
						},
						{
							"id": 1114,
							"name": "fixed",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Quick way of absolutely position to common places"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 89,
									"character": 7
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "fullscreen"
									},
									{
										"type": "stringLiteral",
										"value": "top"
									},
									{
										"type": "stringLiteral",
										"value": "top-left"
									},
									{
										"type": "stringLiteral",
										"value": "top-right"
									},
									{
										"type": "stringLiteral",
										"value": "bottom"
									},
									{
										"type": "stringLiteral",
										"value": "bottom-left"
									},
									{
										"type": "stringLiteral",
										"value": "bottom-right"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.fixed",
								"id": 11
							}
						},
						{
							"id": 1096,
							"name": "heading",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies a heading font family style"
							},
							"sources": [
								{
									"fileName": "src/Text/Text.tsx",
									"line": 40,
									"character": 9
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TextProps.heading",
								"id": 432
							}
						},
						{
							"id": 1115,
							"name": "height",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Fixed height applied through inline styling"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 98,
									"character": 8
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.height",
								"id": 12
							}
						},
						{
							"id": 1097,
							"name": "inline",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Text default to block display, this will apply inline display."
							},
							"sources": [
								{
									"fileName": "src/Text/Text.tsx",
									"line": 42,
									"character": 8
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TextProps.inline",
								"id": 433
							}
						},
						{
							"id": 1116,
							"name": "margin",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Margins applied for the global spacing variables"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 100,
									"character": 8
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeSize",
								"id": 31
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.margin",
								"id": 13
							}
						},
						{
							"id": 1117,
							"name": "maxWidth",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Max width applied through inline styling"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 102,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.maxWidth",
								"id": 14
							}
						},
						{
							"id": 1118,
							"name": "minHeight",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Max height applied through inline styling"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 104,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.minHeight",
								"id": 15
							}
						},
						{
							"id": 1119,
							"name": "minWidth",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Min width applied through inline style"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 106,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.minWidth",
								"id": 16
							}
						},
						{
							"id": 1098,
							"name": "monospace",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies a monospace font family style"
							},
							"sources": [
								{
									"fileName": "src/Text/Text.tsx",
									"line": 44,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TextProps.monospace",
								"id": 434
							}
						},
						{
							"id": 1120,
							"name": "overflow",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Overflow"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 108,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "stringLiteral",
										"value": "hidden"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.overflow",
								"id": 17
							}
						},
						{
							"id": 1121,
							"name": "padding",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Padding applied for the global spacing variables"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 110,
									"character": 9
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeSize",
								"id": 31
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.padding",
								"id": 18
							}
						},
						{
							"id": 1122,
							"name": "paddingHorizontal",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Horizontal padding applied for the global spacing variables"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 112,
									"character": 19
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeSize",
								"id": 31
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.paddingHorizontal",
								"id": 19
							}
						},
						{
							"id": 1123,
							"name": "paddingVertical",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Vertical pa?dding applied for the global spacing variables"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 114,
									"character": 17
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeSize",
								"id": 31
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.paddingVertical",
								"id": 20
							}
						},
						{
							"id": 1124,
							"name": "scrollable",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies overflow styling to enable/disable scrolling."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 116,
									"character": 12
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.scrollable",
								"id": 21
							}
						},
						{
							"id": 1099,
							"name": "size",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Size of the text"
							},
							"sources": [
								{
									"fileName": "src/Text/Text.tsx",
									"line": 46,
									"character": 6
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeTextSize",
								"id": 466
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TextProps.size",
								"id": 435
							}
						},
						{
							"id": 1100,
							"name": "strong",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies strong weight styling"
							},
							"sources": [
								{
									"fileName": "src/Text/Text.tsx",
									"line": 48,
									"character": 8
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TextProps.strong",
								"id": 436
							}
						},
						{
							"id": 1101,
							"name": "subscript",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies subscript baseline styling"
							},
							"sources": [
								{
									"fileName": "src/Text/Text.tsx",
									"line": 50,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TextProps.subscript",
								"id": 437
							}
						},
						{
							"id": 1102,
							"name": "superscript",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies superscript baseline styling"
							},
							"sources": [
								{
									"fileName": "src/Text/Text.tsx",
									"line": 52,
									"character": 13
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TextProps.superscript",
								"id": 438
							}
						},
						{
							"id": 1125,
							"name": "tag",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Any valid HTML or SVG element tag.",
								"tags": [
									{
										"tag": "reference",
										"text": "false\n"
									}
								]
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 122,
									"character": 5
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeAllElementTags",
								"id": 34
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.tag",
								"id": 22
							}
						},
						{
							"id": 1126,
							"name": "textColor",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Text colour to be applied."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 126,
									"character": 11
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeColor",
								"id": 30
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.textColor",
								"id": 23
							}
						},
						{
							"id": 1127,
							"name": "theme",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Theme applied to this element and inherited for child elements (until\na descendant theme is applied)."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 131,
									"character": 7
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeTheme",
								"id": 35
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.theme",
								"id": 24
							}
						},
						{
							"id": 1103,
							"name": "titlecase",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies title casing styling"
							},
							"sources": [
								{
									"fileName": "src/Text/Text.tsx",
									"line": 54,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TextProps.titlecase",
								"id": 439
							}
						},
						{
							"id": 1104,
							"name": "uppercase",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies uppercasing styling"
							},
							"sources": [
								{
									"fileName": "src/Text/Text.tsx",
									"line": 56,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TextProps.uppercase",
								"id": 440
							}
						},
						{
							"id": 1105,
							"name": "weak",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies weak weight styling"
							},
							"sources": [
								{
									"fileName": "src/Text/Text.tsx",
									"line": 58,
									"character": 6
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TextProps.weak",
								"id": 441
							}
						},
						{
							"id": 1128,
							"name": "width",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Fixed width applied through inline styling"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 133,
									"character": 7
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.width",
								"id": 25
							}
						},
						{
							"id": 1129,
							"name": "zIndex",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "z-index number for layering elements."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 135,
									"character": 8
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "number"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.zIndex",
								"id": 26
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								1106,
								1092,
								1107,
								1108,
								1109,
								1110,
								1093,
								1111,
								1112,
								1113,
								1094,
								1095,
								1114,
								1096,
								1115,
								1097,
								1116,
								1117,
								1118,
								1119,
								1098,
								1120,
								1121,
								1122,
								1123,
								1124,
								1099,
								1100,
								1101,
								1102,
								1125,
								1126,
								1127,
								1103,
								1104,
								1105,
								1128,
								1129
							]
						}
					],
					"sources": [
						{
							"fileName": "src/Label/Label.tsx",
							"line": 6,
							"character": 27
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"name": "TextProps",
							"id": 427
						}
					]
				},
				{
					"id": 1130,
					"name": "Label",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "src/Label/Label.tsx",
							"line": 8,
							"character": 11
						}
					],
					"type": {
						"type": "reference",
						"name": "ForwardRefExoticComponent",
						"typeArguments": [
							{
								"type": "intersection",
								"types": [
									{
										"type": "reference",
										"name": "LabelProps",
										"id": 1091
									},
									{
										"type": "reflection",
										"declaration": {
											"id": 1131,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {}
										}
									},
									{
										"type": "reference",
										"name": "RefAttributes",
										"typeArguments": [
											{
												"type": "reference",
												"name": "HTMLDivElement"
											}
										]
									}
								]
							}
						]
					},
					"defaultValue": " React.forwardRef<HTMLDivElement, Attributes<HTMLDivElement, LabelProps>>((props, ref) => {\n  const {\n    backgroundColor = 'text-shade-1',\n    textColor = 'background-shade-1',\n    ...rest\n  } = props;\n\n  return (\n    <Text { ...rest }\n        backgroundColor={ backgroundColor }\n        className=\"Label\"\n        ref={ ref }\n        size=\"x1\"\n        strong\n        tag=\"div\"\n        textColor={ textColor } />\n  );\n})"
				}
			],
			"groups": [
				{
					"title": "Interfaces",
					"kind": 256,
					"children": [
						1091
					]
				},
				{
					"title": "Variables",
					"kind": 32,
					"children": [
						1130
					]
				}
			],
			"sources": [
				{
					"fileName": "src/Label/Label.tsx",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 1132,
			"name": "\"Label/Labels\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "/Users/harry/Projects/personal/preshape/src/Label/Labels.tsx",
			"children": [
				{
					"id": 1133,
					"name": "LabelsProps",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"children": [
						{
							"id": 1134,
							"name": "absolute",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Quick way of absolutely position to common places"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 58,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "fullscreen"
									},
									{
										"type": "stringLiteral",
										"value": "top"
									},
									{
										"type": "stringLiteral",
										"value": "top-left"
									},
									{
										"type": "stringLiteral",
										"value": "top-right"
									},
									{
										"type": "stringLiteral",
										"value": "bottom"
									},
									{
										"type": "stringLiteral",
										"value": "bottom-left"
									},
									{
										"type": "stringLiteral",
										"value": "bottom-right"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.absolute",
								"id": 3
							}
						},
						{
							"id": 1135,
							"name": "backgroundColor",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Background colour to be applied, shades are taken from the current\ntheme."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 70,
									"character": 17
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeColor",
								"id": 30
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.backgroundColor",
								"id": 4
							}
						},
						{
							"id": 1136,
							"name": "borderColor",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Border colour to be applied, shades are taken from the current\ntheme."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 75,
									"character": 13
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeColor",
								"id": 30
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.borderColor",
								"id": 5
							}
						},
						{
							"id": 1137,
							"name": "borderRadius",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Adds styling of a border radius to one of the size multiples."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 79,
									"character": 14
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "x1"
									},
									{
										"type": "stringLiteral",
										"value": "x2"
									},
									{
										"type": "stringLiteral",
										"value": "x3"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.borderRadius",
								"id": 6
							}
						},
						{
							"id": 1138,
							"name": "borderSize",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Thickness of the border to be applied"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 81,
									"character": 12
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "x1"
									},
									{
										"type": "stringLiteral",
										"value": "x2"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.borderSize",
								"id": 7
							}
						},
						{
							"id": 1139,
							"name": "clickable",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Adds styling to indicate that the element is clickable"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 83,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.clickable",
								"id": 8
							}
						},
						{
							"id": 1140,
							"name": "container",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies relative positioning to contain child elements."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 85,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.container",
								"id": 9
							}
						},
						{
							"id": 1141,
							"name": "display",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies display styling"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 87,
									"character": 9
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "block"
									},
									{
										"type": "stringLiteral",
										"value": "inline-block"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.display",
								"id": 10
							}
						},
						{
							"id": 1142,
							"name": "fixed",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Quick way of absolutely position to common places"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 89,
									"character": 7
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "fullscreen"
									},
									{
										"type": "stringLiteral",
										"value": "top"
									},
									{
										"type": "stringLiteral",
										"value": "top-left"
									},
									{
										"type": "stringLiteral",
										"value": "top-right"
									},
									{
										"type": "stringLiteral",
										"value": "bottom"
									},
									{
										"type": "stringLiteral",
										"value": "bottom-left"
									},
									{
										"type": "stringLiteral",
										"value": "bottom-right"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.fixed",
								"id": 11
							}
						},
						{
							"id": 1143,
							"name": "height",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Fixed height applied through inline styling"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 98,
									"character": 8
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.height",
								"id": 12
							}
						},
						{
							"id": 1144,
							"name": "margin",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Margins applied for the global spacing variables"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 100,
									"character": 8
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeSize",
								"id": 31
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.margin",
								"id": 13
							}
						},
						{
							"id": 1145,
							"name": "maxWidth",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Max width applied through inline styling"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 102,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.maxWidth",
								"id": 14
							}
						},
						{
							"id": 1146,
							"name": "minHeight",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Max height applied through inline styling"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 104,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.minHeight",
								"id": 15
							}
						},
						{
							"id": 1147,
							"name": "minWidth",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Min width applied through inline style"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 106,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.minWidth",
								"id": 16
							}
						},
						{
							"id": 1148,
							"name": "overflow",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Overflow"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 108,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "stringLiteral",
										"value": "hidden"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.overflow",
								"id": 17
							}
						},
						{
							"id": 1149,
							"name": "padding",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Padding applied for the global spacing variables"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 110,
									"character": 9
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeSize",
								"id": 31
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.padding",
								"id": 18
							}
						},
						{
							"id": 1150,
							"name": "paddingHorizontal",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Horizontal padding applied for the global spacing variables"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 112,
									"character": 19
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeSize",
								"id": 31
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.paddingHorizontal",
								"id": 19
							}
						},
						{
							"id": 1151,
							"name": "paddingVertical",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Vertical pa?dding applied for the global spacing variables"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 114,
									"character": 17
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeSize",
								"id": 31
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.paddingVertical",
								"id": 20
							}
						},
						{
							"id": 1152,
							"name": "scrollable",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies overflow styling to enable/disable scrolling."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 116,
									"character": 12
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.scrollable",
								"id": 21
							}
						},
						{
							"id": 1153,
							"name": "tag",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Any valid HTML or SVG element tag.",
								"tags": [
									{
										"tag": "reference",
										"text": "false\n"
									}
								]
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 122,
									"character": 5
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeAllElementTags",
								"id": 34
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.tag",
								"id": 22
							}
						},
						{
							"id": 1154,
							"name": "textColor",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Text colour to be applied."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 126,
									"character": 11
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeColor",
								"id": 30
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.textColor",
								"id": 23
							}
						},
						{
							"id": 1155,
							"name": "theme",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Theme applied to this element and inherited for child elements (until\na descendant theme is applied)."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 131,
									"character": 7
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeTheme",
								"id": 35
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.theme",
								"id": 24
							}
						},
						{
							"id": 1156,
							"name": "width",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Fixed width applied through inline styling"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 133,
									"character": 7
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.width",
								"id": 25
							}
						},
						{
							"id": 1157,
							"name": "zIndex",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "z-index number for layering elements."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 135,
									"character": 8
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "number"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.zIndex",
								"id": 26
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								1134,
								1135,
								1136,
								1137,
								1138,
								1139,
								1140,
								1141,
								1142,
								1143,
								1144,
								1145,
								1146,
								1147,
								1148,
								1149,
								1150,
								1151,
								1152,
								1153,
								1154,
								1155,
								1156,
								1157
							]
						}
					],
					"sources": [
						{
							"fileName": "src/Label/Labels.tsx",
							"line": 4,
							"character": 28
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"name": "BaseProps",
							"id": 2
						}
					]
				},
				{
					"id": 1158,
					"name": "Labels",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "src/Label/Labels.tsx",
							"line": 6,
							"character": 12
						}
					],
					"type": {
						"type": "reference",
						"name": "ForwardRefExoticComponent",
						"typeArguments": [
							{
								"type": "intersection",
								"types": [
									{
										"type": "reference",
										"name": "LabelsProps",
										"id": 1133
									},
									{
										"type": "reflection",
										"declaration": {
											"id": 1159,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {}
										}
									},
									{
										"type": "reference",
										"name": "RefAttributes",
										"typeArguments": [
											{
												"type": "reference",
												"name": "HTMLElement"
											}
										]
									}
								]
							}
						]
					},
					"defaultValue": " React.forwardRef<HTMLElement, Attributes<HTMLElement, LabelsProps>>((props, ref) => {\n  return (\n    <Base { ...props }\n        className=\"Labels\"\n        ref={ ref } />\n  );\n})"
				}
			],
			"groups": [
				{
					"title": "Interfaces",
					"kind": 256,
					"children": [
						1133
					]
				},
				{
					"title": "Variables",
					"kind": 32,
					"children": [
						1158
					]
				}
			],
			"sources": [
				{
					"fileName": "src/Label/Labels.tsx",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 1160,
			"name": "\"Link/Link\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "/Users/harry/Projects/personal/preshape/src/Link/Link.tsx",
			"children": [
				{
					"id": 1161,
					"name": "LinkProps",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"children": [
						{
							"id": 1182,
							"name": "absolute",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Quick way of absolutely position to common places"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 58,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "fullscreen"
									},
									{
										"type": "stringLiteral",
										"value": "top"
									},
									{
										"type": "stringLiteral",
										"value": "top-left"
									},
									{
										"type": "stringLiteral",
										"value": "top-right"
									},
									{
										"type": "stringLiteral",
										"value": "bottom"
									},
									{
										"type": "stringLiteral",
										"value": "bottom-left"
									},
									{
										"type": "stringLiteral",
										"value": "bottom-right"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.absolute",
								"id": 3
							}
						},
						{
							"id": 1162,
							"name": "active",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Retained active state, indicated with styling"
							},
							"sources": [
								{
									"fileName": "src/Link/Link.tsx",
									"line": 13,
									"character": 8
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							}
						},
						{
							"id": 1168,
							"name": "align",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Text alignment"
							},
							"sources": [
								{
									"fileName": "src/Text/Text.tsx",
									"line": 32,
									"character": 7
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "start"
									},
									{
										"type": "stringLiteral",
										"value": "middle"
									},
									{
										"type": "stringLiteral",
										"value": "end"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TextProps.align",
								"id": 428
							}
						},
						{
							"id": 1183,
							"name": "backgroundColor",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Background colour to be applied, shades are taken from the current\ntheme."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 70,
									"character": 17
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeColor",
								"id": 30
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.backgroundColor",
								"id": 4
							}
						},
						{
							"id": 1184,
							"name": "borderColor",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Border colour to be applied, shades are taken from the current\ntheme."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 75,
									"character": 13
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeColor",
								"id": 30
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.borderColor",
								"id": 5
							}
						},
						{
							"id": 1185,
							"name": "borderRadius",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Adds styling of a border radius to one of the size multiples."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 79,
									"character": 14
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "x1"
									},
									{
										"type": "stringLiteral",
										"value": "x2"
									},
									{
										"type": "stringLiteral",
										"value": "x3"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.borderRadius",
								"id": 6
							}
						},
						{
							"id": 1186,
							"name": "borderSize",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Thickness of the border to be applied"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 81,
									"character": 12
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "x1"
									},
									{
										"type": "stringLiteral",
										"value": "x2"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.borderSize",
								"id": 7
							}
						},
						{
							"id": 1169,
							"name": "breakOn",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "How the block of text should break onto new lines."
							},
							"sources": [
								{
									"fileName": "src/Text/Text.tsx",
									"line": 34,
									"character": 9
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "all"
									},
									{
										"type": "stringLiteral",
										"value": "none"
									},
									{
										"type": "stringLiteral",
										"value": "word"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TextProps.breakOn",
								"id": 429
							}
						},
						{
							"id": 1187,
							"name": "clickable",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Adds styling to indicate that the element is clickable"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 83,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.clickable",
								"id": 8
							}
						},
						{
							"id": 1188,
							"name": "container",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies relative positioning to contain child elements."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 85,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.container",
								"id": 9
							}
						},
						{
							"id": 1189,
							"name": "display",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies display styling"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 87,
									"character": 9
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "block"
									},
									{
										"type": "stringLiteral",
										"value": "inline-block"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.display",
								"id": 10
							}
						},
						{
							"id": 1170,
							"name": "ellipsis",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Replaces the overflow of text with the ellipsis character"
							},
							"sources": [
								{
									"fileName": "src/Text/Text.tsx",
									"line": 36,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TextProps.ellipsis",
								"id": 430
							}
						},
						{
							"id": 1171,
							"name": "emphasis",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies emphasis styling"
							},
							"sources": [
								{
									"fileName": "src/Text/Text.tsx",
									"line": 38,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TextProps.emphasis",
								"id": 431
							}
						},
						{
							"id": 1190,
							"name": "fixed",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Quick way of absolutely position to common places"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 89,
									"character": 7
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "fullscreen"
									},
									{
										"type": "stringLiteral",
										"value": "top"
									},
									{
										"type": "stringLiteral",
										"value": "top-left"
									},
									{
										"type": "stringLiteral",
										"value": "top-right"
									},
									{
										"type": "stringLiteral",
										"value": "bottom"
									},
									{
										"type": "stringLiteral",
										"value": "bottom-left"
									},
									{
										"type": "stringLiteral",
										"value": "bottom-right"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.fixed",
								"id": 11
							}
						},
						{
							"id": 1172,
							"name": "heading",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies a heading font family style"
							},
							"sources": [
								{
									"fileName": "src/Text/Text.tsx",
									"line": 40,
									"character": 9
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TextProps.heading",
								"id": 432
							}
						},
						{
							"id": 1191,
							"name": "height",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Fixed height applied through inline styling"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 98,
									"character": 8
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.height",
								"id": 12
							}
						},
						{
							"id": 1173,
							"name": "inline",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Text default to block display, this will apply inline display."
							},
							"sources": [
								{
									"fileName": "src/Text/Text.tsx",
									"line": 42,
									"character": 8
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TextProps.inline",
								"id": 433
							}
						},
						{
							"id": 1192,
							"name": "margin",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Margins applied for the global spacing variables"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 100,
									"character": 8
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeSize",
								"id": 31
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.margin",
								"id": 13
							}
						},
						{
							"id": 1193,
							"name": "maxWidth",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Max width applied through inline styling"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 102,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.maxWidth",
								"id": 14
							}
						},
						{
							"id": 1194,
							"name": "minHeight",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Max height applied through inline styling"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 104,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.minHeight",
								"id": 15
							}
						},
						{
							"id": 1195,
							"name": "minWidth",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Min width applied through inline style"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 106,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.minWidth",
								"id": 16
							}
						},
						{
							"id": 1174,
							"name": "monospace",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies a monospace font family style"
							},
							"sources": [
								{
									"fileName": "src/Text/Text.tsx",
									"line": 44,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TextProps.monospace",
								"id": 434
							}
						},
						{
							"id": 1163,
							"name": "navigate",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {},
							"sources": [
								{
									"fileName": "src/Link/Link.tsx",
									"line": 15,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "reflection",
										"declaration": {
											"id": 1164,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"signatures": [
												{
													"id": 1165,
													"name": "__call",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								]
							}
						},
						{
							"id": 1196,
							"name": "overflow",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Overflow"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 108,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "stringLiteral",
										"value": "hidden"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.overflow",
								"id": 17
							}
						},
						{
							"id": 1197,
							"name": "padding",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Padding applied for the global spacing variables"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 110,
									"character": 9
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeSize",
								"id": 31
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.padding",
								"id": 18
							}
						},
						{
							"id": 1198,
							"name": "paddingHorizontal",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Horizontal padding applied for the global spacing variables"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 112,
									"character": 19
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeSize",
								"id": 31
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.paddingHorizontal",
								"id": 19
							}
						},
						{
							"id": 1199,
							"name": "paddingVertical",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Vertical pa?dding applied for the global spacing variables"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 114,
									"character": 17
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeSize",
								"id": 31
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.paddingVertical",
								"id": 20
							}
						},
						{
							"id": 1200,
							"name": "scrollable",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies overflow styling to enable/disable scrolling."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 116,
									"character": 12
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.scrollable",
								"id": 21
							}
						},
						{
							"id": 1175,
							"name": "size",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Size of the text"
							},
							"sources": [
								{
									"fileName": "src/Text/Text.tsx",
									"line": 46,
									"character": 6
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeTextSize",
								"id": 466
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TextProps.size",
								"id": 435
							}
						},
						{
							"id": 1176,
							"name": "strong",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies strong weight styling"
							},
							"sources": [
								{
									"fileName": "src/Text/Text.tsx",
									"line": 48,
									"character": 8
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TextProps.strong",
								"id": 436
							}
						},
						{
							"id": 1177,
							"name": "subscript",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies subscript baseline styling"
							},
							"sources": [
								{
									"fileName": "src/Text/Text.tsx",
									"line": 50,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TextProps.subscript",
								"id": 437
							}
						},
						{
							"id": 1178,
							"name": "superscript",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies superscript baseline styling"
							},
							"sources": [
								{
									"fileName": "src/Text/Text.tsx",
									"line": 52,
									"character": 13
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TextProps.superscript",
								"id": 438
							}
						},
						{
							"id": 1201,
							"name": "tag",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Any valid HTML or SVG element tag.",
								"tags": [
									{
										"tag": "reference",
										"text": "false\n"
									}
								]
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 122,
									"character": 5
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeAllElementTags",
								"id": 34
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.tag",
								"id": 22
							}
						},
						{
							"id": 1202,
							"name": "textColor",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Text colour to be applied."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 126,
									"character": 11
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeColor",
								"id": 30
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.textColor",
								"id": 23
							}
						},
						{
							"id": 1203,
							"name": "theme",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Theme applied to this element and inherited for child elements (until\na descendant theme is applied)."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 131,
									"character": 7
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeTheme",
								"id": 35
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.theme",
								"id": 24
							}
						},
						{
							"id": 1179,
							"name": "titlecase",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies title casing styling"
							},
							"sources": [
								{
									"fileName": "src/Text/Text.tsx",
									"line": 54,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TextProps.titlecase",
								"id": 439
							}
						},
						{
							"id": 1166,
							"name": "to",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "React Router \"to\" prop, when applied the Component given to Text\nis that of a RouterLink (from React Router DOM). Otherwise an\nanchor tag is used."
							},
							"sources": [
								{
									"fileName": "src/Link/Link.tsx",
									"line": 21,
									"character": 4
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							}
						},
						{
							"id": 1167,
							"name": "underline",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies and underlines style, perfect for within a block of text"
							},
							"sources": [
								{
									"fileName": "src/Link/Link.tsx",
									"line": 23,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							}
						},
						{
							"id": 1180,
							"name": "uppercase",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies uppercasing styling"
							},
							"sources": [
								{
									"fileName": "src/Text/Text.tsx",
									"line": 56,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TextProps.uppercase",
								"id": 440
							}
						},
						{
							"id": 1181,
							"name": "weak",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies weak weight styling"
							},
							"sources": [
								{
									"fileName": "src/Text/Text.tsx",
									"line": 58,
									"character": 6
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TextProps.weak",
								"id": 441
							}
						},
						{
							"id": 1204,
							"name": "width",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Fixed width applied through inline styling"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 133,
									"character": 7
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.width",
								"id": 25
							}
						},
						{
							"id": 1205,
							"name": "zIndex",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "z-index number for layering elements."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 135,
									"character": 8
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "number"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.zIndex",
								"id": 26
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								1182,
								1162,
								1168,
								1183,
								1184,
								1185,
								1186,
								1169,
								1187,
								1188,
								1189,
								1170,
								1171,
								1190,
								1172,
								1191,
								1173,
								1192,
								1193,
								1194,
								1195,
								1174,
								1163,
								1196,
								1197,
								1198,
								1199,
								1200,
								1175,
								1176,
								1177,
								1178,
								1201,
								1202,
								1203,
								1179,
								1166,
								1167,
								1180,
								1181,
								1204,
								1205
							]
						}
					],
					"sources": [
						{
							"fileName": "src/Link/Link.tsx",
							"line": 11,
							"character": 26
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"name": "TextProps",
							"id": 427
						}
					]
				},
				{
					"id": 1209,
					"name": "Link",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "src/Link/Link.tsx",
							"line": 26,
							"character": 10
						}
					],
					"type": {
						"type": "reference",
						"name": "ForwardRefExoticComponent",
						"typeArguments": [
							{
								"type": "intersection",
								"types": [
									{
										"type": "reference",
										"name": "LinkProps",
										"id": 1161
									},
									{
										"type": "reflection",
										"declaration": {
											"id": 1210,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {}
										}
									},
									{
										"type": "reference",
										"name": "RefAttributes",
										"typeArguments": [
											{
												"type": "reference",
												"name": "HTMLAnchorElement"
											}
										]
									}
								]
							}
						]
					},
					"defaultValue": " React.forwardRef<HTMLAnchorElement, Attributes<HTMLAnchorElement, LinkProps>>((props, ref) => {\n  const { active, navigate, target, to, underline, ...rest } = props;\n  const classes = classnames('Link', {\n    'Link--active': active,\n    'Link--underline': underline,\n  });\n\n  if (to) {\n    return (\n      <RouterLink { ...props }\n          component={ Link }\n          to={ to } />\n    );\n  }\n\n  if (navigate) {\n    rest.onClick = (event: React.MouseEvent<HTMLAnchorElement>) => {\n      if (props.onClick) {\n        props.onClick(event);\n      }\n\n      // https://github.com/ReactTraining/react-router/blob/master/packages/react-router-dom/modules/Link.js\n      if (\n        !event.defaultPrevented && // onClick prevented default\n        event.button === 0 && // ignore everything but left clicks\n        (!target || target === '_self') && // let browser handle \"target=_blank\" etc.\n        !isModifiedEvent(event) // ignore clicks with modifier keys\n      ) {\n        event.preventDefault();\n        navigate();\n      }\n    };\n  }\n\n  return (\n    <Text { ...rest }\n        className={ classes }\n        ref={ ref }\n        tag=\"a\"\n        target={ target } />\n  );\n})"
				},
				{
					"id": 1206,
					"name": "isModifiedEvent",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isConst": true
					},
					"signatures": [
						{
							"id": 1207,
							"name": "isModifiedEvent",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 1208,
									"name": "event",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "MouseEvent"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						}
					],
					"sources": [
						{
							"fileName": "src/Link/Link.tsx",
							"line": 8,
							"character": 21
						}
					]
				}
			],
			"groups": [
				{
					"title": "Interfaces",
					"kind": 256,
					"children": [
						1161
					]
				},
				{
					"title": "Variables",
					"kind": 32,
					"children": [
						1209
					]
				},
				{
					"title": "Functions",
					"kind": 64,
					"children": [
						1206
					]
				}
			],
			"sources": [
				{
					"fileName": "src/Link/Link.tsx",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 1211,
			"name": "\"List/List\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "/Users/harry/Projects/personal/preshape/src/List/List.tsx",
			"children": [
				{
					"id": 1212,
					"name": "ListProps",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"children": [
						{
							"id": 1223,
							"name": "absolute",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Quick way of absolutely position to common places"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 58,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "fullscreen"
									},
									{
										"type": "stringLiteral",
										"value": "top"
									},
									{
										"type": "stringLiteral",
										"value": "top-left"
									},
									{
										"type": "stringLiteral",
										"value": "top-right"
									},
									{
										"type": "stringLiteral",
										"value": "bottom"
									},
									{
										"type": "stringLiteral",
										"value": "bottom-left"
									},
									{
										"type": "stringLiteral",
										"value": "bottom-right"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.absolute",
								"id": 3
							}
						},
						{
							"id": 1214,
							"name": "alignChildren",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Short cut child alignment property for both alignChildrenHorizontal and\nalignChildrenVertical."
							},
							"sources": [
								{
									"fileName": "src/Flex/Flex.tsx",
									"line": 11,
									"character": 15
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "start"
									},
									{
										"type": "stringLiteral",
										"value": "middle"
									},
									{
										"type": "stringLiteral",
										"value": "end"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "FlexProps.alignChildren",
								"id": 240
							}
						},
						{
							"id": 1215,
							"name": "alignChildrenHorizontal",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Horizontal alignment of children flex items."
							},
							"sources": [
								{
									"fileName": "src/Flex/Flex.tsx",
									"line": 13,
									"character": 25
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "start"
									},
									{
										"type": "stringLiteral",
										"value": "middle"
									},
									{
										"type": "stringLiteral",
										"value": "end"
									},
									{
										"type": "stringLiteral",
										"value": "around"
									},
									{
										"type": "stringLiteral",
										"value": "between"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "FlexProps.alignChildrenHorizontal",
								"id": 241
							}
						},
						{
							"id": 1216,
							"name": "alignChildrenVertical",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Vertical alignment of children flex items."
							},
							"sources": [
								{
									"fileName": "src/Flex/Flex.tsx",
									"line": 15,
									"character": 23
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "start"
									},
									{
										"type": "stringLiteral",
										"value": "middle"
									},
									{
										"type": "stringLiteral",
										"value": "end"
									},
									{
										"type": "stringLiteral",
										"value": "around"
									},
									{
										"type": "stringLiteral",
										"value": "between"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "FlexProps.alignChildrenVertical",
								"id": 242
							}
						},
						{
							"id": 1217,
							"name": "alignSelf",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Flex item alignment property (changes with parent direction)."
							},
							"sources": [
								{
									"fileName": "src/Flex/Flex.tsx",
									"line": 17,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "start"
									},
									{
										"type": "stringLiteral",
										"value": "middle"
									},
									{
										"type": "stringLiteral",
										"value": "end"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "FlexProps.alignSelf",
								"id": 243
							}
						},
						{
							"id": 1224,
							"name": "backgroundColor",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Background colour to be applied, shades are taken from the current\ntheme."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 70,
									"character": 17
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeColor",
								"id": 30
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.backgroundColor",
								"id": 4
							}
						},
						{
							"id": 1218,
							"name": "basis",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Initial width to flex from for a child item."
							},
							"sources": [
								{
									"fileName": "src/Flex/Flex.tsx",
									"line": 19,
									"character": 7
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "content"
									},
									{
										"type": "stringLiteral",
										"value": "container"
									},
									{
										"type": "stringLiteral",
										"value": "none"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "FlexProps.basis",
								"id": 244
							}
						},
						{
							"id": 1225,
							"name": "borderColor",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Border colour to be applied, shades are taken from the current\ntheme."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 75,
									"character": 13
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeColor",
								"id": 30
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.borderColor",
								"id": 5
							}
						},
						{
							"id": 1226,
							"name": "borderRadius",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Adds styling of a border radius to one of the size multiples."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 79,
									"character": 14
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "x1"
									},
									{
										"type": "stringLiteral",
										"value": "x2"
									},
									{
										"type": "stringLiteral",
										"value": "x3"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.borderRadius",
								"id": 6
							}
						},
						{
							"id": 1227,
							"name": "borderSize",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Thickness of the border to be applied"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 81,
									"character": 12
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "x1"
									},
									{
										"type": "stringLiteral",
										"value": "x2"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.borderSize",
								"id": 7
							}
						},
						{
							"id": 1228,
							"name": "clickable",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Adds styling to indicate that the element is clickable"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 83,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.clickable",
								"id": 8
							}
						},
						{
							"id": 1229,
							"name": "container",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies relative positioning to contain child elements."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 85,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.container",
								"id": 9
							}
						},
						{
							"id": 1219,
							"name": "direction",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Direction on which way to flex items."
							},
							"sources": [
								{
									"fileName": "src/Flex/Flex.tsx",
									"line": 21,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "horizontal"
									},
									{
										"type": "stringLiteral",
										"value": "vertical"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "FlexProps.direction",
								"id": 245
							}
						},
						{
							"id": 1230,
							"name": "display",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies display styling"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 87,
									"character": 9
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "block"
									},
									{
										"type": "stringLiteral",
										"value": "inline-block"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.display",
								"id": 10
							}
						},
						{
							"id": 1231,
							"name": "fixed",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Quick way of absolutely position to common places"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 89,
									"character": 7
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "fullscreen"
									},
									{
										"type": "stringLiteral",
										"value": "top"
									},
									{
										"type": "stringLiteral",
										"value": "top-left"
									},
									{
										"type": "stringLiteral",
										"value": "top-right"
									},
									{
										"type": "stringLiteral",
										"value": "bottom"
									},
									{
										"type": "stringLiteral",
										"value": "bottom-left"
									},
									{
										"type": "stringLiteral",
										"value": "bottom-right"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.fixed",
								"id": 11
							}
						},
						{
							"id": 1213,
							"name": "gap",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Spacing applied between child ListItems, values are global spacing variables.",
								"tags": [
									{
										"tag": "default",
										"text": "\"x1\"\n"
									}
								]
							},
							"sources": [
								{
									"fileName": "src/List/List.tsx",
									"line": 13,
									"character": 5
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeSize",
								"id": 31
							},
							"overwrites": {
								"type": "reference",
								"name": "FlexProps.gap",
								"id": 246
							}
						},
						{
							"id": 1220,
							"name": "grow",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Flex item property if it should grow with available space."
							},
							"sources": [
								{
									"fileName": "src/Flex/Flex.tsx",
									"line": 25,
									"character": 6
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "FlexProps.grow",
								"id": 247
							}
						},
						{
							"id": 1232,
							"name": "height",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Fixed height applied through inline styling"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 98,
									"character": 8
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.height",
								"id": 12
							}
						},
						{
							"id": 1233,
							"name": "margin",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Margins applied for the global spacing variables"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 100,
									"character": 8
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeSize",
								"id": 31
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.margin",
								"id": 13
							}
						},
						{
							"id": 1234,
							"name": "maxWidth",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Max width applied through inline styling"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 102,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.maxWidth",
								"id": 14
							}
						},
						{
							"id": 1235,
							"name": "minHeight",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Max height applied through inline styling"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 104,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.minHeight",
								"id": 15
							}
						},
						{
							"id": 1236,
							"name": "minWidth",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Min width applied through inline style"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 106,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.minWidth",
								"id": 16
							}
						},
						{
							"id": 1237,
							"name": "overflow",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Overflow"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 108,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "stringLiteral",
										"value": "hidden"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.overflow",
								"id": 17
							}
						},
						{
							"id": 1238,
							"name": "padding",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Padding applied for the global spacing variables"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 110,
									"character": 9
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeSize",
								"id": 31
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.padding",
								"id": 18
							}
						},
						{
							"id": 1239,
							"name": "paddingHorizontal",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Horizontal padding applied for the global spacing variables"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 112,
									"character": 19
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeSize",
								"id": 31
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.paddingHorizontal",
								"id": 19
							}
						},
						{
							"id": 1240,
							"name": "paddingVertical",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Vertical pa?dding applied for the global spacing variables"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 114,
									"character": 17
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeSize",
								"id": 31
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.paddingVertical",
								"id": 20
							}
						},
						{
							"id": 1241,
							"name": "scrollable",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies overflow styling to enable/disable scrolling."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 116,
									"character": 12
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.scrollable",
								"id": 21
							}
						},
						{
							"id": 1221,
							"name": "shrink",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Flex item property if it should shrink."
							},
							"sources": [
								{
									"fileName": "src/Flex/Flex.tsx",
									"line": 27,
									"character": 8
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "FlexProps.shrink",
								"id": 248
							}
						},
						{
							"id": 1242,
							"name": "tag",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Any valid HTML or SVG element tag.",
								"tags": [
									{
										"tag": "reference",
										"text": "false\n"
									}
								]
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 122,
									"character": 5
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeAllElementTags",
								"id": 34
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.tag",
								"id": 22
							}
						},
						{
							"id": 1243,
							"name": "textColor",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Text colour to be applied."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 126,
									"character": 11
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeColor",
								"id": 30
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.textColor",
								"id": 23
							}
						},
						{
							"id": 1244,
							"name": "theme",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Theme applied to this element and inherited for child elements (until\na descendant theme is applied)."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 131,
									"character": 7
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeTheme",
								"id": 35
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.theme",
								"id": 24
							}
						},
						{
							"id": 1245,
							"name": "width",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Fixed width applied through inline styling"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 133,
									"character": 7
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.width",
								"id": 25
							}
						},
						{
							"id": 1222,
							"name": "wrap",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Flag to allow flex items to wrap over to new lines"
							},
							"sources": [
								{
									"fileName": "src/Flex/Flex.tsx",
									"line": 29,
									"character": 6
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "FlexProps.wrap",
								"id": 249
							}
						},
						{
							"id": 1246,
							"name": "zIndex",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "z-index number for layering elements."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 135,
									"character": 8
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "number"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.zIndex",
								"id": 26
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								1223,
								1214,
								1215,
								1216,
								1217,
								1224,
								1218,
								1225,
								1226,
								1227,
								1228,
								1229,
								1219,
								1230,
								1231,
								1213,
								1220,
								1232,
								1233,
								1234,
								1235,
								1236,
								1237,
								1238,
								1239,
								1240,
								1241,
								1221,
								1242,
								1243,
								1244,
								1245,
								1222,
								1246
							]
						}
					],
					"sources": [
						{
							"fileName": "src/List/List.tsx",
							"line": 7,
							"character": 26
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"name": "FlexProps",
							"id": 239
						}
					],
					"extendedBy": [
						{
							"type": "reference",
							"name": "ThemeSwitcherProps",
							"id": 1915
						}
					]
				},
				{
					"id": 1247,
					"name": "List",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "src/List/List.tsx",
							"line": 16,
							"character": 10
						}
					],
					"type": {
						"type": "reference",
						"name": "ForwardRefExoticComponent",
						"typeArguments": [
							{
								"type": "intersection",
								"types": [
									{
										"type": "reference",
										"name": "ListProps",
										"id": 1212
									},
									{
										"type": "reflection",
										"declaration": {
											"id": 1248,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {}
										}
									},
									{
										"type": "reference",
										"name": "RefAttributes",
										"typeArguments": [
											{
												"type": "reference",
												"name": "HTMLUListElement"
											}
										]
									}
								]
							}
						]
					},
					"defaultValue": " React.forwardRef<HTMLUListElement, Attributes<HTMLUListElement, ListProps>>((props, ref) => {\n  const { gap = 'x1', ...rest } = props;\n  const classes = classnames('List', `List--${gap}`);\n\n  return (\n    <Flex { ...rest }\n        alignChildrenVertical=\"middle\"\n        className={ classes }\n        direction=\"horizontal\"\n        gap={ gap }\n        ref={ ref }\n        tag=\"ul\"\n        wrap />\n  );\n})"
				}
			],
			"groups": [
				{
					"title": "Interfaces",
					"kind": 256,
					"children": [
						1212
					]
				},
				{
					"title": "Variables",
					"kind": 32,
					"children": [
						1247
					]
				}
			],
			"sources": [
				{
					"fileName": "src/List/List.tsx",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 1249,
			"name": "\"List/ListItem\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "/Users/harry/Projects/personal/preshape/src/List/ListItem.tsx",
			"children": [
				{
					"id": 1250,
					"name": "ListItemProps",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"children": [
						{
							"id": 1262,
							"name": "absolute",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Quick way of absolutely position to common places"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 58,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "fullscreen"
									},
									{
										"type": "stringLiteral",
										"value": "top"
									},
									{
										"type": "stringLiteral",
										"value": "top-left"
									},
									{
										"type": "stringLiteral",
										"value": "top-right"
									},
									{
										"type": "stringLiteral",
										"value": "bottom"
									},
									{
										"type": "stringLiteral",
										"value": "bottom-left"
									},
									{
										"type": "stringLiteral",
										"value": "bottom-right"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.absolute",
								"id": 3
							}
						},
						{
							"id": 1252,
							"name": "alignChildren",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Short cut child alignment property for both alignChildrenHorizontal and\nalignChildrenVertical."
							},
							"sources": [
								{
									"fileName": "src/Flex/Flex.tsx",
									"line": 11,
									"character": 15
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "start"
									},
									{
										"type": "stringLiteral",
										"value": "middle"
									},
									{
										"type": "stringLiteral",
										"value": "end"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "FlexProps.alignChildren",
								"id": 240
							}
						},
						{
							"id": 1253,
							"name": "alignChildrenHorizontal",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Horizontal alignment of children flex items."
							},
							"sources": [
								{
									"fileName": "src/Flex/Flex.tsx",
									"line": 13,
									"character": 25
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "start"
									},
									{
										"type": "stringLiteral",
										"value": "middle"
									},
									{
										"type": "stringLiteral",
										"value": "end"
									},
									{
										"type": "stringLiteral",
										"value": "around"
									},
									{
										"type": "stringLiteral",
										"value": "between"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "FlexProps.alignChildrenHorizontal",
								"id": 241
							}
						},
						{
							"id": 1254,
							"name": "alignChildrenVertical",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Vertical alignment of children flex items."
							},
							"sources": [
								{
									"fileName": "src/Flex/Flex.tsx",
									"line": 15,
									"character": 23
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "start"
									},
									{
										"type": "stringLiteral",
										"value": "middle"
									},
									{
										"type": "stringLiteral",
										"value": "end"
									},
									{
										"type": "stringLiteral",
										"value": "around"
									},
									{
										"type": "stringLiteral",
										"value": "between"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "FlexProps.alignChildrenVertical",
								"id": 242
							}
						},
						{
							"id": 1255,
							"name": "alignSelf",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Flex item alignment property (changes with parent direction)."
							},
							"sources": [
								{
									"fileName": "src/Flex/Flex.tsx",
									"line": 17,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "start"
									},
									{
										"type": "stringLiteral",
										"value": "middle"
									},
									{
										"type": "stringLiteral",
										"value": "end"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "FlexProps.alignSelf",
								"id": 243
							}
						},
						{
							"id": 1263,
							"name": "backgroundColor",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Background colour to be applied, shades are taken from the current\ntheme."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 70,
									"character": 17
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeColor",
								"id": 30
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.backgroundColor",
								"id": 4
							}
						},
						{
							"id": 1256,
							"name": "basis",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Initial width to flex from for a child item."
							},
							"sources": [
								{
									"fileName": "src/Flex/Flex.tsx",
									"line": 19,
									"character": 7
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "content"
									},
									{
										"type": "stringLiteral",
										"value": "container"
									},
									{
										"type": "stringLiteral",
										"value": "none"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "FlexProps.basis",
								"id": 244
							}
						},
						{
							"id": 1264,
							"name": "borderColor",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Border colour to be applied, shades are taken from the current\ntheme."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 75,
									"character": 13
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeColor",
								"id": 30
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.borderColor",
								"id": 5
							}
						},
						{
							"id": 1265,
							"name": "borderRadius",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Adds styling of a border radius to one of the size multiples."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 79,
									"character": 14
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "x1"
									},
									{
										"type": "stringLiteral",
										"value": "x2"
									},
									{
										"type": "stringLiteral",
										"value": "x3"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.borderRadius",
								"id": 6
							}
						},
						{
							"id": 1266,
							"name": "borderSize",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Thickness of the border to be applied"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 81,
									"character": 12
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "x1"
									},
									{
										"type": "stringLiteral",
										"value": "x2"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.borderSize",
								"id": 7
							}
						},
						{
							"id": 1267,
							"name": "clickable",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Adds styling to indicate that the element is clickable"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 83,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.clickable",
								"id": 8
							}
						},
						{
							"id": 1268,
							"name": "container",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies relative positioning to contain child elements."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 85,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.container",
								"id": 9
							}
						},
						{
							"id": 1257,
							"name": "direction",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Direction on which way to flex items."
							},
							"sources": [
								{
									"fileName": "src/Flex/Flex.tsx",
									"line": 21,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "horizontal"
									},
									{
										"type": "stringLiteral",
										"value": "vertical"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "FlexProps.direction",
								"id": 245
							}
						},
						{
							"id": 1269,
							"name": "display",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies display styling"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 87,
									"character": 9
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "block"
									},
									{
										"type": "stringLiteral",
										"value": "inline-block"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.display",
								"id": 10
							}
						},
						{
							"id": 1270,
							"name": "fixed",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Quick way of absolutely position to common places"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 89,
									"character": 7
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "fullscreen"
									},
									{
										"type": "stringLiteral",
										"value": "top"
									},
									{
										"type": "stringLiteral",
										"value": "top-left"
									},
									{
										"type": "stringLiteral",
										"value": "top-right"
									},
									{
										"type": "stringLiteral",
										"value": "bottom"
									},
									{
										"type": "stringLiteral",
										"value": "bottom-left"
									},
									{
										"type": "stringLiteral",
										"value": "bottom-right"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.fixed",
								"id": 11
							}
						},
						{
							"id": 1258,
							"name": "gap",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Spacing applied between child flex items, values are global spacing variables."
							},
							"sources": [
								{
									"fileName": "src/Flex/Flex.tsx",
									"line": 23,
									"character": 5
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeSize",
								"id": 31
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "FlexProps.gap",
								"id": 246
							}
						},
						{
							"id": 1259,
							"name": "grow",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Flex item property if it should grow with available space."
							},
							"sources": [
								{
									"fileName": "src/Flex/Flex.tsx",
									"line": 25,
									"character": 6
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "FlexProps.grow",
								"id": 247
							}
						},
						{
							"id": 1271,
							"name": "height",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Fixed height applied through inline styling"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 98,
									"character": 8
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.height",
								"id": 12
							}
						},
						{
							"id": 1272,
							"name": "margin",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Margins applied for the global spacing variables"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 100,
									"character": 8
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeSize",
								"id": 31
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.margin",
								"id": 13
							}
						},
						{
							"id": 1273,
							"name": "maxWidth",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Max width applied through inline styling"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 102,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.maxWidth",
								"id": 14
							}
						},
						{
							"id": 1274,
							"name": "minHeight",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Max height applied through inline styling"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 104,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.minHeight",
								"id": 15
							}
						},
						{
							"id": 1275,
							"name": "minWidth",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Min width applied through inline style"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 106,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.minWidth",
								"id": 16
							}
						},
						{
							"id": 1276,
							"name": "overflow",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Overflow"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 108,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "stringLiteral",
										"value": "hidden"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.overflow",
								"id": 17
							}
						},
						{
							"id": 1277,
							"name": "padding",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Padding applied for the global spacing variables"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 110,
									"character": 9
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeSize",
								"id": 31
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.padding",
								"id": 18
							}
						},
						{
							"id": 1278,
							"name": "paddingHorizontal",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Horizontal padding applied for the global spacing variables"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 112,
									"character": 19
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeSize",
								"id": 31
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.paddingHorizontal",
								"id": 19
							}
						},
						{
							"id": 1279,
							"name": "paddingVertical",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Vertical pa?dding applied for the global spacing variables"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 114,
									"character": 17
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeSize",
								"id": 31
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.paddingVertical",
								"id": 20
							}
						},
						{
							"id": 1280,
							"name": "scrollable",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies overflow styling to enable/disable scrolling."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 116,
									"character": 12
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.scrollable",
								"id": 21
							}
						},
						{
							"id": 1251,
							"name": "separator",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Seperating string.",
								"tags": [
									{
										"tag": "default",
										"text": "\"/\"\n"
									}
								]
							},
							"sources": [
								{
									"fileName": "src/List/ListItem.tsx",
									"line": 11,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							}
						},
						{
							"id": 1260,
							"name": "shrink",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Flex item property if it should shrink."
							},
							"sources": [
								{
									"fileName": "src/Flex/Flex.tsx",
									"line": 27,
									"character": 8
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "FlexProps.shrink",
								"id": 248
							}
						},
						{
							"id": 1281,
							"name": "tag",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Any valid HTML or SVG element tag.",
								"tags": [
									{
										"tag": "reference",
										"text": "false\n"
									}
								]
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 122,
									"character": 5
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeAllElementTags",
								"id": 34
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.tag",
								"id": 22
							}
						},
						{
							"id": 1282,
							"name": "textColor",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Text colour to be applied."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 126,
									"character": 11
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeColor",
								"id": 30
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.textColor",
								"id": 23
							}
						},
						{
							"id": 1283,
							"name": "theme",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Theme applied to this element and inherited for child elements (until\na descendant theme is applied)."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 131,
									"character": 7
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeTheme",
								"id": 35
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.theme",
								"id": 24
							}
						},
						{
							"id": 1284,
							"name": "width",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Fixed width applied through inline styling"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 133,
									"character": 7
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.width",
								"id": 25
							}
						},
						{
							"id": 1261,
							"name": "wrap",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Flag to allow flex items to wrap over to new lines"
							},
							"sources": [
								{
									"fileName": "src/Flex/Flex.tsx",
									"line": 29,
									"character": 6
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "FlexProps.wrap",
								"id": 249
							}
						},
						{
							"id": 1285,
							"name": "zIndex",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "z-index number for layering elements."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 135,
									"character": 8
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "number"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.zIndex",
								"id": 26
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								1262,
								1252,
								1253,
								1254,
								1255,
								1263,
								1256,
								1264,
								1265,
								1266,
								1267,
								1268,
								1257,
								1269,
								1270,
								1258,
								1259,
								1271,
								1272,
								1273,
								1274,
								1275,
								1276,
								1277,
								1278,
								1279,
								1280,
								1251,
								1260,
								1281,
								1282,
								1283,
								1284,
								1261,
								1285
							]
						}
					],
					"sources": [
						{
							"fileName": "src/List/ListItem.tsx",
							"line": 5,
							"character": 30
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"name": "FlexProps",
							"id": 239
						}
					]
				},
				{
					"id": 1286,
					"name": "ListItem",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "src/List/ListItem.tsx",
							"line": 14,
							"character": 14
						}
					],
					"type": {
						"type": "reference",
						"name": "ForwardRefExoticComponent",
						"typeArguments": [
							{
								"type": "intersection",
								"types": [
									{
										"type": "reference",
										"name": "ListItemProps",
										"id": 1250
									},
									{
										"type": "reflection",
										"declaration": {
											"id": 1287,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {}
										}
									},
									{
										"type": "reference",
										"name": "RefAttributes",
										"typeArguments": [
											{
												"type": "reference",
												"name": "HTMLLIElement"
											}
										]
									}
								]
							}
						]
					},
					"defaultValue": " React.forwardRef<HTMLLIElement, Attributes<HTMLLIElement, ListItemProps>>((props, ref) => {\n  const { children, separator = '/', ...rest } = props;\n\n  return (\n    <Flex { ...rest }\n        alignChildrenVertical=\"middle\"\n        className=\"ListItem\"\n        data-separator={ separator }\n        direction=\"horizontal\"\n        ref={ ref }\n        tag=\"li\">\n      <Flex>{ children }</Flex>\n    </Flex>\n  );\n})"
				}
			],
			"groups": [
				{
					"title": "Interfaces",
					"kind": 256,
					"children": [
						1250
					]
				},
				{
					"title": "Variables",
					"kind": 32,
					"children": [
						1286
					]
				}
			],
			"sources": [
				{
					"fileName": "src/List/ListItem.tsx",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 1364,
			"name": "\"Placement/Placement\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "/Users/harry/Projects/personal/preshape/src/Placement/Placement.tsx",
			"children": [
				{
					"id": 1365,
					"name": "PlacementProps",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"children": [
						{
							"id": 1373,
							"name": "absolute",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Quick way of absolutely position to common places"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 58,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "fullscreen"
									},
									{
										"type": "stringLiteral",
										"value": "top"
									},
									{
										"type": "stringLiteral",
										"value": "top-left"
									},
									{
										"type": "stringLiteral",
										"value": "top-right"
									},
									{
										"type": "stringLiteral",
										"value": "bottom"
									},
									{
										"type": "stringLiteral",
										"value": "bottom-left"
									},
									{
										"type": "stringLiteral",
										"value": "bottom-right"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.absolute",
								"id": 3
							}
						},
						{
							"id": 1374,
							"name": "backgroundColor",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Background colour to be applied, shades are taken from the current\ntheme."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 70,
									"character": 17
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeColor",
								"id": 30
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.backgroundColor",
								"id": 4
							}
						},
						{
							"id": 1375,
							"name": "borderColor",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Border colour to be applied, shades are taken from the current\ntheme."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 75,
									"character": 13
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeColor",
								"id": 30
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.borderColor",
								"id": 5
							}
						},
						{
							"id": 1376,
							"name": "borderRadius",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Adds styling of a border radius to one of the size multiples."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 79,
									"character": 14
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "x1"
									},
									{
										"type": "stringLiteral",
										"value": "x2"
									},
									{
										"type": "stringLiteral",
										"value": "x3"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.borderRadius",
								"id": 6
							}
						},
						{
							"id": 1377,
							"name": "borderSize",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Thickness of the border to be applied"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 81,
									"character": 12
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "x1"
									},
									{
										"type": "stringLiteral",
										"value": "x2"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.borderSize",
								"id": 7
							}
						},
						{
							"id": 1378,
							"name": "clickable",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Adds styling to indicate that the element is clickable"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 83,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.clickable",
								"id": 8
							}
						},
						{
							"id": 1379,
							"name": "container",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies relative positioning to contain child elements."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 85,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.container",
								"id": 9
							}
						},
						{
							"id": 1380,
							"name": "display",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies display styling"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 87,
									"character": 9
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "block"
									},
									{
										"type": "stringLiteral",
										"value": "inline-block"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.display",
								"id": 10
							}
						},
						{
							"id": 1381,
							"name": "fixed",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Quick way of absolutely position to common places"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 89,
									"character": 7
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "fullscreen"
									},
									{
										"type": "stringLiteral",
										"value": "top"
									},
									{
										"type": "stringLiteral",
										"value": "top-left"
									},
									{
										"type": "stringLiteral",
										"value": "top-right"
									},
									{
										"type": "stringLiteral",
										"value": "bottom"
									},
									{
										"type": "stringLiteral",
										"value": "bottom-left"
									},
									{
										"type": "stringLiteral",
										"value": "bottom-right"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.fixed",
								"id": 11
							}
						},
						{
							"id": 1382,
							"name": "height",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Fixed height applied through inline styling"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 98,
									"character": 8
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.height",
								"id": 12
							}
						},
						{
							"id": 1383,
							"name": "margin",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Margins applied for the global spacing variables"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 100,
									"character": 8
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeSize",
								"id": 31
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.margin",
								"id": 13
							}
						},
						{
							"id": 1384,
							"name": "maxWidth",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Max width applied through inline styling"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 102,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.maxWidth",
								"id": 14
							}
						},
						{
							"id": 1385,
							"name": "minHeight",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Max height applied through inline styling"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 104,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.minHeight",
								"id": 15
							}
						},
						{
							"id": 1386,
							"name": "minWidth",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Min width applied through inline style"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 106,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.minWidth",
								"id": 16
							}
						},
						{
							"id": 1366,
							"name": "onClose",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/Placement/Placement.tsx",
									"line": 16,
									"character": 9
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "reflection",
										"declaration": {
											"id": 1367,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"signatures": [
												{
													"id": 1368,
													"name": "__call",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								]
							}
						},
						{
							"id": 1369,
							"name": "options",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/Placement/Placement.tsx",
									"line": 17,
									"character": 9
								}
							],
							"type": {
								"type": "reference",
								"name": "PopperProps"
							}
						},
						{
							"id": 1387,
							"name": "overflow",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Overflow"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 108,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "stringLiteral",
										"value": "hidden"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.overflow",
								"id": 17
							}
						},
						{
							"id": 1388,
							"name": "padding",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Padding applied for the global spacing variables"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 110,
									"character": 9
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeSize",
								"id": 31
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.padding",
								"id": 18
							}
						},
						{
							"id": 1389,
							"name": "paddingHorizontal",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Horizontal padding applied for the global spacing variables"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 112,
									"character": 19
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeSize",
								"id": 31
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.paddingHorizontal",
								"id": 19
							}
						},
						{
							"id": 1390,
							"name": "paddingVertical",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Vertical pa?dding applied for the global spacing variables"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 114,
									"character": 17
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeSize",
								"id": 31
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.paddingVertical",
								"id": 20
							}
						},
						{
							"id": 1370,
							"name": "placement",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/Placement/Placement.tsx",
									"line": 18,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "bottom"
									},
									{
										"type": "stringLiteral",
										"value": "left"
									},
									{
										"type": "stringLiteral",
										"value": "right"
									},
									{
										"type": "stringLiteral",
										"value": "top"
									}
								]
							}
						},
						{
							"id": 1391,
							"name": "scrollable",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies overflow styling to enable/disable scrolling."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 116,
									"character": 12
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.scrollable",
								"id": 21
							}
						},
						{
							"id": 1392,
							"name": "tag",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Any valid HTML or SVG element tag.",
								"tags": [
									{
										"tag": "reference",
										"text": "false\n"
									}
								]
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 122,
									"character": 5
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeAllElementTags",
								"id": 34
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.tag",
								"id": 22
							}
						},
						{
							"id": 1393,
							"name": "textColor",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Text colour to be applied."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 126,
									"character": 11
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeColor",
								"id": 30
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.textColor",
								"id": 23
							}
						},
						{
							"id": 1394,
							"name": "theme",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Theme applied to this element and inherited for child elements (until\na descendant theme is applied)."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 131,
									"character": 7
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeTheme",
								"id": 35
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.theme",
								"id": 24
							}
						},
						{
							"id": 1371,
							"name": "unrender",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/Placement/Placement.tsx",
									"line": 19,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							}
						},
						{
							"id": 1372,
							"name": "visible",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/Placement/Placement.tsx",
									"line": 20,
									"character": 9
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							}
						},
						{
							"id": 1395,
							"name": "width",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Fixed width applied through inline styling"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 133,
									"character": 7
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.width",
								"id": 25
							}
						},
						{
							"id": 1396,
							"name": "zIndex",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "z-index number for layering elements."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 135,
									"character": 8
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "number"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.zIndex",
								"id": 26
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								1373,
								1374,
								1375,
								1376,
								1377,
								1378,
								1379,
								1380,
								1381,
								1382,
								1383,
								1384,
								1385,
								1386,
								1366,
								1369,
								1387,
								1388,
								1389,
								1390,
								1370,
								1391,
								1392,
								1393,
								1394,
								1371,
								1372,
								1395,
								1396
							]
						}
					],
					"sources": [
						{
							"fileName": "src/Placement/Placement.tsx",
							"line": 15,
							"character": 31
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"name": "BaseProps",
							"id": 2
						}
					]
				},
				{
					"id": 1397,
					"name": "PlacementArrowPropsContext",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "src/Placement/Placement.tsx",
							"line": 10,
							"character": 39
						}
					],
					"type": {
						"type": "reference",
						"name": "Context",
						"typeArguments": [
							{
								"type": "reference",
								"name": "PopperArrowProps"
							}
						]
					},
					"defaultValue": " React.createContext<PopperArrowProps>({\n  ref: () => {},\n  style: {},\n})"
				},
				{
					"id": 1398,
					"name": "Placement",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"signatures": [
						{
							"id": 1399,
							"name": "Placement",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 1400,
									"name": "props",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intersection",
										"types": [
											{
												"type": "reference",
												"name": "PlacementProps",
												"id": 1365
											},
											{
												"type": "reflection",
												"declaration": {
													"id": 1401,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"children": [
														{
															"id": 1402,
															"name": "children",
															"kind": 32,
															"kindString": "Variable",
															"flags": {
																"isOptional": true
															},
															"sources": [
																{
																	"fileName": "node_modules/@types/react/index.d.ts",
																	"line": 773,
																	"character": 46
																}
															],
															"type": {
																"type": "reference",
																"name": "ReactNode"
															}
														}
													],
													"groups": [
														{
															"title": "Variables",
															"kind": 32,
															"children": [
																1402
															]
														}
													]
												}
											}
										]
									}
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "null"
									},
									{
										"type": "reference",
										"name": "ReactPortal"
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "src/Placement/Placement.tsx",
							"line": 23,
							"character": 15
						}
					]
				}
			],
			"groups": [
				{
					"title": "Interfaces",
					"kind": 256,
					"children": [
						1365
					]
				},
				{
					"title": "Variables",
					"kind": 32,
					"children": [
						1397
					]
				},
				{
					"title": "Functions",
					"kind": 64,
					"children": [
						1398
					]
				}
			],
			"sources": [
				{
					"fileName": "src/Placement/Placement.tsx",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 1403,
			"name": "\"Placement/PlacementArrow\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "/Users/harry/Projects/personal/preshape/src/Placement/PlacementArrow.tsx",
			"children": [
				{
					"id": 1404,
					"name": "PlacementArrowProps",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"children": [
						{
							"id": 1405,
							"name": "absolute",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Quick way of absolutely position to common places"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 58,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "fullscreen"
									},
									{
										"type": "stringLiteral",
										"value": "top"
									},
									{
										"type": "stringLiteral",
										"value": "top-left"
									},
									{
										"type": "stringLiteral",
										"value": "top-right"
									},
									{
										"type": "stringLiteral",
										"value": "bottom"
									},
									{
										"type": "stringLiteral",
										"value": "bottom-left"
									},
									{
										"type": "stringLiteral",
										"value": "bottom-right"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.absolute",
								"id": 3
							}
						},
						{
							"id": 1406,
							"name": "backgroundColor",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Background colour to be applied, shades are taken from the current\ntheme."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 70,
									"character": 17
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeColor",
								"id": 30
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.backgroundColor",
								"id": 4
							}
						},
						{
							"id": 1407,
							"name": "borderColor",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Border colour to be applied, shades are taken from the current\ntheme."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 75,
									"character": 13
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeColor",
								"id": 30
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.borderColor",
								"id": 5
							}
						},
						{
							"id": 1408,
							"name": "borderRadius",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Adds styling of a border radius to one of the size multiples."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 79,
									"character": 14
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "x1"
									},
									{
										"type": "stringLiteral",
										"value": "x2"
									},
									{
										"type": "stringLiteral",
										"value": "x3"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.borderRadius",
								"id": 6
							}
						},
						{
							"id": 1409,
							"name": "borderSize",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Thickness of the border to be applied"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 81,
									"character": 12
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "x1"
									},
									{
										"type": "stringLiteral",
										"value": "x2"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.borderSize",
								"id": 7
							}
						},
						{
							"id": 1410,
							"name": "clickable",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Adds styling to indicate that the element is clickable"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 83,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.clickable",
								"id": 8
							}
						},
						{
							"id": 1411,
							"name": "container",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies relative positioning to contain child elements."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 85,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.container",
								"id": 9
							}
						},
						{
							"id": 1412,
							"name": "display",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies display styling"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 87,
									"character": 9
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "block"
									},
									{
										"type": "stringLiteral",
										"value": "inline-block"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.display",
								"id": 10
							}
						},
						{
							"id": 1413,
							"name": "fixed",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Quick way of absolutely position to common places"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 89,
									"character": 7
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "fullscreen"
									},
									{
										"type": "stringLiteral",
										"value": "top"
									},
									{
										"type": "stringLiteral",
										"value": "top-left"
									},
									{
										"type": "stringLiteral",
										"value": "top-right"
									},
									{
										"type": "stringLiteral",
										"value": "bottom"
									},
									{
										"type": "stringLiteral",
										"value": "bottom-left"
									},
									{
										"type": "stringLiteral",
										"value": "bottom-right"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.fixed",
								"id": 11
							}
						},
						{
							"id": 1414,
							"name": "height",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Fixed height applied through inline styling"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 98,
									"character": 8
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.height",
								"id": 12
							}
						},
						{
							"id": 1415,
							"name": "margin",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Margins applied for the global spacing variables"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 100,
									"character": 8
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeSize",
								"id": 31
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.margin",
								"id": 13
							}
						},
						{
							"id": 1416,
							"name": "maxWidth",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Max width applied through inline styling"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 102,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.maxWidth",
								"id": 14
							}
						},
						{
							"id": 1417,
							"name": "minHeight",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Max height applied through inline styling"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 104,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.minHeight",
								"id": 15
							}
						},
						{
							"id": 1418,
							"name": "minWidth",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Min width applied through inline style"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 106,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.minWidth",
								"id": 16
							}
						},
						{
							"id": 1419,
							"name": "overflow",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Overflow"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 108,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "stringLiteral",
										"value": "hidden"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.overflow",
								"id": 17
							}
						},
						{
							"id": 1420,
							"name": "padding",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Padding applied for the global spacing variables"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 110,
									"character": 9
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeSize",
								"id": 31
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.padding",
								"id": 18
							}
						},
						{
							"id": 1421,
							"name": "paddingHorizontal",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Horizontal padding applied for the global spacing variables"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 112,
									"character": 19
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeSize",
								"id": 31
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.paddingHorizontal",
								"id": 19
							}
						},
						{
							"id": 1422,
							"name": "paddingVertical",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Vertical pa?dding applied for the global spacing variables"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 114,
									"character": 17
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeSize",
								"id": 31
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.paddingVertical",
								"id": 20
							}
						},
						{
							"id": 1423,
							"name": "scrollable",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies overflow styling to enable/disable scrolling."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 116,
									"character": 12
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.scrollable",
								"id": 21
							}
						},
						{
							"id": 1424,
							"name": "tag",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Any valid HTML or SVG element tag.",
								"tags": [
									{
										"tag": "reference",
										"text": "false\n"
									}
								]
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 122,
									"character": 5
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeAllElementTags",
								"id": 34
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.tag",
								"id": 22
							}
						},
						{
							"id": 1425,
							"name": "textColor",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Text colour to be applied."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 126,
									"character": 11
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeColor",
								"id": 30
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.textColor",
								"id": 23
							}
						},
						{
							"id": 1426,
							"name": "theme",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Theme applied to this element and inherited for child elements (until\na descendant theme is applied)."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 131,
									"character": 7
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeTheme",
								"id": 35
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.theme",
								"id": 24
							}
						},
						{
							"id": 1427,
							"name": "width",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Fixed width applied through inline styling"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 133,
									"character": 7
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.width",
								"id": 25
							}
						},
						{
							"id": 1428,
							"name": "zIndex",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "z-index number for layering elements."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 135,
									"character": 8
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "number"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.zIndex",
								"id": 26
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								1405,
								1406,
								1407,
								1408,
								1409,
								1410,
								1411,
								1412,
								1413,
								1414,
								1415,
								1416,
								1417,
								1418,
								1419,
								1420,
								1421,
								1422,
								1423,
								1424,
								1425,
								1426,
								1427,
								1428
							]
						}
					],
					"sources": [
						{
							"fileName": "src/Placement/PlacementArrow.tsx",
							"line": 5,
							"character": 36
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"name": "BaseProps",
							"id": 2
						}
					]
				},
				{
					"id": 1429,
					"name": "PlacementArrow",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"signatures": [
						{
							"id": 1430,
							"name": "PlacementArrow",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 1431,
									"name": "props",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intersection",
										"types": [
											{
												"type": "reference",
												"name": "PlacementArrowProps",
												"id": 1404
											},
											{
												"type": "reflection",
												"declaration": {
													"id": 1432,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"children": [
														{
															"id": 1433,
															"name": "children",
															"kind": 32,
															"kindString": "Variable",
															"flags": {
																"isOptional": true
															},
															"sources": [
																{
																	"fileName": "node_modules/@types/react/index.d.ts",
																	"line": 773,
																	"character": 46
																}
															],
															"type": {
																"type": "reference",
																"name": "ReactNode"
															}
														}
													],
													"groups": [
														{
															"title": "Variables",
															"kind": 32,
															"children": [
																1433
															]
														}
													]
												}
											}
										]
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Element"
							}
						}
					],
					"sources": [
						{
							"fileName": "src/Placement/PlacementArrow.tsx",
							"line": 7,
							"character": 20
						}
					]
				}
			],
			"groups": [
				{
					"title": "Interfaces",
					"kind": 256,
					"children": [
						1404
					]
				},
				{
					"title": "Functions",
					"kind": 64,
					"children": [
						1429
					]
				}
			],
			"sources": [
				{
					"fileName": "src/Placement/PlacementArrow.tsx",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 1434,
			"name": "\"Placement/PlacementContent\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "/Users/harry/Projects/personal/preshape/src/Placement/PlacementContent.tsx",
			"children": [
				{
					"id": 1435,
					"name": "PlacementContentProps",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"children": [
						{
							"id": 1446,
							"name": "absolute",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Quick way of absolutely position to common places"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 58,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "fullscreen"
									},
									{
										"type": "stringLiteral",
										"value": "top"
									},
									{
										"type": "stringLiteral",
										"value": "top-left"
									},
									{
										"type": "stringLiteral",
										"value": "top-right"
									},
									{
										"type": "stringLiteral",
										"value": "bottom"
									},
									{
										"type": "stringLiteral",
										"value": "bottom-left"
									},
									{
										"type": "stringLiteral",
										"value": "bottom-right"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.absolute",
								"id": 3
							}
						},
						{
							"id": 1436,
							"name": "alignChildren",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Short cut child alignment property for both alignChildrenHorizontal and\nalignChildrenVertical."
							},
							"sources": [
								{
									"fileName": "src/Flex/Flex.tsx",
									"line": 11,
									"character": 15
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "start"
									},
									{
										"type": "stringLiteral",
										"value": "middle"
									},
									{
										"type": "stringLiteral",
										"value": "end"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "FlexProps.alignChildren",
								"id": 240
							}
						},
						{
							"id": 1437,
							"name": "alignChildrenHorizontal",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Horizontal alignment of children flex items."
							},
							"sources": [
								{
									"fileName": "src/Flex/Flex.tsx",
									"line": 13,
									"character": 25
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "start"
									},
									{
										"type": "stringLiteral",
										"value": "middle"
									},
									{
										"type": "stringLiteral",
										"value": "end"
									},
									{
										"type": "stringLiteral",
										"value": "around"
									},
									{
										"type": "stringLiteral",
										"value": "between"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "FlexProps.alignChildrenHorizontal",
								"id": 241
							}
						},
						{
							"id": 1438,
							"name": "alignChildrenVertical",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Vertical alignment of children flex items."
							},
							"sources": [
								{
									"fileName": "src/Flex/Flex.tsx",
									"line": 15,
									"character": 23
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "start"
									},
									{
										"type": "stringLiteral",
										"value": "middle"
									},
									{
										"type": "stringLiteral",
										"value": "end"
									},
									{
										"type": "stringLiteral",
										"value": "around"
									},
									{
										"type": "stringLiteral",
										"value": "between"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "FlexProps.alignChildrenVertical",
								"id": 242
							}
						},
						{
							"id": 1439,
							"name": "alignSelf",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Flex item alignment property (changes with parent direction)."
							},
							"sources": [
								{
									"fileName": "src/Flex/Flex.tsx",
									"line": 17,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "start"
									},
									{
										"type": "stringLiteral",
										"value": "middle"
									},
									{
										"type": "stringLiteral",
										"value": "end"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "FlexProps.alignSelf",
								"id": 243
							}
						},
						{
							"id": 1447,
							"name": "backgroundColor",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Background colour to be applied, shades are taken from the current\ntheme."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 70,
									"character": 17
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeColor",
								"id": 30
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.backgroundColor",
								"id": 4
							}
						},
						{
							"id": 1440,
							"name": "basis",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Initial width to flex from for a child item."
							},
							"sources": [
								{
									"fileName": "src/Flex/Flex.tsx",
									"line": 19,
									"character": 7
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "content"
									},
									{
										"type": "stringLiteral",
										"value": "container"
									},
									{
										"type": "stringLiteral",
										"value": "none"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "FlexProps.basis",
								"id": 244
							}
						},
						{
							"id": 1448,
							"name": "borderColor",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Border colour to be applied, shades are taken from the current\ntheme."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 75,
									"character": 13
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeColor",
								"id": 30
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.borderColor",
								"id": 5
							}
						},
						{
							"id": 1449,
							"name": "borderRadius",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Adds styling of a border radius to one of the size multiples."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 79,
									"character": 14
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "x1"
									},
									{
										"type": "stringLiteral",
										"value": "x2"
									},
									{
										"type": "stringLiteral",
										"value": "x3"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.borderRadius",
								"id": 6
							}
						},
						{
							"id": 1450,
							"name": "borderSize",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Thickness of the border to be applied"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 81,
									"character": 12
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "x1"
									},
									{
										"type": "stringLiteral",
										"value": "x2"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.borderSize",
								"id": 7
							}
						},
						{
							"id": 1451,
							"name": "clickable",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Adds styling to indicate that the element is clickable"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 83,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.clickable",
								"id": 8
							}
						},
						{
							"id": 1452,
							"name": "container",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies relative positioning to contain child elements."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 85,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.container",
								"id": 9
							}
						},
						{
							"id": 1441,
							"name": "direction",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Direction on which way to flex items."
							},
							"sources": [
								{
									"fileName": "src/Flex/Flex.tsx",
									"line": 21,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "horizontal"
									},
									{
										"type": "stringLiteral",
										"value": "vertical"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "FlexProps.direction",
								"id": 245
							}
						},
						{
							"id": 1453,
							"name": "display",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies display styling"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 87,
									"character": 9
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "block"
									},
									{
										"type": "stringLiteral",
										"value": "inline-block"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.display",
								"id": 10
							}
						},
						{
							"id": 1454,
							"name": "fixed",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Quick way of absolutely position to common places"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 89,
									"character": 7
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "fullscreen"
									},
									{
										"type": "stringLiteral",
										"value": "top"
									},
									{
										"type": "stringLiteral",
										"value": "top-left"
									},
									{
										"type": "stringLiteral",
										"value": "top-right"
									},
									{
										"type": "stringLiteral",
										"value": "bottom"
									},
									{
										"type": "stringLiteral",
										"value": "bottom-left"
									},
									{
										"type": "stringLiteral",
										"value": "bottom-right"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.fixed",
								"id": 11
							}
						},
						{
							"id": 1442,
							"name": "gap",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Spacing applied between child flex items, values are global spacing variables."
							},
							"sources": [
								{
									"fileName": "src/Flex/Flex.tsx",
									"line": 23,
									"character": 5
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeSize",
								"id": 31
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "FlexProps.gap",
								"id": 246
							}
						},
						{
							"id": 1443,
							"name": "grow",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Flex item property if it should grow with available space."
							},
							"sources": [
								{
									"fileName": "src/Flex/Flex.tsx",
									"line": 25,
									"character": 6
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "FlexProps.grow",
								"id": 247
							}
						},
						{
							"id": 1455,
							"name": "height",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Fixed height applied through inline styling"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 98,
									"character": 8
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.height",
								"id": 12
							}
						},
						{
							"id": 1456,
							"name": "margin",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Margins applied for the global spacing variables"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 100,
									"character": 8
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeSize",
								"id": 31
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.margin",
								"id": 13
							}
						},
						{
							"id": 1457,
							"name": "maxWidth",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Max width applied through inline styling"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 102,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.maxWidth",
								"id": 14
							}
						},
						{
							"id": 1458,
							"name": "minHeight",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Max height applied through inline styling"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 104,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.minHeight",
								"id": 15
							}
						},
						{
							"id": 1459,
							"name": "minWidth",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Min width applied through inline style"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 106,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.minWidth",
								"id": 16
							}
						},
						{
							"id": 1460,
							"name": "overflow",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Overflow"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 108,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "stringLiteral",
										"value": "hidden"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.overflow",
								"id": 17
							}
						},
						{
							"id": 1461,
							"name": "padding",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Padding applied for the global spacing variables"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 110,
									"character": 9
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeSize",
								"id": 31
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.padding",
								"id": 18
							}
						},
						{
							"id": 1462,
							"name": "paddingHorizontal",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Horizontal padding applied for the global spacing variables"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 112,
									"character": 19
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeSize",
								"id": 31
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.paddingHorizontal",
								"id": 19
							}
						},
						{
							"id": 1463,
							"name": "paddingVertical",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Vertical pa?dding applied for the global spacing variables"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 114,
									"character": 17
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeSize",
								"id": 31
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.paddingVertical",
								"id": 20
							}
						},
						{
							"id": 1464,
							"name": "scrollable",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies overflow styling to enable/disable scrolling."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 116,
									"character": 12
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.scrollable",
								"id": 21
							}
						},
						{
							"id": 1444,
							"name": "shrink",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Flex item property if it should shrink."
							},
							"sources": [
								{
									"fileName": "src/Flex/Flex.tsx",
									"line": 27,
									"character": 8
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "FlexProps.shrink",
								"id": 248
							}
						},
						{
							"id": 1465,
							"name": "tag",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Any valid HTML or SVG element tag.",
								"tags": [
									{
										"tag": "reference",
										"text": "false\n"
									}
								]
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 122,
									"character": 5
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeAllElementTags",
								"id": 34
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.tag",
								"id": 22
							}
						},
						{
							"id": 1466,
							"name": "textColor",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Text colour to be applied."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 126,
									"character": 11
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeColor",
								"id": 30
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.textColor",
								"id": 23
							}
						},
						{
							"id": 1467,
							"name": "theme",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Theme applied to this element and inherited for child elements (until\na descendant theme is applied)."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 131,
									"character": 7
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeTheme",
								"id": 35
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.theme",
								"id": 24
							}
						},
						{
							"id": 1468,
							"name": "width",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Fixed width applied through inline styling"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 133,
									"character": 7
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.width",
								"id": 25
							}
						},
						{
							"id": 1445,
							"name": "wrap",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Flag to allow flex items to wrap over to new lines"
							},
							"sources": [
								{
									"fileName": "src/Flex/Flex.tsx",
									"line": 29,
									"character": 6
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "FlexProps.wrap",
								"id": 249
							}
						},
						{
							"id": 1469,
							"name": "zIndex",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "z-index number for layering elements."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 135,
									"character": 8
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "number"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.zIndex",
								"id": 26
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								1446,
								1436,
								1437,
								1438,
								1439,
								1447,
								1440,
								1448,
								1449,
								1450,
								1451,
								1452,
								1441,
								1453,
								1454,
								1442,
								1443,
								1455,
								1456,
								1457,
								1458,
								1459,
								1460,
								1461,
								1462,
								1463,
								1464,
								1444,
								1465,
								1466,
								1467,
								1468,
								1445,
								1469
							]
						}
					],
					"sources": [
						{
							"fileName": "src/Placement/PlacementContent.tsx",
							"line": 5,
							"character": 38
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"name": "FlexProps",
							"id": 239
						}
					]
				},
				{
					"id": 1470,
					"name": "PlacementContent",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "src/Placement/PlacementContent.tsx",
							"line": 9,
							"character": 22
						}
					],
					"type": {
						"type": "reference",
						"name": "ForwardRefExoticComponent",
						"typeArguments": [
							{
								"type": "intersection",
								"types": [
									{
										"type": "reference",
										"name": "PlacementContentProps",
										"id": 1435
									},
									{
										"type": "reflection",
										"declaration": {
											"id": 1471,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {}
										}
									},
									{
										"type": "reference",
										"name": "RefAttributes",
										"typeArguments": [
											{
												"type": "reference",
												"name": "HTMLElement"
											}
										]
									}
								]
							}
						]
					},
					"defaultValue": " React.forwardRef<HTMLElement, Attributes<HTMLElement, PlacementContentProps>>((props, ref) => {\n  const { children, ...rest } = props;\n\n  return (\n    <Flex { ...rest } container>\n      { children }\n    </Flex>\n  );\n})"
				}
			],
			"groups": [
				{
					"title": "Interfaces",
					"kind": 256,
					"children": [
						1435
					]
				},
				{
					"title": "Variables",
					"kind": 32,
					"children": [
						1470
					]
				}
			],
			"sources": [
				{
					"fileName": "src/Placement/PlacementContent.tsx",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 1472,
			"name": "\"Placement/PlacementManager\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "/Users/harry/Projects/personal/preshape/src/Placement/PlacementManager.tsx",
			"children": [
				{
					"id": 1473,
					"name": "PlacementManagerProps",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"children": [
						{
							"id": 1476,
							"name": "children",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/react/index.d.ts",
									"line": 773,
									"character": 46
								}
							],
							"type": {
								"type": "reference",
								"name": "ReactNode"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "__type.children",
								"id": 1402
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								1476
							]
						}
					],
					"sources": [
						{
							"fileName": "src/Placement/PlacementManager.tsx",
							"line": 3,
							"character": 38
						}
					],
					"extendedTypes": [
						{
							"type": "reflection",
							"declaration": {
								"id": 1474,
								"name": "__type",
								"kind": 65536,
								"kindString": "Type literal",
								"flags": {},
								"children": [
									{
										"id": 1475,
										"name": "children",
										"kind": 32,
										"kindString": "Variable",
										"flags": {
											"isOptional": true
										},
										"sources": [
											{
												"fileName": "node_modules/@types/react/index.d.ts",
												"line": 773,
												"character": 46
											}
										],
										"type": {
											"type": "reference",
											"name": "ReactNode"
										}
									}
								],
								"groups": [
									{
										"title": "Variables",
										"kind": 32,
										"children": [
											1475
										]
									}
								],
								"sources": [
									{
										"fileName": "src/Placement/PlacementManager.tsx",
										"line": 3,
										"character": 46
									}
								]
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Interfaces",
					"kind": 256,
					"children": [
						1473
					]
				}
			],
			"sources": [
				{
					"fileName": "src/Placement/PlacementManager.tsx",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 1477,
			"name": "\"Placement/PlacementReference\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "/Users/harry/Projects/personal/preshape/src/Placement/PlacementReference.tsx",
			"children": [
				{
					"id": 1478,
					"name": "PlacementReferenceProps",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"children": [
						{
							"id": 1481,
							"name": "children",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/react/index.d.ts",
									"line": 773,
									"character": 46
								}
							],
							"type": {
								"type": "reference",
								"name": "ReactNode"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "__type.children",
								"id": 1402
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								1481
							]
						}
					],
					"sources": [
						{
							"fileName": "src/Placement/PlacementReference.tsx",
							"line": 3,
							"character": 40
						}
					],
					"extendedTypes": [
						{
							"type": "reflection",
							"declaration": {
								"id": 1479,
								"name": "__type",
								"kind": 65536,
								"kindString": "Type literal",
								"flags": {},
								"children": [
									{
										"id": 1480,
										"name": "children",
										"kind": 32,
										"kindString": "Variable",
										"flags": {
											"isOptional": true
										},
										"sources": [
											{
												"fileName": "node_modules/@types/react/index.d.ts",
												"line": 773,
												"character": 46
											}
										],
										"type": {
											"type": "reference",
											"name": "ReactNode"
										}
									}
								],
								"groups": [
									{
										"title": "Variables",
										"kind": 32,
										"children": [
											1480
										]
									}
								],
								"sources": [
									{
										"fileName": "src/Placement/PlacementReference.tsx",
										"line": 3,
										"character": 48
									}
								]
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Interfaces",
					"kind": 256,
					"children": [
						1478
					]
				}
			],
			"sources": [
				{
					"fileName": "src/Placement/PlacementReference.tsx",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 1482,
			"name": "\"Placement/PlacementReferenceElement\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "/Users/harry/Projects/personal/preshape/src/Placement/PlacementReferenceElement.tsx",
			"children": [
				{
					"id": 1488,
					"name": "PlacementReferenceElement",
					"kind": 128,
					"kindString": "Class",
					"flags": {
						"isExported": true
					},
					"children": [
						{
							"id": 1496,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1497,
									"name": "new PlacementReferenceElement",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"parameters": [
										{
											"id": 1498,
											"name": "rect",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Rect",
												"id": 1483
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "PlacementReferenceElement",
										"id": 1488
									}
								}
							],
							"sources": [
								{
									"fileName": "src/Placement/PlacementReferenceElement.tsx",
									"line": 16,
									"character": 4
								}
							]
						},
						{
							"id": 1511,
							"name": "clientHeight",
							"kind": 262144,
							"kindString": "Accessor",
							"flags": {
								"isExported": true
							},
							"getSignature": [
								{
									"id": 1512,
									"name": "__get",
									"kind": 524288,
									"kindString": "Get signature",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"sources": [
								{
									"fileName": "src/Placement/PlacementReferenceElement.tsx",
									"line": 41,
									"character": 18
								}
							]
						},
						{
							"id": 1509,
							"name": "clientWidth",
							"kind": 262144,
							"kindString": "Accessor",
							"flags": {
								"isExported": true
							},
							"getSignature": [
								{
									"id": 1510,
									"name": "__get",
									"kind": 524288,
									"kindString": "Get signature",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"sources": [
								{
									"fileName": "src/Placement/PlacementReferenceElement.tsx",
									"line": 37,
									"character": 17
								}
							]
						},
						{
							"id": 1507,
							"name": "getBoundingClientRect",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1508,
									"name": "getBoundingClientRect",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "ClientRect"
									}
								}
							],
							"sources": [
								{
									"fileName": "src/Placement/PlacementReferenceElement.tsx",
									"line": 33,
									"character": 23
								}
							]
						},
						{
							"id": 1499,
							"name": "update",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1500,
									"name": "update",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 1501,
											"name": "__namedParameters",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"originalName": "__0",
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 1502,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"children": [
														{
															"id": 1503,
															"name": "height",
															"kind": 32,
															"kindString": "Variable",
															"flags": {},
															"sources": [
																{
																	"fileName": "src/Placement/PlacementReferenceElement.tsx",
																	"line": 22,
																	"character": 17
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "number"
															}
														},
														{
															"id": 1504,
															"name": "width",
															"kind": 32,
															"kindString": "Variable",
															"flags": {},
															"sources": [
																{
																	"fileName": "src/Placement/PlacementReferenceElement.tsx",
																	"line": 22,
																	"character": 24
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "number"
															}
														},
														{
															"id": 1505,
															"name": "x",
															"kind": 32,
															"kindString": "Variable",
															"flags": {},
															"sources": [
																{
																	"fileName": "src/Placement/PlacementReferenceElement.tsx",
																	"line": 22,
																	"character": 27
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "number"
															}
														},
														{
															"id": 1506,
															"name": "y",
															"kind": 32,
															"kindString": "Variable",
															"flags": {},
															"sources": [
																{
																	"fileName": "src/Placement/PlacementReferenceElement.tsx",
																	"line": 22,
																	"character": 30
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "number"
															}
														}
													],
													"groups": [
														{
															"title": "Variables",
															"kind": 32,
															"children": [
																1503,
																1504,
																1505,
																1506
															]
														}
													],
													"sources": [
														{
															"fileName": "src/Placement/PlacementReferenceElement.tsx",
															"line": 22,
															"character": 9
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							],
							"sources": [
								{
									"fileName": "src/Placement/PlacementReferenceElement.tsx",
									"line": 22,
									"character": 8
								}
							]
						},
						{
							"id": 1489,
							"name": "clientRect",
							"kind": 2097152,
							"kindString": "Object literal",
							"flags": {
								"isExported": true
							},
							"children": [
								{
									"id": 1493,
									"name": "bottom",
									"kind": 32,
									"kindString": "Variable",
									"flags": {
										"isExported": true
									},
									"sources": [
										{
											"fileName": "src/Placement/PlacementReferenceElement.tsx",
											"line": 13,
											"character": 10
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									},
									"defaultValue": "0"
								},
								{
									"id": 1495,
									"name": "height",
									"kind": 32,
									"kindString": "Variable",
									"flags": {
										"isExported": true
									},
									"sources": [
										{
											"fileName": "src/Placement/PlacementReferenceElement.tsx",
											"line": 15,
											"character": 10
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									},
									"defaultValue": "0"
								},
								{
									"id": 1491,
									"name": "left",
									"kind": 32,
									"kindString": "Variable",
									"flags": {
										"isExported": true
									},
									"sources": [
										{
											"fileName": "src/Placement/PlacementReferenceElement.tsx",
											"line": 11,
											"character": 8
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									},
									"defaultValue": "0"
								},
								{
									"id": 1492,
									"name": "right",
									"kind": 32,
									"kindString": "Variable",
									"flags": {
										"isExported": true
									},
									"sources": [
										{
											"fileName": "src/Placement/PlacementReferenceElement.tsx",
											"line": 12,
											"character": 9
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									},
									"defaultValue": "0"
								},
								{
									"id": 1490,
									"name": "top",
									"kind": 32,
									"kindString": "Variable",
									"flags": {
										"isExported": true
									},
									"sources": [
										{
											"fileName": "src/Placement/PlacementReferenceElement.tsx",
											"line": 10,
											"character": 7
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									},
									"defaultValue": "0"
								},
								{
									"id": 1494,
									"name": "width",
									"kind": 32,
									"kindString": "Variable",
									"flags": {
										"isExported": true
									},
									"sources": [
										{
											"fileName": "src/Placement/PlacementReferenceElement.tsx",
											"line": 14,
											"character": 9
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									},
									"defaultValue": "0"
								}
							],
							"groups": [
								{
									"title": "Variables",
									"kind": 32,
									"children": [
										1493,
										1495,
										1491,
										1492,
										1490,
										1494
									]
								}
							],
							"sources": [
								{
									"fileName": "src/Placement/PlacementReferenceElement.tsx",
									"line": 9,
									"character": 12
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "object"
							}
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								1496
							]
						},
						{
							"title": "Accessors",
							"kind": 262144,
							"children": [
								1511,
								1509
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								1507,
								1499
							]
						},
						{
							"title": "Object literals",
							"kind": 2097152,
							"children": [
								1489
							]
						}
					],
					"sources": [
						{
							"fileName": "src/Placement/PlacementReferenceElement.tsx",
							"line": 8,
							"character": 46
						}
					]
				},
				{
					"id": 1483,
					"name": "Rect",
					"kind": 256,
					"kindString": "Interface",
					"flags": {},
					"children": [
						{
							"id": 1484,
							"name": "height",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "src/Placement/PlacementReferenceElement.tsx",
									"line": 2,
									"character": 8
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 1485,
							"name": "width",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "src/Placement/PlacementReferenceElement.tsx",
									"line": 3,
									"character": 7
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 1486,
							"name": "x",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "src/Placement/PlacementReferenceElement.tsx",
									"line": 4,
									"character": 3
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 1487,
							"name": "y",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "src/Placement/PlacementReferenceElement.tsx",
									"line": 5,
									"character": 3
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								1484,
								1485,
								1486,
								1487
							]
						}
					],
					"sources": [
						{
							"fileName": "src/Placement/PlacementReferenceElement.tsx",
							"line": 1,
							"character": 14
						}
					]
				}
			],
			"groups": [
				{
					"title": "Classes",
					"kind": 128,
					"children": [
						1488
					]
				},
				{
					"title": "Interfaces",
					"kind": 256,
					"children": [
						1483
					]
				}
			],
			"sources": [
				{
					"fileName": "src/Placement/PlacementReferenceElement.tsx",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 1515,
			"name": "\"RadioButton/RadioButton\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "/Users/harry/Projects/personal/preshape/src/RadioButton/RadioButton.tsx",
			"children": [
				{
					"id": 1516,
					"name": "RadioButtonProps",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"children": [
						{
							"id": 1517,
							"name": "label",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "A label that gives describes what the input is for"
							},
							"sources": [
								{
									"fileName": "src/RadioButton/RadioButton.tsx",
									"line": 9,
									"character": 7
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								1517
							]
						}
					],
					"sources": [
						{
							"fileName": "src/RadioButton/RadioButton.tsx",
							"line": 7,
							"character": 33
						}
					]
				},
				{
					"id": 1522,
					"name": "RadioButton",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "src/RadioButton/RadioButton.tsx",
							"line": 20,
							"character": 17
						}
					],
					"type": {
						"type": "reference",
						"name": "ForwardRefExoticComponent",
						"typeArguments": [
							{
								"type": "intersection",
								"types": [
									{
										"type": "reference",
										"name": "RadioButtonProps",
										"id": 1516
									},
									{
										"type": "reflection",
										"declaration": {
											"id": 1523,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {}
										}
									},
									{
										"type": "reference",
										"name": "RefAttributes",
										"typeArguments": [
											{
												"type": "reference",
												"name": "HTMLInputElement"
											}
										]
									}
								]
							}
						]
					},
					"defaultValue": " React.forwardRef<HTMLInputElement, Attributes<HTMLInputElement, RadioButtonProps>>((props, ref) => {\n  const {\n    disabled,\n    label,\n    margin,\n    padding,\n    paddingHorizontal = 'x3',\n    paddingVertical = 'x2',\n    ...rest\n  } = props;\n\n  return (\n    <SelectInputLabel\n        disabled={ disabled }\n        label={ label }\n        margin={ margin }\n        padding={ padding }\n        paddingHorizontal={ paddingHorizontal }\n        paddingVertical={ paddingVertical }>\n      <RadioButtonIndicator { ...rest }\n          disabled={ disabled }\n          ref={ ref } />\n    </SelectInputLabel>\n  );\n})"
				}
			],
			"groups": [
				{
					"title": "Interfaces",
					"kind": 256,
					"children": [
						1516
					]
				},
				{
					"title": "Variables",
					"kind": 32,
					"children": [
						1522
					]
				}
			],
			"sources": [
				{
					"fileName": "src/RadioButton/RadioButton.tsx",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 1513,
			"name": "\"RadioButton/RadioButtonIndicator\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "/Users/harry/Projects/personal/preshape/src/RadioButton/RadioButtonIndicator.tsx",
			"children": [
				{
					"id": 1514,
					"name": "RadioButtonIndicator",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "src/RadioButton/RadioButtonIndicator.tsx",
							"line": 3,
							"character": 26
						}
					],
					"type": {
						"type": "reference",
						"name": "ForwardRefExoticComponent",
						"typeArguments": [
							{
								"type": "intersection",
								"types": [
									{
										"type": "reference",
										"name": "InputHTMLAttributes",
										"typeArguments": [
											{
												"type": "reference",
												"name": "HTMLInputElement"
											}
										]
									},
									{
										"type": "reference",
										"name": "RefAttributes",
										"typeArguments": [
											{
												"type": "reference",
												"name": "HTMLInputElement"
											}
										]
									}
								]
							}
						]
					},
					"defaultValue": " React.forwardRef<HTMLInputElement, React.InputHTMLAttributes<HTMLInputElement>>((props, ref) => {\n  return (\n    <div className=\"RadioButton\">\n      <input { ...props }\n          className=\"RadioButton__input\"\n          ref={ ref }\n          type=\"radio\" />\n      <div className=\"RadioButton__indicator\" />\n    </div>\n  );\n})"
				}
			],
			"groups": [
				{
					"title": "Variables",
					"kind": 32,
					"children": [
						1514
					]
				}
			],
			"sources": [
				{
					"fileName": "src/RadioButton/RadioButtonIndicator.tsx",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 660,
			"name": "\"SelectInputLabel/SelectInputLabel\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "/Users/harry/Projects/personal/preshape/src/SelectInputLabel/SelectInputLabel.tsx",
			"children": [
				{
					"id": 661,
					"name": "SelectInputLabelProps",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"children": [
						{
							"id": 673,
							"name": "absolute",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Quick way of absolutely position to common places"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 58,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "fullscreen"
									},
									{
										"type": "stringLiteral",
										"value": "top"
									},
									{
										"type": "stringLiteral",
										"value": "top-left"
									},
									{
										"type": "stringLiteral",
										"value": "top-right"
									},
									{
										"type": "stringLiteral",
										"value": "bottom"
									},
									{
										"type": "stringLiteral",
										"value": "bottom-left"
									},
									{
										"type": "stringLiteral",
										"value": "bottom-right"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.absolute",
								"id": 3
							}
						},
						{
							"id": 663,
							"name": "alignChildren",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Short cut child alignment property for both alignChildrenHorizontal and\nalignChildrenVertical."
							},
							"sources": [
								{
									"fileName": "src/Flex/Flex.tsx",
									"line": 11,
									"character": 15
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "start"
									},
									{
										"type": "stringLiteral",
										"value": "middle"
									},
									{
										"type": "stringLiteral",
										"value": "end"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "FlexProps.alignChildren",
								"id": 240
							}
						},
						{
							"id": 664,
							"name": "alignChildrenHorizontal",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Horizontal alignment of children flex items."
							},
							"sources": [
								{
									"fileName": "src/Flex/Flex.tsx",
									"line": 13,
									"character": 25
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "start"
									},
									{
										"type": "stringLiteral",
										"value": "middle"
									},
									{
										"type": "stringLiteral",
										"value": "end"
									},
									{
										"type": "stringLiteral",
										"value": "around"
									},
									{
										"type": "stringLiteral",
										"value": "between"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "FlexProps.alignChildrenHorizontal",
								"id": 241
							}
						},
						{
							"id": 665,
							"name": "alignChildrenVertical",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Vertical alignment of children flex items."
							},
							"sources": [
								{
									"fileName": "src/Flex/Flex.tsx",
									"line": 15,
									"character": 23
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "start"
									},
									{
										"type": "stringLiteral",
										"value": "middle"
									},
									{
										"type": "stringLiteral",
										"value": "end"
									},
									{
										"type": "stringLiteral",
										"value": "around"
									},
									{
										"type": "stringLiteral",
										"value": "between"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "FlexProps.alignChildrenVertical",
								"id": 242
							}
						},
						{
							"id": 666,
							"name": "alignSelf",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Flex item alignment property (changes with parent direction)."
							},
							"sources": [
								{
									"fileName": "src/Flex/Flex.tsx",
									"line": 17,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "start"
									},
									{
										"type": "stringLiteral",
										"value": "middle"
									},
									{
										"type": "stringLiteral",
										"value": "end"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "FlexProps.alignSelf",
								"id": 243
							}
						},
						{
							"id": 674,
							"name": "backgroundColor",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Background colour to be applied, shades are taken from the current\ntheme."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 70,
									"character": 17
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeColor",
								"id": 30
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.backgroundColor",
								"id": 4
							}
						},
						{
							"id": 667,
							"name": "basis",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Initial width to flex from for a child item."
							},
							"sources": [
								{
									"fileName": "src/Flex/Flex.tsx",
									"line": 19,
									"character": 7
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "content"
									},
									{
										"type": "stringLiteral",
										"value": "container"
									},
									{
										"type": "stringLiteral",
										"value": "none"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "FlexProps.basis",
								"id": 244
							}
						},
						{
							"id": 675,
							"name": "borderColor",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Border colour to be applied, shades are taken from the current\ntheme."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 75,
									"character": 13
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeColor",
								"id": 30
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.borderColor",
								"id": 5
							}
						},
						{
							"id": 676,
							"name": "borderRadius",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Adds styling of a border radius to one of the size multiples."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 79,
									"character": 14
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "x1"
									},
									{
										"type": "stringLiteral",
										"value": "x2"
									},
									{
										"type": "stringLiteral",
										"value": "x3"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.borderRadius",
								"id": 6
							}
						},
						{
							"id": 677,
							"name": "borderSize",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Thickness of the border to be applied"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 81,
									"character": 12
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "x1"
									},
									{
										"type": "stringLiteral",
										"value": "x2"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.borderSize",
								"id": 7
							}
						},
						{
							"id": 678,
							"name": "clickable",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Adds styling to indicate that the element is clickable"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 83,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.clickable",
								"id": 8
							}
						},
						{
							"id": 679,
							"name": "container",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies relative positioning to contain child elements."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 85,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.container",
								"id": 9
							}
						},
						{
							"id": 668,
							"name": "direction",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Direction on which way to flex items."
							},
							"sources": [
								{
									"fileName": "src/Flex/Flex.tsx",
									"line": 21,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "horizontal"
									},
									{
										"type": "stringLiteral",
										"value": "vertical"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "FlexProps.direction",
								"id": 245
							}
						},
						{
							"id": 680,
							"name": "display",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies display styling"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 87,
									"character": 9
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "block"
									},
									{
										"type": "stringLiteral",
										"value": "inline-block"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.display",
								"id": 10
							}
						},
						{
							"id": 681,
							"name": "fixed",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Quick way of absolutely position to common places"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 89,
									"character": 7
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "fullscreen"
									},
									{
										"type": "stringLiteral",
										"value": "top"
									},
									{
										"type": "stringLiteral",
										"value": "top-left"
									},
									{
										"type": "stringLiteral",
										"value": "top-right"
									},
									{
										"type": "stringLiteral",
										"value": "bottom"
									},
									{
										"type": "stringLiteral",
										"value": "bottom-left"
									},
									{
										"type": "stringLiteral",
										"value": "bottom-right"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.fixed",
								"id": 11
							}
						},
						{
							"id": 669,
							"name": "gap",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Spacing applied between child flex items, values are global spacing variables."
							},
							"sources": [
								{
									"fileName": "src/Flex/Flex.tsx",
									"line": 23,
									"character": 5
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeSize",
								"id": 31
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "FlexProps.gap",
								"id": 246
							}
						},
						{
							"id": 670,
							"name": "grow",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Flex item property if it should grow with available space."
							},
							"sources": [
								{
									"fileName": "src/Flex/Flex.tsx",
									"line": 25,
									"character": 6
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "FlexProps.grow",
								"id": 247
							}
						},
						{
							"id": 682,
							"name": "height",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Fixed height applied through inline styling"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 98,
									"character": 8
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.height",
								"id": 12
							}
						},
						{
							"id": 662,
							"name": "label",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/SelectInputLabel/SelectInputLabel.tsx",
									"line": 8,
									"character": 7
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 683,
							"name": "margin",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Margins applied for the global spacing variables"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 100,
									"character": 8
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeSize",
								"id": 31
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.margin",
								"id": 13
							}
						},
						{
							"id": 684,
							"name": "maxWidth",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Max width applied through inline styling"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 102,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.maxWidth",
								"id": 14
							}
						},
						{
							"id": 685,
							"name": "minHeight",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Max height applied through inline styling"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 104,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.minHeight",
								"id": 15
							}
						},
						{
							"id": 686,
							"name": "minWidth",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Min width applied through inline style"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 106,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.minWidth",
								"id": 16
							}
						},
						{
							"id": 687,
							"name": "overflow",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Overflow"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 108,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "stringLiteral",
										"value": "hidden"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.overflow",
								"id": 17
							}
						},
						{
							"id": 688,
							"name": "padding",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Padding applied for the global spacing variables"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 110,
									"character": 9
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeSize",
								"id": 31
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.padding",
								"id": 18
							}
						},
						{
							"id": 689,
							"name": "paddingHorizontal",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Horizontal padding applied for the global spacing variables"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 112,
									"character": 19
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeSize",
								"id": 31
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.paddingHorizontal",
								"id": 19
							}
						},
						{
							"id": 690,
							"name": "paddingVertical",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Vertical pa?dding applied for the global spacing variables"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 114,
									"character": 17
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeSize",
								"id": 31
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.paddingVertical",
								"id": 20
							}
						},
						{
							"id": 691,
							"name": "scrollable",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies overflow styling to enable/disable scrolling."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 116,
									"character": 12
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.scrollable",
								"id": 21
							}
						},
						{
							"id": 671,
							"name": "shrink",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Flex item property if it should shrink."
							},
							"sources": [
								{
									"fileName": "src/Flex/Flex.tsx",
									"line": 27,
									"character": 8
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "FlexProps.shrink",
								"id": 248
							}
						},
						{
							"id": 692,
							"name": "tag",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Any valid HTML or SVG element tag.",
								"tags": [
									{
										"tag": "reference",
										"text": "false\n"
									}
								]
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 122,
									"character": 5
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeAllElementTags",
								"id": 34
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.tag",
								"id": 22
							}
						},
						{
							"id": 693,
							"name": "textColor",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Text colour to be applied."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 126,
									"character": 11
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeColor",
								"id": 30
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.textColor",
								"id": 23
							}
						},
						{
							"id": 694,
							"name": "theme",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Theme applied to this element and inherited for child elements (until\na descendant theme is applied)."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 131,
									"character": 7
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeTheme",
								"id": 35
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.theme",
								"id": 24
							}
						},
						{
							"id": 695,
							"name": "width",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Fixed width applied through inline styling"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 133,
									"character": 7
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.width",
								"id": 25
							}
						},
						{
							"id": 672,
							"name": "wrap",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Flag to allow flex items to wrap over to new lines"
							},
							"sources": [
								{
									"fileName": "src/Flex/Flex.tsx",
									"line": 29,
									"character": 6
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "FlexProps.wrap",
								"id": 249
							}
						},
						{
							"id": 696,
							"name": "zIndex",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "z-index number for layering elements."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 135,
									"character": 8
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "number"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.zIndex",
								"id": 26
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								673,
								663,
								664,
								665,
								666,
								674,
								667,
								675,
								676,
								677,
								678,
								679,
								668,
								680,
								681,
								669,
								670,
								682,
								662,
								683,
								684,
								685,
								686,
								687,
								688,
								689,
								690,
								691,
								671,
								692,
								693,
								694,
								695,
								672,
								696
							]
						}
					],
					"sources": [
						{
							"fileName": "src/SelectInputLabel/SelectInputLabel.tsx",
							"line": 7,
							"character": 38
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"name": "FlexProps",
							"id": 239
						}
					]
				},
				{
					"id": 697,
					"name": "SelectInputLabel",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "src/SelectInputLabel/SelectInputLabel.tsx",
							"line": 11,
							"character": 22
						}
					],
					"type": {
						"type": "reference",
						"name": "ForwardRefExoticComponent",
						"typeArguments": [
							{
								"type": "intersection",
								"types": [
									{
										"type": "reference",
										"name": "SelectInputLabelProps",
										"id": 661
									},
									{
										"type": "reflection",
										"declaration": {
											"id": 698,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {}
										}
									},
									{
										"type": "reference",
										"name": "RefAttributes",
										"typeArguments": [
											{
												"type": "reference",
												"name": "HTMLLabelElement"
											}
										]
									}
								]
							}
						]
					},
					"defaultValue": " React.forwardRef<HTMLLabelElement, Attributes<HTMLLabelElement, SelectInputLabelProps>>((props, ref) => {\n  const {\n    children,\n    label,\n    ...rest\n  } = props;\n\n  return (\n    <Flex { ...rest }\n        alignChildrenVertical=\"middle\"\n        className=\"SelectInputLabel\"\n        direction=\"horizontal\"\n        gap=\"x2\"\n        ref={ ref }\n        tag=\"label\">\n      <Flex>\n        { children }\n      </Flex>\n\n      <Flex grow shrink textColor=\"text-shade-1\">\n        <Text ellipsis size=\"x1\" strong>{ label }</Text>\n      </Flex>\n    </Flex>\n  );\n})"
				}
			],
			"groups": [
				{
					"title": "Interfaces",
					"kind": 256,
					"children": [
						661
					]
				},
				{
					"title": "Variables",
					"kind": 32,
					"children": [
						697
					]
				}
			],
			"sources": [
				{
					"fileName": "src/SelectInputLabel/SelectInputLabel.tsx",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 1524,
			"name": "\"Separator/Separator\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "/Users/harry/Projects/personal/preshape/src/Separator/Separator.tsx",
			"children": [
				{
					"id": 1525,
					"name": "SeparatorProps",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"children": [
						{
							"id": 1526,
							"name": "absolute",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Quick way of absolutely position to common places"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 58,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "fullscreen"
									},
									{
										"type": "stringLiteral",
										"value": "top"
									},
									{
										"type": "stringLiteral",
										"value": "top-left"
									},
									{
										"type": "stringLiteral",
										"value": "top-right"
									},
									{
										"type": "stringLiteral",
										"value": "bottom"
									},
									{
										"type": "stringLiteral",
										"value": "bottom-left"
									},
									{
										"type": "stringLiteral",
										"value": "bottom-right"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.absolute",
								"id": 3
							}
						},
						{
							"id": 1527,
							"name": "backgroundColor",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Background colour to be applied, shades are taken from the current\ntheme."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 70,
									"character": 17
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeColor",
								"id": 30
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.backgroundColor",
								"id": 4
							}
						},
						{
							"id": 1528,
							"name": "borderColor",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Border colour to be applied, shades are taken from the current\ntheme."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 75,
									"character": 13
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeColor",
								"id": 30
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.borderColor",
								"id": 5
							}
						},
						{
							"id": 1529,
							"name": "borderRadius",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Adds styling of a border radius to one of the size multiples."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 79,
									"character": 14
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "x1"
									},
									{
										"type": "stringLiteral",
										"value": "x2"
									},
									{
										"type": "stringLiteral",
										"value": "x3"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.borderRadius",
								"id": 6
							}
						},
						{
							"id": 1530,
							"name": "borderSize",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Thickness of the border to be applied"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 81,
									"character": 12
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "x1"
									},
									{
										"type": "stringLiteral",
										"value": "x2"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.borderSize",
								"id": 7
							}
						},
						{
							"id": 1531,
							"name": "clickable",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Adds styling to indicate that the element is clickable"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 83,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.clickable",
								"id": 8
							}
						},
						{
							"id": 1532,
							"name": "container",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies relative positioning to contain child elements."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 85,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.container",
								"id": 9
							}
						},
						{
							"id": 1533,
							"name": "display",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies display styling"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 87,
									"character": 9
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "block"
									},
									{
										"type": "stringLiteral",
										"value": "inline-block"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.display",
								"id": 10
							}
						},
						{
							"id": 1534,
							"name": "fixed",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Quick way of absolutely position to common places"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 89,
									"character": 7
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "fullscreen"
									},
									{
										"type": "stringLiteral",
										"value": "top"
									},
									{
										"type": "stringLiteral",
										"value": "top-left"
									},
									{
										"type": "stringLiteral",
										"value": "top-right"
									},
									{
										"type": "stringLiteral",
										"value": "bottom"
									},
									{
										"type": "stringLiteral",
										"value": "bottom-left"
									},
									{
										"type": "stringLiteral",
										"value": "bottom-right"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.fixed",
								"id": 11
							}
						},
						{
							"id": 1535,
							"name": "height",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Fixed height applied through inline styling"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 98,
									"character": 8
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.height",
								"id": 12
							}
						},
						{
							"id": 1536,
							"name": "margin",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Margins applied for the global spacing variables"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 100,
									"character": 8
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeSize",
								"id": 31
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.margin",
								"id": 13
							}
						},
						{
							"id": 1537,
							"name": "maxWidth",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Max width applied through inline styling"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 102,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.maxWidth",
								"id": 14
							}
						},
						{
							"id": 1538,
							"name": "minHeight",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Max height applied through inline styling"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 104,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.minHeight",
								"id": 15
							}
						},
						{
							"id": 1539,
							"name": "minWidth",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Min width applied through inline style"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 106,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.minWidth",
								"id": 16
							}
						},
						{
							"id": 1540,
							"name": "overflow",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Overflow"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 108,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "stringLiteral",
										"value": "hidden"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.overflow",
								"id": 17
							}
						},
						{
							"id": 1541,
							"name": "padding",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Padding applied for the global spacing variables"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 110,
									"character": 9
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeSize",
								"id": 31
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.padding",
								"id": 18
							}
						},
						{
							"id": 1542,
							"name": "paddingHorizontal",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Horizontal padding applied for the global spacing variables"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 112,
									"character": 19
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeSize",
								"id": 31
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.paddingHorizontal",
								"id": 19
							}
						},
						{
							"id": 1543,
							"name": "paddingVertical",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Vertical pa?dding applied for the global spacing variables"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 114,
									"character": 17
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeSize",
								"id": 31
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.paddingVertical",
								"id": 20
							}
						},
						{
							"id": 1544,
							"name": "scrollable",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies overflow styling to enable/disable scrolling."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 116,
									"character": 12
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.scrollable",
								"id": 21
							}
						},
						{
							"id": 1545,
							"name": "tag",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Any valid HTML or SVG element tag.",
								"tags": [
									{
										"tag": "reference",
										"text": "false\n"
									}
								]
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 122,
									"character": 5
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeAllElementTags",
								"id": 34
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.tag",
								"id": 22
							}
						},
						{
							"id": 1546,
							"name": "textColor",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Text colour to be applied."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 126,
									"character": 11
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeColor",
								"id": 30
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.textColor",
								"id": 23
							}
						},
						{
							"id": 1547,
							"name": "theme",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Theme applied to this element and inherited for child elements (until\na descendant theme is applied)."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 131,
									"character": 7
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeTheme",
								"id": 35
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.theme",
								"id": 24
							}
						},
						{
							"id": 1548,
							"name": "width",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Fixed width applied through inline styling"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 133,
									"character": 7
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.width",
								"id": 25
							}
						},
						{
							"id": 1549,
							"name": "zIndex",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "z-index number for layering elements."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 135,
									"character": 8
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "number"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.zIndex",
								"id": 26
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								1526,
								1527,
								1528,
								1529,
								1530,
								1531,
								1532,
								1533,
								1534,
								1535,
								1536,
								1537,
								1538,
								1539,
								1540,
								1541,
								1542,
								1543,
								1544,
								1545,
								1546,
								1547,
								1548,
								1549
							]
						}
					],
					"sources": [
						{
							"fileName": "src/Separator/Separator.tsx",
							"line": 6,
							"character": 31
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"name": "BaseProps",
							"id": 2
						}
					]
				},
				{
					"id": 1550,
					"name": "Separator",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "src/Separator/Separator.tsx",
							"line": 8,
							"character": 15
						}
					],
					"type": {
						"type": "reference",
						"name": "ForwardRefExoticComponent",
						"typeArguments": [
							{
								"type": "intersection",
								"types": [
									{
										"type": "reference",
										"name": "SeparatorProps",
										"id": 1525
									},
									{
										"type": "reflection",
										"declaration": {
											"id": 1551,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {}
										}
									},
									{
										"type": "reference",
										"name": "RefAttributes",
										"typeArguments": [
											{
												"type": "reference",
												"name": "HTMLElement"
											}
										]
									}
								]
							}
						]
					},
					"defaultValue": " React.forwardRef<HTMLElement, Attributes<HTMLElement, SeparatorProps>>((props, ref) => {\n  const {\n    borderColor = 'text-shade-1',\n    borderSize = 'x1',\n    ...rest\n  } = props;\n\n  return (\n    <Base\n        { ...rest }\n        borderColor={ borderColor }\n        borderSize={ borderSize }\n        className=\"Separator\"\n        ref={ ref } />\n  );\n})"
				}
			],
			"groups": [
				{
					"title": "Interfaces",
					"kind": 256,
					"children": [
						1525
					]
				},
				{
					"title": "Variables",
					"kind": 32,
					"children": [
						1550
					]
				}
			],
			"sources": [
				{
					"fileName": "src/Separator/Separator.tsx",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 1552,
			"name": "\"Tab/Tab\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "/Users/harry/Projects/personal/preshape/src/Tab/Tab.tsx",
			"children": [
				{
					"id": 1553,
					"name": "TabProps",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"children": [
						{
							"id": 1555,
							"name": "absolute",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Quick way of absolutely position to common places"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 58,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "fullscreen"
									},
									{
										"type": "stringLiteral",
										"value": "top"
									},
									{
										"type": "stringLiteral",
										"value": "top-left"
									},
									{
										"type": "stringLiteral",
										"value": "top-right"
									},
									{
										"type": "stringLiteral",
										"value": "bottom"
									},
									{
										"type": "stringLiteral",
										"value": "bottom-left"
									},
									{
										"type": "stringLiteral",
										"value": "bottom-right"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.absolute",
								"id": 3
							}
						},
						{
							"id": 1554,
							"name": "active",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies the active styling to the Tab"
							},
							"sources": [
								{
									"fileName": "src/Tab/Tab.tsx",
									"line": 8,
									"character": 8
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							}
						},
						{
							"id": 1556,
							"name": "backgroundColor",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Background colour to be applied, shades are taken from the current\ntheme."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 70,
									"character": 17
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeColor",
								"id": 30
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.backgroundColor",
								"id": 4
							}
						},
						{
							"id": 1557,
							"name": "borderColor",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Border colour to be applied, shades are taken from the current\ntheme."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 75,
									"character": 13
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeColor",
								"id": 30
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.borderColor",
								"id": 5
							}
						},
						{
							"id": 1558,
							"name": "borderRadius",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Adds styling of a border radius to one of the size multiples."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 79,
									"character": 14
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "x1"
									},
									{
										"type": "stringLiteral",
										"value": "x2"
									},
									{
										"type": "stringLiteral",
										"value": "x3"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.borderRadius",
								"id": 6
							}
						},
						{
							"id": 1559,
							"name": "borderSize",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Thickness of the border to be applied"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 81,
									"character": 12
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "x1"
									},
									{
										"type": "stringLiteral",
										"value": "x2"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.borderSize",
								"id": 7
							}
						},
						{
							"id": 1560,
							"name": "clickable",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Adds styling to indicate that the element is clickable"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 83,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.clickable",
								"id": 8
							}
						},
						{
							"id": 1561,
							"name": "container",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies relative positioning to contain child elements."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 85,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.container",
								"id": 9
							}
						},
						{
							"id": 1562,
							"name": "display",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies display styling"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 87,
									"character": 9
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "block"
									},
									{
										"type": "stringLiteral",
										"value": "inline-block"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.display",
								"id": 10
							}
						},
						{
							"id": 1563,
							"name": "fixed",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Quick way of absolutely position to common places"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 89,
									"character": 7
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "fullscreen"
									},
									{
										"type": "stringLiteral",
										"value": "top"
									},
									{
										"type": "stringLiteral",
										"value": "top-left"
									},
									{
										"type": "stringLiteral",
										"value": "top-right"
									},
									{
										"type": "stringLiteral",
										"value": "bottom"
									},
									{
										"type": "stringLiteral",
										"value": "bottom-left"
									},
									{
										"type": "stringLiteral",
										"value": "bottom-right"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.fixed",
								"id": 11
							}
						},
						{
							"id": 1564,
							"name": "height",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Fixed height applied through inline styling"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 98,
									"character": 8
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.height",
								"id": 12
							}
						},
						{
							"id": 1565,
							"name": "margin",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Margins applied for the global spacing variables"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 100,
									"character": 8
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeSize",
								"id": 31
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.margin",
								"id": 13
							}
						},
						{
							"id": 1566,
							"name": "maxWidth",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Max width applied through inline styling"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 102,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.maxWidth",
								"id": 14
							}
						},
						{
							"id": 1567,
							"name": "minHeight",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Max height applied through inline styling"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 104,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.minHeight",
								"id": 15
							}
						},
						{
							"id": 1568,
							"name": "minWidth",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Min width applied through inline style"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 106,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.minWidth",
								"id": 16
							}
						},
						{
							"id": 1569,
							"name": "overflow",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Overflow"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 108,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "stringLiteral",
										"value": "hidden"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.overflow",
								"id": 17
							}
						},
						{
							"id": 1570,
							"name": "padding",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Padding applied for the global spacing variables"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 110,
									"character": 9
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeSize",
								"id": 31
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.padding",
								"id": 18
							}
						},
						{
							"id": 1571,
							"name": "paddingHorizontal",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Horizontal padding applied for the global spacing variables"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 112,
									"character": 19
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeSize",
								"id": 31
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.paddingHorizontal",
								"id": 19
							}
						},
						{
							"id": 1572,
							"name": "paddingVertical",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Vertical pa?dding applied for the global spacing variables"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 114,
									"character": 17
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeSize",
								"id": 31
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.paddingVertical",
								"id": 20
							}
						},
						{
							"id": 1573,
							"name": "scrollable",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies overflow styling to enable/disable scrolling."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 116,
									"character": 12
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.scrollable",
								"id": 21
							}
						},
						{
							"id": 1574,
							"name": "tag",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Any valid HTML or SVG element tag.",
								"tags": [
									{
										"tag": "reference",
										"text": "false\n"
									}
								]
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 122,
									"character": 5
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeAllElementTags",
								"id": 34
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.tag",
								"id": 22
							}
						},
						{
							"id": 1575,
							"name": "textColor",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Text colour to be applied."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 126,
									"character": 11
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeColor",
								"id": 30
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.textColor",
								"id": 23
							}
						},
						{
							"id": 1576,
							"name": "theme",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Theme applied to this element and inherited for child elements (until\na descendant theme is applied)."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 131,
									"character": 7
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeTheme",
								"id": 35
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.theme",
								"id": 24
							}
						},
						{
							"id": 1577,
							"name": "width",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Fixed width applied through inline styling"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 133,
									"character": 7
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.width",
								"id": 25
							}
						},
						{
							"id": 1578,
							"name": "zIndex",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "z-index number for layering elements."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 135,
									"character": 8
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "number"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.zIndex",
								"id": 26
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								1555,
								1554,
								1556,
								1557,
								1558,
								1559,
								1560,
								1561,
								1562,
								1563,
								1564,
								1565,
								1566,
								1567,
								1568,
								1569,
								1570,
								1571,
								1572,
								1573,
								1574,
								1575,
								1576,
								1577,
								1578
							]
						}
					],
					"sources": [
						{
							"fileName": "src/Tab/Tab.tsx",
							"line": 6,
							"character": 25
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"name": "BaseProps",
							"id": 2
						}
					]
				},
				{
					"id": 1579,
					"name": "Tab",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "src/Tab/Tab.tsx",
							"line": 11,
							"character": 9
						}
					],
					"type": {
						"type": "reference",
						"name": "ForwardRefExoticComponent",
						"typeArguments": [
							{
								"type": "intersection",
								"types": [
									{
										"type": "reference",
										"name": "TabProps",
										"id": 1553
									},
									{
										"type": "reflection",
										"declaration": {
											"id": 1580,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {}
										}
									},
									{
										"type": "reference",
										"name": "RefAttributes",
										"typeArguments": [
											{
												"type": "reference",
												"name": "HTMLElement"
											}
										]
									}
								]
							}
						]
					},
					"defaultValue": " React.forwardRef<HTMLElement, Attributes<HTMLElement, TabProps>>((props, ref) => {\n  const { active, children, ...rest } = props;\n  const classes = classnames('Tab', {\n    'Tab--active': active,\n  });\n\n  return (\n    <Base { ...rest } className={ classes } ref={ ref }>\n      <Base\n          backgroundColor={ active ? undefined : 'text-shade-1' }\n          className=\"Tab__background\"\n          textColor={ active ? undefined : 'background-shade-1' }>\n        <Link\n            display=\"block\"\n            padding=\"x3\"\n            size=\"x1\"\n            strong>\n          { children }\n        </Link>\n      </Base>\n    </Base>\n  );\n})"
				}
			],
			"groups": [
				{
					"title": "Interfaces",
					"kind": 256,
					"children": [
						1553
					]
				},
				{
					"title": "Variables",
					"kind": 32,
					"children": [
						1579
					]
				}
			],
			"sources": [
				{
					"fileName": "src/Tab/Tab.tsx",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 1581,
			"name": "\"Tab/TabContent\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "/Users/harry/Projects/personal/preshape/src/Tab/TabContent.tsx",
			"children": [
				{
					"id": 1582,
					"name": "TabContentProps",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"children": [
						{
							"id": 1593,
							"name": "absolute",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Quick way of absolutely position to common places"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 58,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "fullscreen"
									},
									{
										"type": "stringLiteral",
										"value": "top"
									},
									{
										"type": "stringLiteral",
										"value": "top-left"
									},
									{
										"type": "stringLiteral",
										"value": "top-right"
									},
									{
										"type": "stringLiteral",
										"value": "bottom"
									},
									{
										"type": "stringLiteral",
										"value": "bottom-left"
									},
									{
										"type": "stringLiteral",
										"value": "bottom-right"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.absolute",
								"id": 3
							}
						},
						{
							"id": 1583,
							"name": "alignChildren",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Short cut child alignment property for both alignChildrenHorizontal and\nalignChildrenVertical."
							},
							"sources": [
								{
									"fileName": "src/Flex/Flex.tsx",
									"line": 11,
									"character": 15
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "start"
									},
									{
										"type": "stringLiteral",
										"value": "middle"
									},
									{
										"type": "stringLiteral",
										"value": "end"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "FlexProps.alignChildren",
								"id": 240
							}
						},
						{
							"id": 1584,
							"name": "alignChildrenHorizontal",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Horizontal alignment of children flex items."
							},
							"sources": [
								{
									"fileName": "src/Flex/Flex.tsx",
									"line": 13,
									"character": 25
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "start"
									},
									{
										"type": "stringLiteral",
										"value": "middle"
									},
									{
										"type": "stringLiteral",
										"value": "end"
									},
									{
										"type": "stringLiteral",
										"value": "around"
									},
									{
										"type": "stringLiteral",
										"value": "between"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "FlexProps.alignChildrenHorizontal",
								"id": 241
							}
						},
						{
							"id": 1585,
							"name": "alignChildrenVertical",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Vertical alignment of children flex items."
							},
							"sources": [
								{
									"fileName": "src/Flex/Flex.tsx",
									"line": 15,
									"character": 23
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "start"
									},
									{
										"type": "stringLiteral",
										"value": "middle"
									},
									{
										"type": "stringLiteral",
										"value": "end"
									},
									{
										"type": "stringLiteral",
										"value": "around"
									},
									{
										"type": "stringLiteral",
										"value": "between"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "FlexProps.alignChildrenVertical",
								"id": 242
							}
						},
						{
							"id": 1586,
							"name": "alignSelf",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Flex item alignment property (changes with parent direction)."
							},
							"sources": [
								{
									"fileName": "src/Flex/Flex.tsx",
									"line": 17,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "start"
									},
									{
										"type": "stringLiteral",
										"value": "middle"
									},
									{
										"type": "stringLiteral",
										"value": "end"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "FlexProps.alignSelf",
								"id": 243
							}
						},
						{
							"id": 1594,
							"name": "backgroundColor",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Background colour to be applied, shades are taken from the current\ntheme."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 70,
									"character": 17
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeColor",
								"id": 30
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.backgroundColor",
								"id": 4
							}
						},
						{
							"id": 1587,
							"name": "basis",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Initial width to flex from for a child item."
							},
							"sources": [
								{
									"fileName": "src/Flex/Flex.tsx",
									"line": 19,
									"character": 7
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "content"
									},
									{
										"type": "stringLiteral",
										"value": "container"
									},
									{
										"type": "stringLiteral",
										"value": "none"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "FlexProps.basis",
								"id": 244
							}
						},
						{
							"id": 1595,
							"name": "borderColor",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Border colour to be applied, shades are taken from the current\ntheme."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 75,
									"character": 13
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeColor",
								"id": 30
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.borderColor",
								"id": 5
							}
						},
						{
							"id": 1596,
							"name": "borderRadius",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Adds styling of a border radius to one of the size multiples."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 79,
									"character": 14
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "x1"
									},
									{
										"type": "stringLiteral",
										"value": "x2"
									},
									{
										"type": "stringLiteral",
										"value": "x3"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.borderRadius",
								"id": 6
							}
						},
						{
							"id": 1597,
							"name": "borderSize",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Thickness of the border to be applied"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 81,
									"character": 12
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "x1"
									},
									{
										"type": "stringLiteral",
										"value": "x2"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.borderSize",
								"id": 7
							}
						},
						{
							"id": 1598,
							"name": "clickable",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Adds styling to indicate that the element is clickable"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 83,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.clickable",
								"id": 8
							}
						},
						{
							"id": 1599,
							"name": "container",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies relative positioning to contain child elements."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 85,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.container",
								"id": 9
							}
						},
						{
							"id": 1588,
							"name": "direction",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Direction on which way to flex items."
							},
							"sources": [
								{
									"fileName": "src/Flex/Flex.tsx",
									"line": 21,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "horizontal"
									},
									{
										"type": "stringLiteral",
										"value": "vertical"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "FlexProps.direction",
								"id": 245
							}
						},
						{
							"id": 1600,
							"name": "display",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies display styling"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 87,
									"character": 9
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "block"
									},
									{
										"type": "stringLiteral",
										"value": "inline-block"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.display",
								"id": 10
							}
						},
						{
							"id": 1601,
							"name": "fixed",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Quick way of absolutely position to common places"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 89,
									"character": 7
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "fullscreen"
									},
									{
										"type": "stringLiteral",
										"value": "top"
									},
									{
										"type": "stringLiteral",
										"value": "top-left"
									},
									{
										"type": "stringLiteral",
										"value": "top-right"
									},
									{
										"type": "stringLiteral",
										"value": "bottom"
									},
									{
										"type": "stringLiteral",
										"value": "bottom-left"
									},
									{
										"type": "stringLiteral",
										"value": "bottom-right"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.fixed",
								"id": 11
							}
						},
						{
							"id": 1589,
							"name": "gap",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Spacing applied between child flex items, values are global spacing variables."
							},
							"sources": [
								{
									"fileName": "src/Flex/Flex.tsx",
									"line": 23,
									"character": 5
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeSize",
								"id": 31
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "FlexProps.gap",
								"id": 246
							}
						},
						{
							"id": 1590,
							"name": "grow",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Flex item property if it should grow with available space."
							},
							"sources": [
								{
									"fileName": "src/Flex/Flex.tsx",
									"line": 25,
									"character": 6
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "FlexProps.grow",
								"id": 247
							}
						},
						{
							"id": 1602,
							"name": "height",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Fixed height applied through inline styling"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 98,
									"character": 8
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.height",
								"id": 12
							}
						},
						{
							"id": 1603,
							"name": "margin",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Margins applied for the global spacing variables"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 100,
									"character": 8
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeSize",
								"id": 31
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.margin",
								"id": 13
							}
						},
						{
							"id": 1604,
							"name": "maxWidth",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Max width applied through inline styling"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 102,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.maxWidth",
								"id": 14
							}
						},
						{
							"id": 1605,
							"name": "minHeight",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Max height applied through inline styling"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 104,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.minHeight",
								"id": 15
							}
						},
						{
							"id": 1606,
							"name": "minWidth",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Min width applied through inline style"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 106,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.minWidth",
								"id": 16
							}
						},
						{
							"id": 1607,
							"name": "overflow",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Overflow"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 108,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "stringLiteral",
										"value": "hidden"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.overflow",
								"id": 17
							}
						},
						{
							"id": 1608,
							"name": "padding",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Padding applied for the global spacing variables"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 110,
									"character": 9
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeSize",
								"id": 31
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.padding",
								"id": 18
							}
						},
						{
							"id": 1609,
							"name": "paddingHorizontal",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Horizontal padding applied for the global spacing variables"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 112,
									"character": 19
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeSize",
								"id": 31
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.paddingHorizontal",
								"id": 19
							}
						},
						{
							"id": 1610,
							"name": "paddingVertical",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Vertical pa?dding applied for the global spacing variables"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 114,
									"character": 17
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeSize",
								"id": 31
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.paddingVertical",
								"id": 20
							}
						},
						{
							"id": 1611,
							"name": "scrollable",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies overflow styling to enable/disable scrolling."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 116,
									"character": 12
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.scrollable",
								"id": 21
							}
						},
						{
							"id": 1591,
							"name": "shrink",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Flex item property if it should shrink."
							},
							"sources": [
								{
									"fileName": "src/Flex/Flex.tsx",
									"line": 27,
									"character": 8
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "FlexProps.shrink",
								"id": 248
							}
						},
						{
							"id": 1612,
							"name": "tag",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Any valid HTML or SVG element tag.",
								"tags": [
									{
										"tag": "reference",
										"text": "false\n"
									}
								]
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 122,
									"character": 5
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeAllElementTags",
								"id": 34
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.tag",
								"id": 22
							}
						},
						{
							"id": 1613,
							"name": "textColor",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Text colour to be applied."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 126,
									"character": 11
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeColor",
								"id": 30
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.textColor",
								"id": 23
							}
						},
						{
							"id": 1614,
							"name": "theme",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Theme applied to this element and inherited for child elements (until\na descendant theme is applied)."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 131,
									"character": 7
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeTheme",
								"id": 35
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.theme",
								"id": 24
							}
						},
						{
							"id": 1615,
							"name": "width",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Fixed width applied through inline styling"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 133,
									"character": 7
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.width",
								"id": 25
							}
						},
						{
							"id": 1592,
							"name": "wrap",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Flag to allow flex items to wrap over to new lines"
							},
							"sources": [
								{
									"fileName": "src/Flex/Flex.tsx",
									"line": 29,
									"character": 6
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "FlexProps.wrap",
								"id": 249
							}
						},
						{
							"id": 1616,
							"name": "zIndex",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "z-index number for layering elements."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 135,
									"character": 8
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "number"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.zIndex",
								"id": 26
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								1593,
								1583,
								1584,
								1585,
								1586,
								1594,
								1587,
								1595,
								1596,
								1597,
								1598,
								1599,
								1588,
								1600,
								1601,
								1589,
								1590,
								1602,
								1603,
								1604,
								1605,
								1606,
								1607,
								1608,
								1609,
								1610,
								1611,
								1591,
								1612,
								1613,
								1614,
								1615,
								1592,
								1616
							]
						}
					],
					"sources": [
						{
							"fileName": "src/Tab/TabContent.tsx",
							"line": 5,
							"character": 32
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"name": "FlexProps",
							"id": 239
						}
					]
				},
				{
					"id": 1617,
					"name": "TabContent",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "src/Tab/TabContent.tsx",
							"line": 7,
							"character": 16
						}
					],
					"type": {
						"type": "reference",
						"name": "ForwardRefExoticComponent",
						"typeArguments": [
							{
								"type": "intersection",
								"types": [
									{
										"type": "reference",
										"name": "TabContentProps",
										"id": 1582
									},
									{
										"type": "reflection",
										"declaration": {
											"id": 1618,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {}
										}
									},
									{
										"type": "reference",
										"name": "RefAttributes",
										"typeArguments": [
											{
												"type": "reference",
												"name": "HTMLElement"
											}
										]
									}
								]
							}
						]
					},
					"defaultValue": " React.forwardRef<HTMLElement, Attributes<HTMLElement, TabContentProps>>((props, ref) => {\n  return (\n    <Flex { ...props }\n        className=\"TabContent\"\n        ref={ ref } />\n  );\n})"
				}
			],
			"groups": [
				{
					"title": "Interfaces",
					"kind": 256,
					"children": [
						1582
					]
				},
				{
					"title": "Variables",
					"kind": 32,
					"children": [
						1617
					]
				}
			],
			"sources": [
				{
					"fileName": "src/Tab/TabContent.tsx",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 1619,
			"name": "\"Tab/Tabs\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "/Users/harry/Projects/personal/preshape/src/Tab/Tabs.tsx",
			"children": [
				{
					"id": 1620,
					"name": "TabsProps",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"children": [
						{
							"id": 1631,
							"name": "absolute",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Quick way of absolutely position to common places"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 58,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "fullscreen"
									},
									{
										"type": "stringLiteral",
										"value": "top"
									},
									{
										"type": "stringLiteral",
										"value": "top-left"
									},
									{
										"type": "stringLiteral",
										"value": "top-right"
									},
									{
										"type": "stringLiteral",
										"value": "bottom"
									},
									{
										"type": "stringLiteral",
										"value": "bottom-left"
									},
									{
										"type": "stringLiteral",
										"value": "bottom-right"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.absolute",
								"id": 3
							}
						},
						{
							"id": 1621,
							"name": "alignChildren",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Short cut child alignment property for both alignChildrenHorizontal and\nalignChildrenVertical."
							},
							"sources": [
								{
									"fileName": "src/Flex/Flex.tsx",
									"line": 11,
									"character": 15
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "start"
									},
									{
										"type": "stringLiteral",
										"value": "middle"
									},
									{
										"type": "stringLiteral",
										"value": "end"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "FlexProps.alignChildren",
								"id": 240
							}
						},
						{
							"id": 1622,
							"name": "alignChildrenHorizontal",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Horizontal alignment of children flex items."
							},
							"sources": [
								{
									"fileName": "src/Flex/Flex.tsx",
									"line": 13,
									"character": 25
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "start"
									},
									{
										"type": "stringLiteral",
										"value": "middle"
									},
									{
										"type": "stringLiteral",
										"value": "end"
									},
									{
										"type": "stringLiteral",
										"value": "around"
									},
									{
										"type": "stringLiteral",
										"value": "between"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "FlexProps.alignChildrenHorizontal",
								"id": 241
							}
						},
						{
							"id": 1623,
							"name": "alignChildrenVertical",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Vertical alignment of children flex items."
							},
							"sources": [
								{
									"fileName": "src/Flex/Flex.tsx",
									"line": 15,
									"character": 23
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "start"
									},
									{
										"type": "stringLiteral",
										"value": "middle"
									},
									{
										"type": "stringLiteral",
										"value": "end"
									},
									{
										"type": "stringLiteral",
										"value": "around"
									},
									{
										"type": "stringLiteral",
										"value": "between"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "FlexProps.alignChildrenVertical",
								"id": 242
							}
						},
						{
							"id": 1624,
							"name": "alignSelf",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Flex item alignment property (changes with parent direction)."
							},
							"sources": [
								{
									"fileName": "src/Flex/Flex.tsx",
									"line": 17,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "start"
									},
									{
										"type": "stringLiteral",
										"value": "middle"
									},
									{
										"type": "stringLiteral",
										"value": "end"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "FlexProps.alignSelf",
								"id": 243
							}
						},
						{
							"id": 1632,
							"name": "backgroundColor",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Background colour to be applied, shades are taken from the current\ntheme."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 70,
									"character": 17
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeColor",
								"id": 30
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.backgroundColor",
								"id": 4
							}
						},
						{
							"id": 1625,
							"name": "basis",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Initial width to flex from for a child item."
							},
							"sources": [
								{
									"fileName": "src/Flex/Flex.tsx",
									"line": 19,
									"character": 7
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "content"
									},
									{
										"type": "stringLiteral",
										"value": "container"
									},
									{
										"type": "stringLiteral",
										"value": "none"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "FlexProps.basis",
								"id": 244
							}
						},
						{
							"id": 1633,
							"name": "borderColor",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Border colour to be applied, shades are taken from the current\ntheme."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 75,
									"character": 13
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeColor",
								"id": 30
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.borderColor",
								"id": 5
							}
						},
						{
							"id": 1634,
							"name": "borderRadius",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Adds styling of a border radius to one of the size multiples."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 79,
									"character": 14
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "x1"
									},
									{
										"type": "stringLiteral",
										"value": "x2"
									},
									{
										"type": "stringLiteral",
										"value": "x3"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.borderRadius",
								"id": 6
							}
						},
						{
							"id": 1635,
							"name": "borderSize",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Thickness of the border to be applied"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 81,
									"character": 12
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "x1"
									},
									{
										"type": "stringLiteral",
										"value": "x2"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.borderSize",
								"id": 7
							}
						},
						{
							"id": 1636,
							"name": "clickable",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Adds styling to indicate that the element is clickable"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 83,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.clickable",
								"id": 8
							}
						},
						{
							"id": 1637,
							"name": "container",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies relative positioning to contain child elements."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 85,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.container",
								"id": 9
							}
						},
						{
							"id": 1626,
							"name": "direction",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Direction on which way to flex items."
							},
							"sources": [
								{
									"fileName": "src/Flex/Flex.tsx",
									"line": 21,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "horizontal"
									},
									{
										"type": "stringLiteral",
										"value": "vertical"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "FlexProps.direction",
								"id": 245
							}
						},
						{
							"id": 1638,
							"name": "display",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies display styling"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 87,
									"character": 9
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "block"
									},
									{
										"type": "stringLiteral",
										"value": "inline-block"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.display",
								"id": 10
							}
						},
						{
							"id": 1639,
							"name": "fixed",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Quick way of absolutely position to common places"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 89,
									"character": 7
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "fullscreen"
									},
									{
										"type": "stringLiteral",
										"value": "top"
									},
									{
										"type": "stringLiteral",
										"value": "top-left"
									},
									{
										"type": "stringLiteral",
										"value": "top-right"
									},
									{
										"type": "stringLiteral",
										"value": "bottom"
									},
									{
										"type": "stringLiteral",
										"value": "bottom-left"
									},
									{
										"type": "stringLiteral",
										"value": "bottom-right"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.fixed",
								"id": 11
							}
						},
						{
							"id": 1627,
							"name": "gap",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Spacing applied between child flex items, values are global spacing variables."
							},
							"sources": [
								{
									"fileName": "src/Flex/Flex.tsx",
									"line": 23,
									"character": 5
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeSize",
								"id": 31
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "FlexProps.gap",
								"id": 246
							}
						},
						{
							"id": 1628,
							"name": "grow",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Flex item property if it should grow with available space."
							},
							"sources": [
								{
									"fileName": "src/Flex/Flex.tsx",
									"line": 25,
									"character": 6
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "FlexProps.grow",
								"id": 247
							}
						},
						{
							"id": 1640,
							"name": "height",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Fixed height applied through inline styling"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 98,
									"character": 8
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.height",
								"id": 12
							}
						},
						{
							"id": 1641,
							"name": "margin",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Margins applied for the global spacing variables"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 100,
									"character": 8
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeSize",
								"id": 31
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.margin",
								"id": 13
							}
						},
						{
							"id": 1642,
							"name": "maxWidth",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Max width applied through inline styling"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 102,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.maxWidth",
								"id": 14
							}
						},
						{
							"id": 1643,
							"name": "minHeight",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Max height applied through inline styling"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 104,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.minHeight",
								"id": 15
							}
						},
						{
							"id": 1644,
							"name": "minWidth",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Min width applied through inline style"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 106,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.minWidth",
								"id": 16
							}
						},
						{
							"id": 1645,
							"name": "overflow",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Overflow"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 108,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "stringLiteral",
										"value": "hidden"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.overflow",
								"id": 17
							}
						},
						{
							"id": 1646,
							"name": "padding",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Padding applied for the global spacing variables"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 110,
									"character": 9
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeSize",
								"id": 31
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.padding",
								"id": 18
							}
						},
						{
							"id": 1647,
							"name": "paddingHorizontal",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Horizontal padding applied for the global spacing variables"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 112,
									"character": 19
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeSize",
								"id": 31
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.paddingHorizontal",
								"id": 19
							}
						},
						{
							"id": 1648,
							"name": "paddingVertical",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Vertical pa?dding applied for the global spacing variables"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 114,
									"character": 17
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeSize",
								"id": 31
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.paddingVertical",
								"id": 20
							}
						},
						{
							"id": 1649,
							"name": "scrollable",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies overflow styling to enable/disable scrolling."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 116,
									"character": 12
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.scrollable",
								"id": 21
							}
						},
						{
							"id": 1629,
							"name": "shrink",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Flex item property if it should shrink."
							},
							"sources": [
								{
									"fileName": "src/Flex/Flex.tsx",
									"line": 27,
									"character": 8
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "FlexProps.shrink",
								"id": 248
							}
						},
						{
							"id": 1650,
							"name": "tag",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Any valid HTML or SVG element tag.",
								"tags": [
									{
										"tag": "reference",
										"text": "false\n"
									}
								]
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 122,
									"character": 5
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeAllElementTags",
								"id": 34
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.tag",
								"id": 22
							}
						},
						{
							"id": 1651,
							"name": "textColor",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Text colour to be applied."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 126,
									"character": 11
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeColor",
								"id": 30
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.textColor",
								"id": 23
							}
						},
						{
							"id": 1652,
							"name": "theme",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Theme applied to this element and inherited for child elements (until\na descendant theme is applied)."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 131,
									"character": 7
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeTheme",
								"id": 35
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.theme",
								"id": 24
							}
						},
						{
							"id": 1653,
							"name": "width",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Fixed width applied through inline styling"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 133,
									"character": 7
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.width",
								"id": 25
							}
						},
						{
							"id": 1630,
							"name": "wrap",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Flag to allow flex items to wrap over to new lines"
							},
							"sources": [
								{
									"fileName": "src/Flex/Flex.tsx",
									"line": 29,
									"character": 6
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "FlexProps.wrap",
								"id": 249
							}
						},
						{
							"id": 1654,
							"name": "zIndex",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "z-index number for layering elements."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 135,
									"character": 8
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "number"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.zIndex",
								"id": 26
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								1631,
								1621,
								1622,
								1623,
								1624,
								1632,
								1625,
								1633,
								1634,
								1635,
								1636,
								1637,
								1626,
								1638,
								1639,
								1627,
								1628,
								1640,
								1641,
								1642,
								1643,
								1644,
								1645,
								1646,
								1647,
								1648,
								1649,
								1629,
								1650,
								1651,
								1652,
								1653,
								1630,
								1654
							]
						}
					],
					"sources": [
						{
							"fileName": "src/Tab/Tabs.tsx",
							"line": 6,
							"character": 26
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"name": "FlexProps",
							"id": 239
						}
					]
				},
				{
					"id": 1655,
					"name": "Tabs",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "src/Tab/Tabs.tsx",
							"line": 8,
							"character": 10
						}
					],
					"type": {
						"type": "reference",
						"name": "ForwardRefExoticComponent",
						"typeArguments": [
							{
								"type": "intersection",
								"types": [
									{
										"type": "reference",
										"name": "TabsProps",
										"id": 1620
									},
									{
										"type": "reflection",
										"declaration": {
											"id": 1656,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {}
										}
									},
									{
										"type": "reference",
										"name": "RefAttributes",
										"typeArguments": [
											{
												"type": "reference",
												"name": "HTMLElement"
											}
										]
									}
								]
							}
						]
					},
					"defaultValue": " React.forwardRef<HTMLElement, Attributes<HTMLElement, TabsProps>>((props, ref) => {\n  return (\n    <Flex { ...props } className=\"Tabs\" ref={ ref } />\n  );\n})"
				}
			],
			"groups": [
				{
					"title": "Interfaces",
					"kind": 256,
					"children": [
						1620
					]
				},
				{
					"title": "Variables",
					"kind": 32,
					"children": [
						1655
					]
				}
			],
			"sources": [
				{
					"fileName": "src/Tab/Tabs.tsx",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 1657,
			"name": "\"Table/Table\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "/Users/harry/Projects/personal/preshape/src/Table/Table.tsx",
			"children": [
				{
					"id": 1658,
					"name": "TableProps",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"children": [
						{
							"id": 1673,
							"name": "absolute",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Quick way of absolutely position to common places"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 58,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "fullscreen"
									},
									{
										"type": "stringLiteral",
										"value": "top"
									},
									{
										"type": "stringLiteral",
										"value": "top-left"
									},
									{
										"type": "stringLiteral",
										"value": "top-right"
									},
									{
										"type": "stringLiteral",
										"value": "bottom"
									},
									{
										"type": "stringLiteral",
										"value": "bottom-left"
									},
									{
										"type": "stringLiteral",
										"value": "bottom-right"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.absolute",
								"id": 3
							}
						},
						{
							"id": 1659,
							"name": "align",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Text alignment"
							},
							"sources": [
								{
									"fileName": "src/Text/Text.tsx",
									"line": 32,
									"character": 7
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "start"
									},
									{
										"type": "stringLiteral",
										"value": "middle"
									},
									{
										"type": "stringLiteral",
										"value": "end"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TextProps.align",
								"id": 428
							}
						},
						{
							"id": 1674,
							"name": "backgroundColor",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Background colour to be applied, shades are taken from the current\ntheme."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 70,
									"character": 17
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeColor",
								"id": 30
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.backgroundColor",
								"id": 4
							}
						},
						{
							"id": 1675,
							"name": "borderColor",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Border colour to be applied, shades are taken from the current\ntheme."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 75,
									"character": 13
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeColor",
								"id": 30
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.borderColor",
								"id": 5
							}
						},
						{
							"id": 1676,
							"name": "borderRadius",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Adds styling of a border radius to one of the size multiples."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 79,
									"character": 14
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "x1"
									},
									{
										"type": "stringLiteral",
										"value": "x2"
									},
									{
										"type": "stringLiteral",
										"value": "x3"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.borderRadius",
								"id": 6
							}
						},
						{
							"id": 1677,
							"name": "borderSize",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Thickness of the border to be applied"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 81,
									"character": 12
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "x1"
									},
									{
										"type": "stringLiteral",
										"value": "x2"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.borderSize",
								"id": 7
							}
						},
						{
							"id": 1660,
							"name": "breakOn",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "How the block of text should break onto new lines."
							},
							"sources": [
								{
									"fileName": "src/Text/Text.tsx",
									"line": 34,
									"character": 9
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "all"
									},
									{
										"type": "stringLiteral",
										"value": "none"
									},
									{
										"type": "stringLiteral",
										"value": "word"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TextProps.breakOn",
								"id": 429
							}
						},
						{
							"id": 1678,
							"name": "clickable",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Adds styling to indicate that the element is clickable"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 83,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.clickable",
								"id": 8
							}
						},
						{
							"id": 1679,
							"name": "container",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies relative positioning to contain child elements."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 85,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.container",
								"id": 9
							}
						},
						{
							"id": 1680,
							"name": "display",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies display styling"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 87,
									"character": 9
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "block"
									},
									{
										"type": "stringLiteral",
										"value": "inline-block"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.display",
								"id": 10
							}
						},
						{
							"id": 1661,
							"name": "ellipsis",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Replaces the overflow of text with the ellipsis character"
							},
							"sources": [
								{
									"fileName": "src/Text/Text.tsx",
									"line": 36,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TextProps.ellipsis",
								"id": 430
							}
						},
						{
							"id": 1662,
							"name": "emphasis",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies emphasis styling"
							},
							"sources": [
								{
									"fileName": "src/Text/Text.tsx",
									"line": 38,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TextProps.emphasis",
								"id": 431
							}
						},
						{
							"id": 1681,
							"name": "fixed",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Quick way of absolutely position to common places"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 89,
									"character": 7
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "fullscreen"
									},
									{
										"type": "stringLiteral",
										"value": "top"
									},
									{
										"type": "stringLiteral",
										"value": "top-left"
									},
									{
										"type": "stringLiteral",
										"value": "top-right"
									},
									{
										"type": "stringLiteral",
										"value": "bottom"
									},
									{
										"type": "stringLiteral",
										"value": "bottom-left"
									},
									{
										"type": "stringLiteral",
										"value": "bottom-right"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.fixed",
								"id": 11
							}
						},
						{
							"id": 1663,
							"name": "heading",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies a heading font family style"
							},
							"sources": [
								{
									"fileName": "src/Text/Text.tsx",
									"line": 40,
									"character": 9
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TextProps.heading",
								"id": 432
							}
						},
						{
							"id": 1682,
							"name": "height",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Fixed height applied through inline styling"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 98,
									"character": 8
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.height",
								"id": 12
							}
						},
						{
							"id": 1664,
							"name": "inline",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Text default to block display, this will apply inline display."
							},
							"sources": [
								{
									"fileName": "src/Text/Text.tsx",
									"line": 42,
									"character": 8
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TextProps.inline",
								"id": 433
							}
						},
						{
							"id": 1683,
							"name": "margin",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Margins applied for the global spacing variables"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 100,
									"character": 8
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeSize",
								"id": 31
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.margin",
								"id": 13
							}
						},
						{
							"id": 1684,
							"name": "maxWidth",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Max width applied through inline styling"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 102,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.maxWidth",
								"id": 14
							}
						},
						{
							"id": 1685,
							"name": "minHeight",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Max height applied through inline styling"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 104,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.minHeight",
								"id": 15
							}
						},
						{
							"id": 1686,
							"name": "minWidth",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Min width applied through inline style"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 106,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.minWidth",
								"id": 16
							}
						},
						{
							"id": 1665,
							"name": "monospace",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies a monospace font family style"
							},
							"sources": [
								{
									"fileName": "src/Text/Text.tsx",
									"line": 44,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TextProps.monospace",
								"id": 434
							}
						},
						{
							"id": 1687,
							"name": "overflow",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Overflow"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 108,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "stringLiteral",
										"value": "hidden"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.overflow",
								"id": 17
							}
						},
						{
							"id": 1688,
							"name": "padding",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Padding applied for the global spacing variables"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 110,
									"character": 9
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeSize",
								"id": 31
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.padding",
								"id": 18
							}
						},
						{
							"id": 1689,
							"name": "paddingHorizontal",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Horizontal padding applied for the global spacing variables"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 112,
									"character": 19
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeSize",
								"id": 31
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.paddingHorizontal",
								"id": 19
							}
						},
						{
							"id": 1690,
							"name": "paddingVertical",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Vertical pa?dding applied for the global spacing variables"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 114,
									"character": 17
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeSize",
								"id": 31
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.paddingVertical",
								"id": 20
							}
						},
						{
							"id": 1691,
							"name": "scrollable",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies overflow styling to enable/disable scrolling."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 116,
									"character": 12
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.scrollable",
								"id": 21
							}
						},
						{
							"id": 1666,
							"name": "size",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Size of the text"
							},
							"sources": [
								{
									"fileName": "src/Text/Text.tsx",
									"line": 46,
									"character": 6
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeTextSize",
								"id": 466
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TextProps.size",
								"id": 435
							}
						},
						{
							"id": 1667,
							"name": "strong",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies strong weight styling"
							},
							"sources": [
								{
									"fileName": "src/Text/Text.tsx",
									"line": 48,
									"character": 8
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TextProps.strong",
								"id": 436
							}
						},
						{
							"id": 1668,
							"name": "subscript",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies subscript baseline styling"
							},
							"sources": [
								{
									"fileName": "src/Text/Text.tsx",
									"line": 50,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TextProps.subscript",
								"id": 437
							}
						},
						{
							"id": 1669,
							"name": "superscript",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies superscript baseline styling"
							},
							"sources": [
								{
									"fileName": "src/Text/Text.tsx",
									"line": 52,
									"character": 13
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TextProps.superscript",
								"id": 438
							}
						},
						{
							"id": 1692,
							"name": "tag",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Any valid HTML or SVG element tag.",
								"tags": [
									{
										"tag": "reference",
										"text": "false\n"
									}
								]
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 122,
									"character": 5
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeAllElementTags",
								"id": 34
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.tag",
								"id": 22
							}
						},
						{
							"id": 1693,
							"name": "textColor",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Text colour to be applied."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 126,
									"character": 11
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeColor",
								"id": 30
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.textColor",
								"id": 23
							}
						},
						{
							"id": 1694,
							"name": "theme",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Theme applied to this element and inherited for child elements (until\na descendant theme is applied)."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 131,
									"character": 7
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeTheme",
								"id": 35
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.theme",
								"id": 24
							}
						},
						{
							"id": 1670,
							"name": "titlecase",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies title casing styling"
							},
							"sources": [
								{
									"fileName": "src/Text/Text.tsx",
									"line": 54,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TextProps.titlecase",
								"id": 439
							}
						},
						{
							"id": 1671,
							"name": "uppercase",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies uppercasing styling"
							},
							"sources": [
								{
									"fileName": "src/Text/Text.tsx",
									"line": 56,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TextProps.uppercase",
								"id": 440
							}
						},
						{
							"id": 1672,
							"name": "weak",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies weak weight styling"
							},
							"sources": [
								{
									"fileName": "src/Text/Text.tsx",
									"line": 58,
									"character": 6
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TextProps.weak",
								"id": 441
							}
						},
						{
							"id": 1695,
							"name": "width",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Fixed width applied through inline styling"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 133,
									"character": 7
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.width",
								"id": 25
							}
						},
						{
							"id": 1696,
							"name": "zIndex",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "z-index number for layering elements."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 135,
									"character": 8
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "number"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.zIndex",
								"id": 26
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								1673,
								1659,
								1674,
								1675,
								1676,
								1677,
								1660,
								1678,
								1679,
								1680,
								1661,
								1662,
								1681,
								1663,
								1682,
								1664,
								1683,
								1684,
								1685,
								1686,
								1665,
								1687,
								1688,
								1689,
								1690,
								1691,
								1666,
								1667,
								1668,
								1669,
								1692,
								1693,
								1694,
								1670,
								1671,
								1672,
								1695,
								1696
							]
						}
					],
					"sources": [
						{
							"fileName": "src/Table/Table.tsx",
							"line": 6,
							"character": 27
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"name": "TextProps",
							"id": 427
						}
					]
				},
				{
					"id": 1697,
					"name": "Table",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "src/Table/Table.tsx",
							"line": 8,
							"character": 11
						}
					],
					"type": {
						"type": "reference",
						"name": "ForwardRefExoticComponent",
						"typeArguments": [
							{
								"type": "intersection",
								"types": [
									{
										"type": "reference",
										"name": "TableProps",
										"id": 1658
									},
									{
										"type": "reflection",
										"declaration": {
											"id": 1698,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {}
										}
									},
									{
										"type": "reference",
										"name": "RefAttributes",
										"typeArguments": [
											{
												"type": "reference",
												"name": "HTMLTableElement"
											}
										]
									}
								]
							}
						]
					},
					"defaultValue": " React.forwardRef<HTMLTableElement, Attributes<HTMLTableElement, TableProps>>((props, ref) => {\n  return (\n    <Text { ...props } className=\"Table\" ref={ ref } tag=\"table\" />\n  );\n})"
				}
			],
			"groups": [
				{
					"title": "Interfaces",
					"kind": 256,
					"children": [
						1658
					]
				},
				{
					"title": "Variables",
					"kind": 32,
					"children": [
						1697
					]
				}
			],
			"sources": [
				{
					"fileName": "src/Table/Table.tsx",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 1699,
			"name": "\"Table/TableBody\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "/Users/harry/Projects/personal/preshape/src/Table/TableBody.tsx",
			"children": [
				{
					"id": 1700,
					"name": "TableBodyProps",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"children": [
						{
							"id": 1701,
							"name": "absolute",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Quick way of absolutely position to common places"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 58,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "fullscreen"
									},
									{
										"type": "stringLiteral",
										"value": "top"
									},
									{
										"type": "stringLiteral",
										"value": "top-left"
									},
									{
										"type": "stringLiteral",
										"value": "top-right"
									},
									{
										"type": "stringLiteral",
										"value": "bottom"
									},
									{
										"type": "stringLiteral",
										"value": "bottom-left"
									},
									{
										"type": "stringLiteral",
										"value": "bottom-right"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.absolute",
								"id": 3
							}
						},
						{
							"id": 1702,
							"name": "backgroundColor",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Background colour to be applied, shades are taken from the current\ntheme."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 70,
									"character": 17
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeColor",
								"id": 30
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.backgroundColor",
								"id": 4
							}
						},
						{
							"id": 1703,
							"name": "borderColor",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Border colour to be applied, shades are taken from the current\ntheme."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 75,
									"character": 13
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeColor",
								"id": 30
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.borderColor",
								"id": 5
							}
						},
						{
							"id": 1704,
							"name": "borderRadius",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Adds styling of a border radius to one of the size multiples."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 79,
									"character": 14
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "x1"
									},
									{
										"type": "stringLiteral",
										"value": "x2"
									},
									{
										"type": "stringLiteral",
										"value": "x3"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.borderRadius",
								"id": 6
							}
						},
						{
							"id": 1705,
							"name": "borderSize",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Thickness of the border to be applied"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 81,
									"character": 12
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "x1"
									},
									{
										"type": "stringLiteral",
										"value": "x2"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.borderSize",
								"id": 7
							}
						},
						{
							"id": 1706,
							"name": "clickable",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Adds styling to indicate that the element is clickable"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 83,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.clickable",
								"id": 8
							}
						},
						{
							"id": 1707,
							"name": "container",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies relative positioning to contain child elements."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 85,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.container",
								"id": 9
							}
						},
						{
							"id": 1708,
							"name": "display",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies display styling"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 87,
									"character": 9
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "block"
									},
									{
										"type": "stringLiteral",
										"value": "inline-block"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.display",
								"id": 10
							}
						},
						{
							"id": 1709,
							"name": "fixed",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Quick way of absolutely position to common places"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 89,
									"character": 7
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "fullscreen"
									},
									{
										"type": "stringLiteral",
										"value": "top"
									},
									{
										"type": "stringLiteral",
										"value": "top-left"
									},
									{
										"type": "stringLiteral",
										"value": "top-right"
									},
									{
										"type": "stringLiteral",
										"value": "bottom"
									},
									{
										"type": "stringLiteral",
										"value": "bottom-left"
									},
									{
										"type": "stringLiteral",
										"value": "bottom-right"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.fixed",
								"id": 11
							}
						},
						{
							"id": 1710,
							"name": "height",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Fixed height applied through inline styling"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 98,
									"character": 8
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.height",
								"id": 12
							}
						},
						{
							"id": 1711,
							"name": "margin",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Margins applied for the global spacing variables"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 100,
									"character": 8
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeSize",
								"id": 31
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.margin",
								"id": 13
							}
						},
						{
							"id": 1712,
							"name": "maxWidth",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Max width applied through inline styling"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 102,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.maxWidth",
								"id": 14
							}
						},
						{
							"id": 1713,
							"name": "minHeight",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Max height applied through inline styling"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 104,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.minHeight",
								"id": 15
							}
						},
						{
							"id": 1714,
							"name": "minWidth",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Min width applied through inline style"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 106,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.minWidth",
								"id": 16
							}
						},
						{
							"id": 1715,
							"name": "overflow",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Overflow"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 108,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "stringLiteral",
										"value": "hidden"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.overflow",
								"id": 17
							}
						},
						{
							"id": 1716,
							"name": "padding",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Padding applied for the global spacing variables"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 110,
									"character": 9
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeSize",
								"id": 31
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.padding",
								"id": 18
							}
						},
						{
							"id": 1717,
							"name": "paddingHorizontal",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Horizontal padding applied for the global spacing variables"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 112,
									"character": 19
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeSize",
								"id": 31
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.paddingHorizontal",
								"id": 19
							}
						},
						{
							"id": 1718,
							"name": "paddingVertical",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Vertical pa?dding applied for the global spacing variables"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 114,
									"character": 17
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeSize",
								"id": 31
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.paddingVertical",
								"id": 20
							}
						},
						{
							"id": 1719,
							"name": "scrollable",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies overflow styling to enable/disable scrolling."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 116,
									"character": 12
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.scrollable",
								"id": 21
							}
						},
						{
							"id": 1720,
							"name": "tag",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Any valid HTML or SVG element tag.",
								"tags": [
									{
										"tag": "reference",
										"text": "false\n"
									}
								]
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 122,
									"character": 5
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeAllElementTags",
								"id": 34
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.tag",
								"id": 22
							}
						},
						{
							"id": 1721,
							"name": "textColor",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Text colour to be applied."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 126,
									"character": 11
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeColor",
								"id": 30
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.textColor",
								"id": 23
							}
						},
						{
							"id": 1722,
							"name": "theme",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Theme applied to this element and inherited for child elements (until\na descendant theme is applied)."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 131,
									"character": 7
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeTheme",
								"id": 35
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.theme",
								"id": 24
							}
						},
						{
							"id": 1723,
							"name": "width",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Fixed width applied through inline styling"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 133,
									"character": 7
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.width",
								"id": 25
							}
						},
						{
							"id": 1724,
							"name": "zIndex",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "z-index number for layering elements."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 135,
									"character": 8
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "number"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.zIndex",
								"id": 26
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								1701,
								1702,
								1703,
								1704,
								1705,
								1706,
								1707,
								1708,
								1709,
								1710,
								1711,
								1712,
								1713,
								1714,
								1715,
								1716,
								1717,
								1718,
								1719,
								1720,
								1721,
								1722,
								1723,
								1724
							]
						}
					],
					"sources": [
						{
							"fileName": "src/Table/TableBody.tsx",
							"line": 4,
							"character": 31
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"name": "BaseProps",
							"id": 2
						}
					]
				},
				{
					"id": 1725,
					"name": "TableBody",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "src/Table/TableBody.tsx",
							"line": 6,
							"character": 15
						}
					],
					"type": {
						"type": "reference",
						"name": "ForwardRefExoticComponent",
						"typeArguments": [
							{
								"type": "intersection",
								"types": [
									{
										"type": "reference",
										"name": "TableBodyProps",
										"id": 1700
									},
									{
										"type": "reflection",
										"declaration": {
											"id": 1726,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {}
										}
									},
									{
										"type": "reference",
										"name": "RefAttributes",
										"typeArguments": [
											{
												"type": "reference",
												"name": "HTMLTableSectionElement"
											}
										]
									}
								]
							}
						]
					},
					"defaultValue": " React.forwardRef<HTMLTableSectionElement, Attributes<HTMLTableSectionElement, TableBodyProps>>((props, ref) => {\n  return (\n    <Base { ...props } className=\"Table__body\" ref={ ref } tag=\"tbody\" />\n  );\n})"
				}
			],
			"groups": [
				{
					"title": "Interfaces",
					"kind": 256,
					"children": [
						1700
					]
				},
				{
					"title": "Variables",
					"kind": 32,
					"children": [
						1725
					]
				}
			],
			"sources": [
				{
					"fileName": "src/Table/TableBody.tsx",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 1727,
			"name": "\"Table/TableCell\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "/Users/harry/Projects/personal/preshape/src/Table/TableCell.tsx",
			"children": [
				{
					"id": 1728,
					"name": "TableCellProps",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"children": [
						{
							"id": 1744,
							"name": "absolute",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Quick way of absolutely position to common places"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 58,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "fullscreen"
									},
									{
										"type": "stringLiteral",
										"value": "top"
									},
									{
										"type": "stringLiteral",
										"value": "top-left"
									},
									{
										"type": "stringLiteral",
										"value": "top-right"
									},
									{
										"type": "stringLiteral",
										"value": "bottom"
									},
									{
										"type": "stringLiteral",
										"value": "bottom-left"
									},
									{
										"type": "stringLiteral",
										"value": "bottom-right"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.absolute",
								"id": 3
							}
						},
						{
							"id": 1730,
							"name": "align",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Text alignment"
							},
							"sources": [
								{
									"fileName": "src/Text/Text.tsx",
									"line": 32,
									"character": 7
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "start"
									},
									{
										"type": "stringLiteral",
										"value": "middle"
									},
									{
										"type": "stringLiteral",
										"value": "end"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TextProps.align",
								"id": 428
							}
						},
						{
							"id": 1745,
							"name": "backgroundColor",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Background colour to be applied, shades are taken from the current\ntheme."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 70,
									"character": 17
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeColor",
								"id": 30
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.backgroundColor",
								"id": 4
							}
						},
						{
							"id": 1746,
							"name": "borderColor",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Border colour to be applied, shades are taken from the current\ntheme."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 75,
									"character": 13
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeColor",
								"id": 30
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.borderColor",
								"id": 5
							}
						},
						{
							"id": 1747,
							"name": "borderRadius",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Adds styling of a border radius to one of the size multiples."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 79,
									"character": 14
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "x1"
									},
									{
										"type": "stringLiteral",
										"value": "x2"
									},
									{
										"type": "stringLiteral",
										"value": "x3"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.borderRadius",
								"id": 6
							}
						},
						{
							"id": 1748,
							"name": "borderSize",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Thickness of the border to be applied"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 81,
									"character": 12
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "x1"
									},
									{
										"type": "stringLiteral",
										"value": "x2"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.borderSize",
								"id": 7
							}
						},
						{
							"id": 1731,
							"name": "breakOn",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "How the block of text should break onto new lines."
							},
							"sources": [
								{
									"fileName": "src/Text/Text.tsx",
									"line": 34,
									"character": 9
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "all"
									},
									{
										"type": "stringLiteral",
										"value": "none"
									},
									{
										"type": "stringLiteral",
										"value": "word"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TextProps.breakOn",
								"id": 429
							}
						},
						{
							"id": 1749,
							"name": "clickable",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Adds styling to indicate that the element is clickable"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 83,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.clickable",
								"id": 8
							}
						},
						{
							"id": 1750,
							"name": "container",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies relative positioning to contain child elements."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 85,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.container",
								"id": 9
							}
						},
						{
							"id": 1751,
							"name": "display",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies display styling"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 87,
									"character": 9
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "block"
									},
									{
										"type": "stringLiteral",
										"value": "inline-block"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.display",
								"id": 10
							}
						},
						{
							"id": 1732,
							"name": "ellipsis",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Replaces the overflow of text with the ellipsis character"
							},
							"sources": [
								{
									"fileName": "src/Text/Text.tsx",
									"line": 36,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TextProps.ellipsis",
								"id": 430
							}
						},
						{
							"id": 1733,
							"name": "emphasis",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies emphasis styling"
							},
							"sources": [
								{
									"fileName": "src/Text/Text.tsx",
									"line": 38,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TextProps.emphasis",
								"id": 431
							}
						},
						{
							"id": 1752,
							"name": "fixed",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Quick way of absolutely position to common places"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 89,
									"character": 7
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "fullscreen"
									},
									{
										"type": "stringLiteral",
										"value": "top"
									},
									{
										"type": "stringLiteral",
										"value": "top-left"
									},
									{
										"type": "stringLiteral",
										"value": "top-right"
									},
									{
										"type": "stringLiteral",
										"value": "bottom"
									},
									{
										"type": "stringLiteral",
										"value": "bottom-left"
									},
									{
										"type": "stringLiteral",
										"value": "bottom-right"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.fixed",
								"id": 11
							}
						},
						{
							"id": 1734,
							"name": "heading",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies a heading font family style"
							},
							"sources": [
								{
									"fileName": "src/Text/Text.tsx",
									"line": 40,
									"character": 9
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TextProps.heading",
								"id": 432
							}
						},
						{
							"id": 1753,
							"name": "height",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Fixed height applied through inline styling"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 98,
									"character": 8
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.height",
								"id": 12
							}
						},
						{
							"id": 1735,
							"name": "inline",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Text default to block display, this will apply inline display."
							},
							"sources": [
								{
									"fileName": "src/Text/Text.tsx",
									"line": 42,
									"character": 8
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TextProps.inline",
								"id": 433
							}
						},
						{
							"id": 1754,
							"name": "margin",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Margins applied for the global spacing variables"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 100,
									"character": 8
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeSize",
								"id": 31
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.margin",
								"id": 13
							}
						},
						{
							"id": 1755,
							"name": "maxWidth",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Max width applied through inline styling"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 102,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.maxWidth",
								"id": 14
							}
						},
						{
							"id": 1756,
							"name": "minHeight",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Max height applied through inline styling"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 104,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.minHeight",
								"id": 15
							}
						},
						{
							"id": 1757,
							"name": "minWidth",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Min width applied through inline style"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 106,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.minWidth",
								"id": 16
							}
						},
						{
							"id": 1736,
							"name": "monospace",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies a monospace font family style"
							},
							"sources": [
								{
									"fileName": "src/Text/Text.tsx",
									"line": 44,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TextProps.monospace",
								"id": 434
							}
						},
						{
							"id": 1758,
							"name": "overflow",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Overflow"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 108,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "stringLiteral",
										"value": "hidden"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.overflow",
								"id": 17
							}
						},
						{
							"id": 1759,
							"name": "padding",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Padding applied for the global spacing variables"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 110,
									"character": 9
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeSize",
								"id": 31
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.padding",
								"id": 18
							}
						},
						{
							"id": 1760,
							"name": "paddingHorizontal",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Horizontal padding applied for the global spacing variables"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 112,
									"character": 19
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeSize",
								"id": 31
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.paddingHorizontal",
								"id": 19
							}
						},
						{
							"id": 1761,
							"name": "paddingVertical",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Vertical pa?dding applied for the global spacing variables"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 114,
									"character": 17
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeSize",
								"id": 31
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.paddingVertical",
								"id": 20
							}
						},
						{
							"id": 1762,
							"name": "scrollable",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies overflow styling to enable/disable scrolling."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 116,
									"character": 12
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.scrollable",
								"id": 21
							}
						},
						{
							"id": 1737,
							"name": "size",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Size of the text"
							},
							"sources": [
								{
									"fileName": "src/Text/Text.tsx",
									"line": 46,
									"character": 6
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeTextSize",
								"id": 466
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TextProps.size",
								"id": 435
							}
						},
						{
							"id": 1729,
							"name": "sorted",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies styling indication that this column is currently being sorted"
							},
							"sources": [
								{
									"fileName": "src/Table/TableCell.tsx",
									"line": 7,
									"character": 8
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							}
						},
						{
							"id": 1738,
							"name": "strong",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies strong weight styling"
							},
							"sources": [
								{
									"fileName": "src/Text/Text.tsx",
									"line": 48,
									"character": 8
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TextProps.strong",
								"id": 436
							}
						},
						{
							"id": 1739,
							"name": "subscript",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies subscript baseline styling"
							},
							"sources": [
								{
									"fileName": "src/Text/Text.tsx",
									"line": 50,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TextProps.subscript",
								"id": 437
							}
						},
						{
							"id": 1740,
							"name": "superscript",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies superscript baseline styling"
							},
							"sources": [
								{
									"fileName": "src/Text/Text.tsx",
									"line": 52,
									"character": 13
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TextProps.superscript",
								"id": 438
							}
						},
						{
							"id": 1763,
							"name": "tag",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Any valid HTML or SVG element tag.",
								"tags": [
									{
										"tag": "reference",
										"text": "false\n"
									}
								]
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 122,
									"character": 5
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeAllElementTags",
								"id": 34
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.tag",
								"id": 22
							}
						},
						{
							"id": 1764,
							"name": "textColor",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Text colour to be applied."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 126,
									"character": 11
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeColor",
								"id": 30
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.textColor",
								"id": 23
							}
						},
						{
							"id": 1765,
							"name": "theme",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Theme applied to this element and inherited for child elements (until\na descendant theme is applied)."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 131,
									"character": 7
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeTheme",
								"id": 35
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.theme",
								"id": 24
							}
						},
						{
							"id": 1741,
							"name": "titlecase",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies title casing styling"
							},
							"sources": [
								{
									"fileName": "src/Text/Text.tsx",
									"line": 54,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TextProps.titlecase",
								"id": 439
							}
						},
						{
							"id": 1742,
							"name": "uppercase",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies uppercasing styling"
							},
							"sources": [
								{
									"fileName": "src/Text/Text.tsx",
									"line": 56,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TextProps.uppercase",
								"id": 440
							}
						},
						{
							"id": 1743,
							"name": "weak",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies weak weight styling"
							},
							"sources": [
								{
									"fileName": "src/Text/Text.tsx",
									"line": 58,
									"character": 6
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TextProps.weak",
								"id": 441
							}
						},
						{
							"id": 1766,
							"name": "width",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Fixed width applied through inline styling"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 133,
									"character": 7
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.width",
								"id": 25
							}
						},
						{
							"id": 1767,
							"name": "zIndex",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "z-index number for layering elements."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 135,
									"character": 8
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "number"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.zIndex",
								"id": 26
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								1744,
								1730,
								1745,
								1746,
								1747,
								1748,
								1731,
								1749,
								1750,
								1751,
								1732,
								1733,
								1752,
								1734,
								1753,
								1735,
								1754,
								1755,
								1756,
								1757,
								1736,
								1758,
								1759,
								1760,
								1761,
								1762,
								1737,
								1729,
								1738,
								1739,
								1740,
								1763,
								1764,
								1765,
								1741,
								1742,
								1743,
								1766,
								1767
							]
						}
					],
					"sources": [
						{
							"fileName": "src/Table/TableCell.tsx",
							"line": 5,
							"character": 31
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"name": "TextProps",
							"id": 427
						}
					]
				},
				{
					"id": 1768,
					"name": "TableCell",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "src/Table/TableCell.tsx",
							"line": 10,
							"character": 15
						}
					],
					"type": {
						"type": "reference",
						"name": "ForwardRefExoticComponent",
						"typeArguments": [
							{
								"type": "intersection",
								"types": [
									{
										"type": "reference",
										"name": "TableCellProps",
										"id": 1728
									},
									{
										"type": "reflection",
										"declaration": {
											"id": 1769,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {}
										}
									},
									{
										"type": "reference",
										"name": "RefAttributes",
										"typeArguments": [
											{
												"type": "reference",
												"name": "HTMLTableDataCellElement"
											}
										]
									}
								]
							}
						]
					},
					"defaultValue": " React.forwardRef<HTMLTableDataCellElement, Attributes<HTMLTableDataCellElement, TableCellProps>>((props, ref) => {\n  const { sorted, ...rest } = props;\n\n  return (\n    <Text { ...rest }\n        className=\"Table__cell\"\n        ref={ ref }\n        strong={ sorted }\n        tag=\"td\" />\n  );\n})"
				}
			],
			"groups": [
				{
					"title": "Interfaces",
					"kind": 256,
					"children": [
						1728
					]
				},
				{
					"title": "Variables",
					"kind": 32,
					"children": [
						1768
					]
				}
			],
			"sources": [
				{
					"fileName": "src/Table/TableCell.tsx",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 1770,
			"name": "\"Table/TableHeader\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "/Users/harry/Projects/personal/preshape/src/Table/TableHeader.tsx",
			"children": [
				{
					"id": 1771,
					"name": "TableHeaderProps",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"children": [
						{
							"id": 1772,
							"name": "absolute",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Quick way of absolutely position to common places"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 58,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "fullscreen"
									},
									{
										"type": "stringLiteral",
										"value": "top"
									},
									{
										"type": "stringLiteral",
										"value": "top-left"
									},
									{
										"type": "stringLiteral",
										"value": "top-right"
									},
									{
										"type": "stringLiteral",
										"value": "bottom"
									},
									{
										"type": "stringLiteral",
										"value": "bottom-left"
									},
									{
										"type": "stringLiteral",
										"value": "bottom-right"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.absolute",
								"id": 3
							}
						},
						{
							"id": 1773,
							"name": "backgroundColor",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Background colour to be applied, shades are taken from the current\ntheme."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 70,
									"character": 17
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeColor",
								"id": 30
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.backgroundColor",
								"id": 4
							}
						},
						{
							"id": 1774,
							"name": "borderColor",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Border colour to be applied, shades are taken from the current\ntheme."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 75,
									"character": 13
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeColor",
								"id": 30
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.borderColor",
								"id": 5
							}
						},
						{
							"id": 1775,
							"name": "borderRadius",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Adds styling of a border radius to one of the size multiples."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 79,
									"character": 14
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "x1"
									},
									{
										"type": "stringLiteral",
										"value": "x2"
									},
									{
										"type": "stringLiteral",
										"value": "x3"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.borderRadius",
								"id": 6
							}
						},
						{
							"id": 1776,
							"name": "borderSize",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Thickness of the border to be applied"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 81,
									"character": 12
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "x1"
									},
									{
										"type": "stringLiteral",
										"value": "x2"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.borderSize",
								"id": 7
							}
						},
						{
							"id": 1777,
							"name": "clickable",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Adds styling to indicate that the element is clickable"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 83,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.clickable",
								"id": 8
							}
						},
						{
							"id": 1778,
							"name": "container",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies relative positioning to contain child elements."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 85,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.container",
								"id": 9
							}
						},
						{
							"id": 1779,
							"name": "display",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies display styling"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 87,
									"character": 9
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "block"
									},
									{
										"type": "stringLiteral",
										"value": "inline-block"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.display",
								"id": 10
							}
						},
						{
							"id": 1780,
							"name": "fixed",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Quick way of absolutely position to common places"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 89,
									"character": 7
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "fullscreen"
									},
									{
										"type": "stringLiteral",
										"value": "top"
									},
									{
										"type": "stringLiteral",
										"value": "top-left"
									},
									{
										"type": "stringLiteral",
										"value": "top-right"
									},
									{
										"type": "stringLiteral",
										"value": "bottom"
									},
									{
										"type": "stringLiteral",
										"value": "bottom-left"
									},
									{
										"type": "stringLiteral",
										"value": "bottom-right"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.fixed",
								"id": 11
							}
						},
						{
							"id": 1781,
							"name": "height",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Fixed height applied through inline styling"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 98,
									"character": 8
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.height",
								"id": 12
							}
						},
						{
							"id": 1782,
							"name": "margin",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Margins applied for the global spacing variables"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 100,
									"character": 8
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeSize",
								"id": 31
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.margin",
								"id": 13
							}
						},
						{
							"id": 1783,
							"name": "maxWidth",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Max width applied through inline styling"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 102,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.maxWidth",
								"id": 14
							}
						},
						{
							"id": 1784,
							"name": "minHeight",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Max height applied through inline styling"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 104,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.minHeight",
								"id": 15
							}
						},
						{
							"id": 1785,
							"name": "minWidth",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Min width applied through inline style"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 106,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.minWidth",
								"id": 16
							}
						},
						{
							"id": 1786,
							"name": "overflow",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Overflow"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 108,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "stringLiteral",
										"value": "hidden"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.overflow",
								"id": 17
							}
						},
						{
							"id": 1787,
							"name": "padding",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Padding applied for the global spacing variables"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 110,
									"character": 9
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeSize",
								"id": 31
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.padding",
								"id": 18
							}
						},
						{
							"id": 1788,
							"name": "paddingHorizontal",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Horizontal padding applied for the global spacing variables"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 112,
									"character": 19
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeSize",
								"id": 31
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.paddingHorizontal",
								"id": 19
							}
						},
						{
							"id": 1789,
							"name": "paddingVertical",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Vertical pa?dding applied for the global spacing variables"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 114,
									"character": 17
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeSize",
								"id": 31
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.paddingVertical",
								"id": 20
							}
						},
						{
							"id": 1790,
							"name": "scrollable",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies overflow styling to enable/disable scrolling."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 116,
									"character": 12
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.scrollable",
								"id": 21
							}
						},
						{
							"id": 1791,
							"name": "tag",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Any valid HTML or SVG element tag.",
								"tags": [
									{
										"tag": "reference",
										"text": "false\n"
									}
								]
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 122,
									"character": 5
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeAllElementTags",
								"id": 34
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.tag",
								"id": 22
							}
						},
						{
							"id": 1792,
							"name": "textColor",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Text colour to be applied."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 126,
									"character": 11
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeColor",
								"id": 30
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.textColor",
								"id": 23
							}
						},
						{
							"id": 1793,
							"name": "theme",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Theme applied to this element and inherited for child elements (until\na descendant theme is applied)."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 131,
									"character": 7
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeTheme",
								"id": 35
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.theme",
								"id": 24
							}
						},
						{
							"id": 1794,
							"name": "width",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Fixed width applied through inline styling"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 133,
									"character": 7
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.width",
								"id": 25
							}
						},
						{
							"id": 1795,
							"name": "zIndex",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "z-index number for layering elements."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 135,
									"character": 8
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "number"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.zIndex",
								"id": 26
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								1772,
								1773,
								1774,
								1775,
								1776,
								1777,
								1778,
								1779,
								1780,
								1781,
								1782,
								1783,
								1784,
								1785,
								1786,
								1787,
								1788,
								1789,
								1790,
								1791,
								1792,
								1793,
								1794,
								1795
							]
						}
					],
					"sources": [
						{
							"fileName": "src/Table/TableHeader.tsx",
							"line": 5,
							"character": 33
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"name": "BaseProps",
							"id": 2
						}
					]
				},
				{
					"id": 1796,
					"name": "TableHeader",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "src/Table/TableHeader.tsx",
							"line": 7,
							"character": 17
						}
					],
					"type": {
						"type": "reference",
						"name": "ForwardRefExoticComponent",
						"typeArguments": [
							{
								"type": "intersection",
								"types": [
									{
										"type": "reference",
										"name": "TableHeaderProps",
										"id": 1771
									},
									{
										"type": "reflection",
										"declaration": {
											"id": 1797,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {}
										}
									},
									{
										"type": "reference",
										"name": "RefAttributes",
										"typeArguments": [
											{
												"type": "reference",
												"name": "HTMLTableSectionElement"
											}
										]
									}
								]
							}
						]
					},
					"defaultValue": " React.forwardRef<HTMLTableSectionElement, Attributes<HTMLTableSectionElement, TableHeaderProps>>((props, ref) => {\n  return (\n    <Base { ...props }\n        className=\"Table__header\"\n        ref={ ref }\n        tag=\"thead\" />\n  );\n})"
				}
			],
			"groups": [
				{
					"title": "Interfaces",
					"kind": 256,
					"children": [
						1771
					]
				},
				{
					"title": "Variables",
					"kind": 32,
					"children": [
						1796
					]
				}
			],
			"sources": [
				{
					"fileName": "src/Table/TableHeader.tsx",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 1798,
			"name": "\"Table/TableHeaderCell\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "/Users/harry/Projects/personal/preshape/src/Table/TableHeaderCell.tsx",
			"children": [
				{
					"id": 1799,
					"name": "TableHeaderCellProps",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"children": [
						{
							"id": 1816,
							"name": "absolute",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Quick way of absolutely position to common places"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 58,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "fullscreen"
									},
									{
										"type": "stringLiteral",
										"value": "top"
									},
									{
										"type": "stringLiteral",
										"value": "top-left"
									},
									{
										"type": "stringLiteral",
										"value": "top-right"
									},
									{
										"type": "stringLiteral",
										"value": "bottom"
									},
									{
										"type": "stringLiteral",
										"value": "bottom-left"
									},
									{
										"type": "stringLiteral",
										"value": "bottom-right"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.absolute",
								"id": 3
							}
						},
						{
							"id": 1802,
							"name": "align",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Text alignment"
							},
							"sources": [
								{
									"fileName": "src/Text/Text.tsx",
									"line": 32,
									"character": 7
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "start"
									},
									{
										"type": "stringLiteral",
										"value": "middle"
									},
									{
										"type": "stringLiteral",
										"value": "end"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TextProps.align",
								"id": 428
							}
						},
						{
							"id": 1817,
							"name": "backgroundColor",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Background colour to be applied, shades are taken from the current\ntheme."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 70,
									"character": 17
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeColor",
								"id": 30
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.backgroundColor",
								"id": 4
							}
						},
						{
							"id": 1818,
							"name": "borderColor",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Border colour to be applied, shades are taken from the current\ntheme."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 75,
									"character": 13
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeColor",
								"id": 30
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.borderColor",
								"id": 5
							}
						},
						{
							"id": 1819,
							"name": "borderRadius",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Adds styling of a border radius to one of the size multiples."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 79,
									"character": 14
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "x1"
									},
									{
										"type": "stringLiteral",
										"value": "x2"
									},
									{
										"type": "stringLiteral",
										"value": "x3"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.borderRadius",
								"id": 6
							}
						},
						{
							"id": 1820,
							"name": "borderSize",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Thickness of the border to be applied"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 81,
									"character": 12
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "x1"
									},
									{
										"type": "stringLiteral",
										"value": "x2"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.borderSize",
								"id": 7
							}
						},
						{
							"id": 1803,
							"name": "breakOn",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "How the block of text should break onto new lines."
							},
							"sources": [
								{
									"fileName": "src/Text/Text.tsx",
									"line": 34,
									"character": 9
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "all"
									},
									{
										"type": "stringLiteral",
										"value": "none"
									},
									{
										"type": "stringLiteral",
										"value": "word"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TextProps.breakOn",
								"id": 429
							}
						},
						{
							"id": 1821,
							"name": "clickable",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Adds styling to indicate that the element is clickable"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 83,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.clickable",
								"id": 8
							}
						},
						{
							"id": 1822,
							"name": "container",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies relative positioning to contain child elements."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 85,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.container",
								"id": 9
							}
						},
						{
							"id": 1823,
							"name": "display",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies display styling"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 87,
									"character": 9
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "block"
									},
									{
										"type": "stringLiteral",
										"value": "inline-block"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.display",
								"id": 10
							}
						},
						{
							"id": 1804,
							"name": "ellipsis",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Replaces the overflow of text with the ellipsis character"
							},
							"sources": [
								{
									"fileName": "src/Text/Text.tsx",
									"line": 36,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TextProps.ellipsis",
								"id": 430
							}
						},
						{
							"id": 1805,
							"name": "emphasis",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies emphasis styling"
							},
							"sources": [
								{
									"fileName": "src/Text/Text.tsx",
									"line": 38,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TextProps.emphasis",
								"id": 431
							}
						},
						{
							"id": 1824,
							"name": "fixed",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Quick way of absolutely position to common places"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 89,
									"character": 7
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "fullscreen"
									},
									{
										"type": "stringLiteral",
										"value": "top"
									},
									{
										"type": "stringLiteral",
										"value": "top-left"
									},
									{
										"type": "stringLiteral",
										"value": "top-right"
									},
									{
										"type": "stringLiteral",
										"value": "bottom"
									},
									{
										"type": "stringLiteral",
										"value": "bottom-left"
									},
									{
										"type": "stringLiteral",
										"value": "bottom-right"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.fixed",
								"id": 11
							}
						},
						{
							"id": 1806,
							"name": "heading",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies a heading font family style"
							},
							"sources": [
								{
									"fileName": "src/Text/Text.tsx",
									"line": 40,
									"character": 9
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TextProps.heading",
								"id": 432
							}
						},
						{
							"id": 1825,
							"name": "height",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Fixed height applied through inline styling"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 98,
									"character": 8
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.height",
								"id": 12
							}
						},
						{
							"id": 1807,
							"name": "inline",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Text default to block display, this will apply inline display."
							},
							"sources": [
								{
									"fileName": "src/Text/Text.tsx",
									"line": 42,
									"character": 8
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TextProps.inline",
								"id": 433
							}
						},
						{
							"id": 1826,
							"name": "margin",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Margins applied for the global spacing variables"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 100,
									"character": 8
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeSize",
								"id": 31
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.margin",
								"id": 13
							}
						},
						{
							"id": 1827,
							"name": "maxWidth",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Max width applied through inline styling"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 102,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.maxWidth",
								"id": 14
							}
						},
						{
							"id": 1828,
							"name": "minHeight",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Max height applied through inline styling"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 104,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.minHeight",
								"id": 15
							}
						},
						{
							"id": 1829,
							"name": "minWidth",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Min width applied through inline style"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 106,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.minWidth",
								"id": 16
							}
						},
						{
							"id": 1808,
							"name": "monospace",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies a monospace font family style"
							},
							"sources": [
								{
									"fileName": "src/Text/Text.tsx",
									"line": 44,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TextProps.monospace",
								"id": 434
							}
						},
						{
							"id": 1830,
							"name": "overflow",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Overflow"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 108,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "stringLiteral",
										"value": "hidden"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.overflow",
								"id": 17
							}
						},
						{
							"id": 1831,
							"name": "padding",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Padding applied for the global spacing variables"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 110,
									"character": 9
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeSize",
								"id": 31
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.padding",
								"id": 18
							}
						},
						{
							"id": 1832,
							"name": "paddingHorizontal",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Horizontal padding applied for the global spacing variables"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 112,
									"character": 19
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeSize",
								"id": 31
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.paddingHorizontal",
								"id": 19
							}
						},
						{
							"id": 1833,
							"name": "paddingVertical",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Vertical pa?dding applied for the global spacing variables"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 114,
									"character": 17
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeSize",
								"id": 31
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.paddingVertical",
								"id": 20
							}
						},
						{
							"id": 1834,
							"name": "scrollable",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies overflow styling to enable/disable scrolling."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 116,
									"character": 12
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.scrollable",
								"id": 21
							}
						},
						{
							"id": 1809,
							"name": "size",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Size of the text"
							},
							"sources": [
								{
									"fileName": "src/Text/Text.tsx",
									"line": 46,
									"character": 6
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeTextSize",
								"id": 466
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TextProps.size",
								"id": 435
							}
						},
						{
							"id": 1800,
							"name": "sortable",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies styling indication that this column is sortable"
							},
							"sources": [
								{
									"fileName": "src/Table/TableHeaderCell.tsx",
									"line": 8,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							}
						},
						{
							"id": 1801,
							"name": "sorted",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies styling indication that this column is currently being sorted"
							},
							"sources": [
								{
									"fileName": "src/Table/TableHeaderCell.tsx",
									"line": 10,
									"character": 8
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							}
						},
						{
							"id": 1810,
							"name": "strong",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies strong weight styling"
							},
							"sources": [
								{
									"fileName": "src/Text/Text.tsx",
									"line": 48,
									"character": 8
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TextProps.strong",
								"id": 436
							}
						},
						{
							"id": 1811,
							"name": "subscript",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies subscript baseline styling"
							},
							"sources": [
								{
									"fileName": "src/Text/Text.tsx",
									"line": 50,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TextProps.subscript",
								"id": 437
							}
						},
						{
							"id": 1812,
							"name": "superscript",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies superscript baseline styling"
							},
							"sources": [
								{
									"fileName": "src/Text/Text.tsx",
									"line": 52,
									"character": 13
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TextProps.superscript",
								"id": 438
							}
						},
						{
							"id": 1835,
							"name": "tag",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Any valid HTML or SVG element tag.",
								"tags": [
									{
										"tag": "reference",
										"text": "false\n"
									}
								]
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 122,
									"character": 5
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeAllElementTags",
								"id": 34
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.tag",
								"id": 22
							}
						},
						{
							"id": 1836,
							"name": "textColor",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Text colour to be applied."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 126,
									"character": 11
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeColor",
								"id": 30
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.textColor",
								"id": 23
							}
						},
						{
							"id": 1837,
							"name": "theme",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Theme applied to this element and inherited for child elements (until\na descendant theme is applied)."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 131,
									"character": 7
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeTheme",
								"id": 35
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.theme",
								"id": 24
							}
						},
						{
							"id": 1813,
							"name": "titlecase",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies title casing styling"
							},
							"sources": [
								{
									"fileName": "src/Text/Text.tsx",
									"line": 54,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TextProps.titlecase",
								"id": 439
							}
						},
						{
							"id": 1814,
							"name": "uppercase",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies uppercasing styling"
							},
							"sources": [
								{
									"fileName": "src/Text/Text.tsx",
									"line": 56,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TextProps.uppercase",
								"id": 440
							}
						},
						{
							"id": 1815,
							"name": "weak",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies weak weight styling"
							},
							"sources": [
								{
									"fileName": "src/Text/Text.tsx",
									"line": 58,
									"character": 6
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TextProps.weak",
								"id": 441
							}
						},
						{
							"id": 1838,
							"name": "width",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Fixed width applied through inline styling"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 133,
									"character": 7
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.width",
								"id": 25
							}
						},
						{
							"id": 1839,
							"name": "zIndex",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "z-index number for layering elements."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 135,
									"character": 8
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "number"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.zIndex",
								"id": 26
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								1816,
								1802,
								1817,
								1818,
								1819,
								1820,
								1803,
								1821,
								1822,
								1823,
								1804,
								1805,
								1824,
								1806,
								1825,
								1807,
								1826,
								1827,
								1828,
								1829,
								1808,
								1830,
								1831,
								1832,
								1833,
								1834,
								1809,
								1800,
								1801,
								1810,
								1811,
								1812,
								1835,
								1836,
								1837,
								1813,
								1814,
								1815,
								1838,
								1839
							]
						}
					],
					"sources": [
						{
							"fileName": "src/Table/TableHeaderCell.tsx",
							"line": 6,
							"character": 37
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"name": "TextProps",
							"id": 427
						}
					]
				},
				{
					"id": 1840,
					"name": "TableHeaderCell",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "src/Table/TableHeaderCell.tsx",
							"line": 13,
							"character": 21
						}
					],
					"type": {
						"type": "reference",
						"name": "ForwardRefExoticComponent",
						"typeArguments": [
							{
								"type": "intersection",
								"types": [
									{
										"type": "reference",
										"name": "TableHeaderCellProps",
										"id": 1799
									},
									{
										"type": "reflection",
										"declaration": {
											"id": 1841,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {}
										}
									},
									{
										"type": "reference",
										"name": "RefAttributes",
										"typeArguments": [
											{
												"type": "reference",
												"name": "HTMLTableHeaderCellElement"
											}
										]
									}
								]
							}
						]
					},
					"defaultValue": " React.forwardRef<HTMLTableHeaderCellElement, Attributes<HTMLTableHeaderCellElement, TableHeaderCellProps>>((props, ref) => {\n  const { children, sortable, sorted, ...rest } = props;\n\n  return (\n    <Text { ...rest }\n        className=\"Table__header-cell\"\n        ref={ ref }\n        size=\"x1\"\n        strong\n        tag=\"th\"\n        uppercase>\n      { sortable ? (\n        <Link active={ sorted }>\n          { children }\n        </Link>\n      ) : (\n        children\n      ) }\n    </Text>\n  );\n})"
				}
			],
			"groups": [
				{
					"title": "Interfaces",
					"kind": 256,
					"children": [
						1799
					]
				},
				{
					"title": "Variables",
					"kind": 32,
					"children": [
						1840
					]
				}
			],
			"sources": [
				{
					"fileName": "src/Table/TableHeaderCell.tsx",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 1842,
			"name": "\"Table/TableRow\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "/Users/harry/Projects/personal/preshape/src/Table/TableRow.tsx",
			"children": [
				{
					"id": 1843,
					"name": "TableRowProps",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"children": [
						{
							"id": 1844,
							"name": "absolute",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Quick way of absolutely position to common places"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 58,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "fullscreen"
									},
									{
										"type": "stringLiteral",
										"value": "top"
									},
									{
										"type": "stringLiteral",
										"value": "top-left"
									},
									{
										"type": "stringLiteral",
										"value": "top-right"
									},
									{
										"type": "stringLiteral",
										"value": "bottom"
									},
									{
										"type": "stringLiteral",
										"value": "bottom-left"
									},
									{
										"type": "stringLiteral",
										"value": "bottom-right"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.absolute",
								"id": 3
							}
						},
						{
							"id": 1845,
							"name": "backgroundColor",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Background colour to be applied, shades are taken from the current\ntheme."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 70,
									"character": 17
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeColor",
								"id": 30
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.backgroundColor",
								"id": 4
							}
						},
						{
							"id": 1846,
							"name": "borderColor",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Border colour to be applied, shades are taken from the current\ntheme."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 75,
									"character": 13
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeColor",
								"id": 30
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.borderColor",
								"id": 5
							}
						},
						{
							"id": 1847,
							"name": "borderRadius",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Adds styling of a border radius to one of the size multiples."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 79,
									"character": 14
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "x1"
									},
									{
										"type": "stringLiteral",
										"value": "x2"
									},
									{
										"type": "stringLiteral",
										"value": "x3"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.borderRadius",
								"id": 6
							}
						},
						{
							"id": 1848,
							"name": "borderSize",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Thickness of the border to be applied"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 81,
									"character": 12
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "x1"
									},
									{
										"type": "stringLiteral",
										"value": "x2"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.borderSize",
								"id": 7
							}
						},
						{
							"id": 1849,
							"name": "clickable",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Adds styling to indicate that the element is clickable"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 83,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.clickable",
								"id": 8
							}
						},
						{
							"id": 1850,
							"name": "container",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies relative positioning to contain child elements."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 85,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.container",
								"id": 9
							}
						},
						{
							"id": 1851,
							"name": "display",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies display styling"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 87,
									"character": 9
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "block"
									},
									{
										"type": "stringLiteral",
										"value": "inline-block"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.display",
								"id": 10
							}
						},
						{
							"id": 1852,
							"name": "fixed",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Quick way of absolutely position to common places"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 89,
									"character": 7
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "fullscreen"
									},
									{
										"type": "stringLiteral",
										"value": "top"
									},
									{
										"type": "stringLiteral",
										"value": "top-left"
									},
									{
										"type": "stringLiteral",
										"value": "top-right"
									},
									{
										"type": "stringLiteral",
										"value": "bottom"
									},
									{
										"type": "stringLiteral",
										"value": "bottom-left"
									},
									{
										"type": "stringLiteral",
										"value": "bottom-right"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.fixed",
								"id": 11
							}
						},
						{
							"id": 1853,
							"name": "height",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Fixed height applied through inline styling"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 98,
									"character": 8
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.height",
								"id": 12
							}
						},
						{
							"id": 1854,
							"name": "margin",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Margins applied for the global spacing variables"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 100,
									"character": 8
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeSize",
								"id": 31
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.margin",
								"id": 13
							}
						},
						{
							"id": 1855,
							"name": "maxWidth",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Max width applied through inline styling"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 102,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.maxWidth",
								"id": 14
							}
						},
						{
							"id": 1856,
							"name": "minHeight",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Max height applied through inline styling"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 104,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.minHeight",
								"id": 15
							}
						},
						{
							"id": 1857,
							"name": "minWidth",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Min width applied through inline style"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 106,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.minWidth",
								"id": 16
							}
						},
						{
							"id": 1858,
							"name": "overflow",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Overflow"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 108,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "stringLiteral",
										"value": "hidden"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.overflow",
								"id": 17
							}
						},
						{
							"id": 1859,
							"name": "padding",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Padding applied for the global spacing variables"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 110,
									"character": 9
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeSize",
								"id": 31
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.padding",
								"id": 18
							}
						},
						{
							"id": 1860,
							"name": "paddingHorizontal",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Horizontal padding applied for the global spacing variables"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 112,
									"character": 19
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeSize",
								"id": 31
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.paddingHorizontal",
								"id": 19
							}
						},
						{
							"id": 1861,
							"name": "paddingVertical",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Vertical pa?dding applied for the global spacing variables"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 114,
									"character": 17
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeSize",
								"id": 31
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.paddingVertical",
								"id": 20
							}
						},
						{
							"id": 1862,
							"name": "scrollable",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies overflow styling to enable/disable scrolling."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 116,
									"character": 12
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.scrollable",
								"id": 21
							}
						},
						{
							"id": 1863,
							"name": "tag",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Any valid HTML or SVG element tag.",
								"tags": [
									{
										"tag": "reference",
										"text": "false\n"
									}
								]
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 122,
									"character": 5
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeAllElementTags",
								"id": 34
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.tag",
								"id": 22
							}
						},
						{
							"id": 1864,
							"name": "textColor",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Text colour to be applied."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 126,
									"character": 11
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeColor",
								"id": 30
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.textColor",
								"id": 23
							}
						},
						{
							"id": 1865,
							"name": "theme",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Theme applied to this element and inherited for child elements (until\na descendant theme is applied)."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 131,
									"character": 7
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeTheme",
								"id": 35
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.theme",
								"id": 24
							}
						},
						{
							"id": 1866,
							"name": "width",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Fixed width applied through inline styling"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 133,
									"character": 7
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.width",
								"id": 25
							}
						},
						{
							"id": 1867,
							"name": "zIndex",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "z-index number for layering elements."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 135,
									"character": 8
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "number"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.zIndex",
								"id": 26
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								1844,
								1845,
								1846,
								1847,
								1848,
								1849,
								1850,
								1851,
								1852,
								1853,
								1854,
								1855,
								1856,
								1857,
								1858,
								1859,
								1860,
								1861,
								1862,
								1863,
								1864,
								1865,
								1866,
								1867
							]
						}
					],
					"sources": [
						{
							"fileName": "src/Table/TableRow.tsx",
							"line": 5,
							"character": 30
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"name": "BaseProps",
							"id": 2
						}
					]
				},
				{
					"id": 1868,
					"name": "TableRow",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "src/Table/TableRow.tsx",
							"line": 7,
							"character": 14
						}
					],
					"type": {
						"type": "reference",
						"name": "ForwardRefExoticComponent",
						"typeArguments": [
							{
								"type": "intersection",
								"types": [
									{
										"type": "reference",
										"name": "TableRowProps",
										"id": 1843
									},
									{
										"type": "reflection",
										"declaration": {
											"id": 1869,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {}
										}
									},
									{
										"type": "reference",
										"name": "RefAttributes",
										"typeArguments": [
											{
												"type": "reference",
												"name": "HTMLTableRowElement"
											}
										]
									}
								]
							}
						]
					},
					"defaultValue": " React.forwardRef<HTMLTableRowElement, Attributes<HTMLTableRowElement, TableRowProps>>((props, ref) => {\n  const classes = classnames('Table__row', {\n    'Table__row--clickable': props.onClick,\n  });\n\n  return (\n    <Base { ...props }\n        className={ classes }\n        ref={ ref }\n        tag=\"tr\" />\n  );\n})"
				}
			],
			"groups": [
				{
					"title": "Interfaces",
					"kind": 256,
					"children": [
						1843
					]
				},
				{
					"title": "Variables",
					"kind": 32,
					"children": [
						1868
					]
				}
			],
			"sources": [
				{
					"fileName": "src/Table/TableRow.tsx",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 426,
			"name": "\"Text/Text\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "/Users/harry/Projects/personal/preshape/src/Text/Text.tsx",
			"children": [
				{
					"id": 427,
					"name": "TextProps",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"children": [
						{
							"id": 442,
							"name": "absolute",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Quick way of absolutely position to common places"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 58,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "fullscreen"
									},
									{
										"type": "stringLiteral",
										"value": "top"
									},
									{
										"type": "stringLiteral",
										"value": "top-left"
									},
									{
										"type": "stringLiteral",
										"value": "top-right"
									},
									{
										"type": "stringLiteral",
										"value": "bottom"
									},
									{
										"type": "stringLiteral",
										"value": "bottom-left"
									},
									{
										"type": "stringLiteral",
										"value": "bottom-right"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.absolute",
								"id": 3
							}
						},
						{
							"id": 428,
							"name": "align",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Text alignment"
							},
							"sources": [
								{
									"fileName": "src/Text/Text.tsx",
									"line": 32,
									"character": 7
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "start"
									},
									{
										"type": "stringLiteral",
										"value": "middle"
									},
									{
										"type": "stringLiteral",
										"value": "end"
									}
								]
							}
						},
						{
							"id": 443,
							"name": "backgroundColor",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Background colour to be applied, shades are taken from the current\ntheme."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 70,
									"character": 17
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeColor",
								"id": 30
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.backgroundColor",
								"id": 4
							}
						},
						{
							"id": 444,
							"name": "borderColor",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Border colour to be applied, shades are taken from the current\ntheme."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 75,
									"character": 13
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeColor",
								"id": 30
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.borderColor",
								"id": 5
							}
						},
						{
							"id": 445,
							"name": "borderRadius",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Adds styling of a border radius to one of the size multiples."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 79,
									"character": 14
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "x1"
									},
									{
										"type": "stringLiteral",
										"value": "x2"
									},
									{
										"type": "stringLiteral",
										"value": "x3"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.borderRadius",
								"id": 6
							}
						},
						{
							"id": 446,
							"name": "borderSize",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Thickness of the border to be applied"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 81,
									"character": 12
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "x1"
									},
									{
										"type": "stringLiteral",
										"value": "x2"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.borderSize",
								"id": 7
							}
						},
						{
							"id": 429,
							"name": "breakOn",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "How the block of text should break onto new lines."
							},
							"sources": [
								{
									"fileName": "src/Text/Text.tsx",
									"line": 34,
									"character": 9
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "all"
									},
									{
										"type": "stringLiteral",
										"value": "none"
									},
									{
										"type": "stringLiteral",
										"value": "word"
									}
								]
							}
						},
						{
							"id": 447,
							"name": "clickable",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Adds styling to indicate that the element is clickable"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 83,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.clickable",
								"id": 8
							}
						},
						{
							"id": 448,
							"name": "container",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies relative positioning to contain child elements."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 85,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.container",
								"id": 9
							}
						},
						{
							"id": 449,
							"name": "display",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies display styling"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 87,
									"character": 9
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "block"
									},
									{
										"type": "stringLiteral",
										"value": "inline-block"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.display",
								"id": 10
							}
						},
						{
							"id": 430,
							"name": "ellipsis",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Replaces the overflow of text with the ellipsis character"
							},
							"sources": [
								{
									"fileName": "src/Text/Text.tsx",
									"line": 36,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							}
						},
						{
							"id": 431,
							"name": "emphasis",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies emphasis styling"
							},
							"sources": [
								{
									"fileName": "src/Text/Text.tsx",
									"line": 38,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							}
						},
						{
							"id": 450,
							"name": "fixed",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Quick way of absolutely position to common places"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 89,
									"character": 7
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "fullscreen"
									},
									{
										"type": "stringLiteral",
										"value": "top"
									},
									{
										"type": "stringLiteral",
										"value": "top-left"
									},
									{
										"type": "stringLiteral",
										"value": "top-right"
									},
									{
										"type": "stringLiteral",
										"value": "bottom"
									},
									{
										"type": "stringLiteral",
										"value": "bottom-left"
									},
									{
										"type": "stringLiteral",
										"value": "bottom-right"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.fixed",
								"id": 11
							}
						},
						{
							"id": 432,
							"name": "heading",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies a heading font family style"
							},
							"sources": [
								{
									"fileName": "src/Text/Text.tsx",
									"line": 40,
									"character": 9
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							}
						},
						{
							"id": 451,
							"name": "height",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Fixed height applied through inline styling"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 98,
									"character": 8
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.height",
								"id": 12
							}
						},
						{
							"id": 433,
							"name": "inline",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Text default to block display, this will apply inline display."
							},
							"sources": [
								{
									"fileName": "src/Text/Text.tsx",
									"line": 42,
									"character": 8
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							}
						},
						{
							"id": 452,
							"name": "margin",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Margins applied for the global spacing variables"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 100,
									"character": 8
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeSize",
								"id": 31
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.margin",
								"id": 13
							}
						},
						{
							"id": 453,
							"name": "maxWidth",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Max width applied through inline styling"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 102,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.maxWidth",
								"id": 14
							}
						},
						{
							"id": 454,
							"name": "minHeight",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Max height applied through inline styling"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 104,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.minHeight",
								"id": 15
							}
						},
						{
							"id": 455,
							"name": "minWidth",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Min width applied through inline style"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 106,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.minWidth",
								"id": 16
							}
						},
						{
							"id": 434,
							"name": "monospace",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies a monospace font family style"
							},
							"sources": [
								{
									"fileName": "src/Text/Text.tsx",
									"line": 44,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							}
						},
						{
							"id": 456,
							"name": "overflow",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Overflow"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 108,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "stringLiteral",
										"value": "hidden"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.overflow",
								"id": 17
							}
						},
						{
							"id": 457,
							"name": "padding",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Padding applied for the global spacing variables"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 110,
									"character": 9
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeSize",
								"id": 31
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.padding",
								"id": 18
							}
						},
						{
							"id": 458,
							"name": "paddingHorizontal",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Horizontal padding applied for the global spacing variables"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 112,
									"character": 19
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeSize",
								"id": 31
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.paddingHorizontal",
								"id": 19
							}
						},
						{
							"id": 459,
							"name": "paddingVertical",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Vertical pa?dding applied for the global spacing variables"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 114,
									"character": 17
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeSize",
								"id": 31
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.paddingVertical",
								"id": 20
							}
						},
						{
							"id": 460,
							"name": "scrollable",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies overflow styling to enable/disable scrolling."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 116,
									"character": 12
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.scrollable",
								"id": 21
							}
						},
						{
							"id": 435,
							"name": "size",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Size of the text"
							},
							"sources": [
								{
									"fileName": "src/Text/Text.tsx",
									"line": 46,
									"character": 6
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeTextSize",
								"id": 466
							}
						},
						{
							"id": 436,
							"name": "strong",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies strong weight styling"
							},
							"sources": [
								{
									"fileName": "src/Text/Text.tsx",
									"line": 48,
									"character": 8
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							}
						},
						{
							"id": 437,
							"name": "subscript",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies subscript baseline styling"
							},
							"sources": [
								{
									"fileName": "src/Text/Text.tsx",
									"line": 50,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							}
						},
						{
							"id": 438,
							"name": "superscript",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies superscript baseline styling"
							},
							"sources": [
								{
									"fileName": "src/Text/Text.tsx",
									"line": 52,
									"character": 13
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							}
						},
						{
							"id": 461,
							"name": "tag",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Any valid HTML or SVG element tag.",
								"tags": [
									{
										"tag": "reference",
										"text": "false\n"
									}
								]
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 122,
									"character": 5
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeAllElementTags",
								"id": 34
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.tag",
								"id": 22
							}
						},
						{
							"id": 462,
							"name": "textColor",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Text colour to be applied."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 126,
									"character": 11
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeColor",
								"id": 30
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.textColor",
								"id": 23
							}
						},
						{
							"id": 463,
							"name": "theme",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Theme applied to this element and inherited for child elements (until\na descendant theme is applied)."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 131,
									"character": 7
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeTheme",
								"id": 35
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.theme",
								"id": 24
							}
						},
						{
							"id": 439,
							"name": "titlecase",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies title casing styling"
							},
							"sources": [
								{
									"fileName": "src/Text/Text.tsx",
									"line": 54,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							}
						},
						{
							"id": 440,
							"name": "uppercase",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies uppercasing styling"
							},
							"sources": [
								{
									"fileName": "src/Text/Text.tsx",
									"line": 56,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							}
						},
						{
							"id": 441,
							"name": "weak",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies weak weight styling"
							},
							"sources": [
								{
									"fileName": "src/Text/Text.tsx",
									"line": 58,
									"character": 6
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							}
						},
						{
							"id": 464,
							"name": "width",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Fixed width applied through inline styling"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 133,
									"character": 7
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.width",
								"id": 25
							}
						},
						{
							"id": 465,
							"name": "zIndex",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "z-index number for layering elements."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 135,
									"character": 8
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "number"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.zIndex",
								"id": 26
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								442,
								428,
								443,
								444,
								445,
								446,
								429,
								447,
								448,
								449,
								430,
								431,
								450,
								432,
								451,
								433,
								452,
								453,
								454,
								455,
								434,
								456,
								457,
								458,
								459,
								460,
								435,
								436,
								437,
								438,
								461,
								462,
								463,
								439,
								440,
								441,
								464,
								465
							]
						}
					],
					"sources": [
						{
							"fileName": "src/Text/Text.tsx",
							"line": 30,
							"character": 26
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"name": "BaseProps",
							"id": 2
						}
					],
					"extendedBy": [
						{
							"type": "reference",
							"name": "BlockQuoteProps",
							"id": 479
						},
						{
							"type": "reference",
							"name": "CodeProps",
							"id": 710
						},
						{
							"type": "reference",
							"name": "CodeBlockProps",
							"id": 752
						},
						{
							"type": "reference",
							"name": "InputProps",
							"id": 1048
						},
						{
							"type": "reference",
							"name": "LabelProps",
							"id": 1091
						},
						{
							"type": "reference",
							"name": "LinkProps",
							"id": 1161
						},
						{
							"type": "reference",
							"name": "TableProps",
							"id": 1658
						},
						{
							"type": "reference",
							"name": "TableCellProps",
							"id": 1728
						},
						{
							"type": "reference",
							"name": "TableHeaderCellProps",
							"id": 1799
						},
						{
							"type": "reference",
							"name": "TextAreaProps",
							"id": 1871
						}
					]
				},
				{
					"id": 466,
					"name": "TypeTextSize",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {
						"isExported": true
					},
					"sources": [
						{
							"fileName": "src/Text/Text.tsx",
							"line": 6,
							"character": 24
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "stringLiteral",
								"value": "x1"
							},
							{
								"type": "stringLiteral",
								"value": "x2"
							},
							{
								"type": "stringLiteral",
								"value": "x3"
							},
							{
								"type": "stringLiteral",
								"value": "x4"
							},
							{
								"type": "stringLiteral",
								"value": "x5"
							}
						]
					}
				},
				{
					"id": 476,
					"name": "Text",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "src/Text/Text.tsx",
							"line": 61,
							"character": 10
						}
					],
					"type": {
						"type": "reference",
						"name": "ForwardRefExoticComponent",
						"typeArguments": [
							{
								"type": "intersection",
								"types": [
									{
										"type": "reference",
										"name": "TextProps",
										"id": 427
									},
									{
										"type": "reflection",
										"declaration": {
											"id": 477,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {}
										}
									},
									{
										"type": "reference",
										"name": "RefAttributes",
										"typeArguments": [
											{
												"type": "reference",
												"name": "HTMLElement"
											}
										]
									}
								]
							}
						]
					},
					"defaultValue": " React.forwardRef<HTMLElement, Attributes<HTMLElement, TextProps>>((props, ref) => {\n  const {\n    align,\n    breakOn,\n    className,\n    ellipsis,\n    emphasis,\n    heading,\n    inline,\n    monospace,\n    size,\n    strong,\n    subscript,\n    superscript,\n    tag,\n    titlecase,\n    uppercase,\n    weak,\n    ...rest\n  } = props;\n\n  const classes = classnames(className, 'Text', {\n    'Text--ellipsis': ellipsis,\n    'Text--emphasis': emphasis,\n    'Text--heading': heading,\n    'Text--monospace': monospace,\n    'Text--subscript': subscript,\n    'Text--superscript': superscript,\n    'Text--strong': strong,\n    'Text--titlecase': titlecase,\n    'Text--uppercase': uppercase,\n    'Text--weak': weak,\n    [`Text--align-${align}`]: align,\n    [`Text--break-${breakOn}`]: breakOn,\n    [`Text--size-${size}`]: size,\n  });\n\n  const finalTag = tag || (inline\n    ? TagInlineMap(props)\n    : (size && TagBlockMap[size])) || 'div';\n\n  return (\n    <Base { ...rest }\n        className={ classes }\n        ref={ ref }\n        tag={ finalTag } />\n  );\n})"
				},
				{
					"id": 473,
					"name": "TagInlineMap",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isConst": true
					},
					"signatures": [
						{
							"id": 474,
							"name": "TagInlineMap",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 475,
									"name": "props",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "TextProps",
										"id": 427
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeAllElementTags",
								"id": 34
							}
						}
					],
					"sources": [
						{
							"fileName": "src/Text/Text.tsx",
							"line": 23,
							"character": 18
						}
					]
				},
				{
					"id": 467,
					"name": "TagBlockMap",
					"kind": 2097152,
					"kindString": "Object literal",
					"flags": {
						"isConst": true
					},
					"children": [
						{
							"id": 468,
							"name": "x1",
							"kind": 32,
							"kindString": "Variable",
							"flags": {},
							"sources": [
								{
									"fileName": "src/Text/Text.tsx",
									"line": 16,
									"character": 4
								}
							],
							"type": {
								"type": "stringLiteral",
								"value": "p"
							},
							"defaultValue": "\"p\""
						},
						{
							"id": 469,
							"name": "x2",
							"kind": 32,
							"kindString": "Variable",
							"flags": {},
							"sources": [
								{
									"fileName": "src/Text/Text.tsx",
									"line": 17,
									"character": 4
								}
							],
							"type": {
								"type": "stringLiteral",
								"value": "p"
							},
							"defaultValue": "\"p\""
						},
						{
							"id": 470,
							"name": "x3",
							"kind": 32,
							"kindString": "Variable",
							"flags": {},
							"sources": [
								{
									"fileName": "src/Text/Text.tsx",
									"line": 18,
									"character": 4
								}
							],
							"type": {
								"type": "stringLiteral",
								"value": "h3"
							},
							"defaultValue": "\"h3\""
						},
						{
							"id": 471,
							"name": "x4",
							"kind": 32,
							"kindString": "Variable",
							"flags": {},
							"sources": [
								{
									"fileName": "src/Text/Text.tsx",
									"line": 19,
									"character": 4
								}
							],
							"type": {
								"type": "stringLiteral",
								"value": "h2"
							},
							"defaultValue": "\"h2\""
						},
						{
							"id": 472,
							"name": "x5",
							"kind": 32,
							"kindString": "Variable",
							"flags": {},
							"sources": [
								{
									"fileName": "src/Text/Text.tsx",
									"line": 20,
									"character": 4
								}
							],
							"type": {
								"type": "stringLiteral",
								"value": "h1"
							},
							"defaultValue": "\"h1\""
						}
					],
					"groups": [
						{
							"title": "Variables",
							"kind": 32,
							"children": [
								468,
								469,
								470,
								471,
								472
							]
						}
					],
					"sources": [
						{
							"fileName": "src/Text/Text.tsx",
							"line": 13,
							"character": 17
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "object"
					}
				}
			],
			"groups": [
				{
					"title": "Interfaces",
					"kind": 256,
					"children": [
						427
					]
				},
				{
					"title": "Type aliases",
					"kind": 4194304,
					"children": [
						466
					]
				},
				{
					"title": "Variables",
					"kind": 32,
					"children": [
						476
					]
				},
				{
					"title": "Functions",
					"kind": 64,
					"children": [
						473
					]
				},
				{
					"title": "Object literals",
					"kind": 2097152,
					"children": [
						467
					]
				}
			],
			"sources": [
				{
					"fileName": "src/Text/Text.tsx",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 1870,
			"name": "\"TextArea/TextArea\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "/Users/harry/Projects/personal/preshape/src/TextArea/TextArea.tsx",
			"children": [
				{
					"id": 1871,
					"name": "TextAreaProps",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"children": [
						{
							"id": 1892,
							"name": "absolute",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Quick way of absolutely position to common places"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 58,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "fullscreen"
									},
									{
										"type": "stringLiteral",
										"value": "top"
									},
									{
										"type": "stringLiteral",
										"value": "top-left"
									},
									{
										"type": "stringLiteral",
										"value": "top-right"
									},
									{
										"type": "stringLiteral",
										"value": "bottom"
									},
									{
										"type": "stringLiteral",
										"value": "bottom-left"
									},
									{
										"type": "stringLiteral",
										"value": "bottom-right"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.absolute",
								"id": 3
							}
						},
						{
							"id": 1878,
							"name": "align",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Text alignment"
							},
							"sources": [
								{
									"fileName": "src/Text/Text.tsx",
									"line": 32,
									"character": 7
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "start"
									},
									{
										"type": "stringLiteral",
										"value": "middle"
									},
									{
										"type": "stringLiteral",
										"value": "end"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TextProps.align",
								"id": 428
							}
						},
						{
							"id": 1893,
							"name": "backgroundColor",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Background colour to be applied, shades are taken from the current\ntheme."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 70,
									"character": 17
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeColor",
								"id": 30
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.backgroundColor",
								"id": 4
							}
						},
						{
							"id": 1894,
							"name": "borderColor",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Border colour to be applied, shades are taken from the current\ntheme."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 75,
									"character": 13
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeColor",
								"id": 30
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.borderColor",
								"id": 5
							}
						},
						{
							"id": 1895,
							"name": "borderRadius",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Adds styling of a border radius to one of the size multiples."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 79,
									"character": 14
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "x1"
									},
									{
										"type": "stringLiteral",
										"value": "x2"
									},
									{
										"type": "stringLiteral",
										"value": "x3"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.borderRadius",
								"id": 6
							}
						},
						{
							"id": 1896,
							"name": "borderSize",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Thickness of the border to be applied"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 81,
									"character": 12
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "x1"
									},
									{
										"type": "stringLiteral",
										"value": "x2"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.borderSize",
								"id": 7
							}
						},
						{
							"id": 1879,
							"name": "breakOn",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "How the block of text should break onto new lines."
							},
							"sources": [
								{
									"fileName": "src/Text/Text.tsx",
									"line": 34,
									"character": 9
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "all"
									},
									{
										"type": "stringLiteral",
										"value": "none"
									},
									{
										"type": "stringLiteral",
										"value": "word"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TextProps.breakOn",
								"id": 429
							}
						},
						{
							"id": 1897,
							"name": "clickable",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Adds styling to indicate that the element is clickable"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 83,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.clickable",
								"id": 8
							}
						},
						{
							"id": 1898,
							"name": "container",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies relative positioning to contain child elements."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 85,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.container",
								"id": 9
							}
						},
						{
							"id": 1872,
							"name": "disabled",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "A styled disabled state that disables all interactions"
							},
							"sources": [
								{
									"fileName": "src/TextArea/TextArea.tsx",
									"line": 9,
									"character": 12
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							}
						},
						{
							"id": 1899,
							"name": "display",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies display styling"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 87,
									"character": 9
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "block"
									},
									{
										"type": "stringLiteral",
										"value": "inline-block"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.display",
								"id": 10
							}
						},
						{
							"id": 1880,
							"name": "ellipsis",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Replaces the overflow of text with the ellipsis character"
							},
							"sources": [
								{
									"fileName": "src/Text/Text.tsx",
									"line": 36,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TextProps.ellipsis",
								"id": 430
							}
						},
						{
							"id": 1881,
							"name": "emphasis",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies emphasis styling"
							},
							"sources": [
								{
									"fileName": "src/Text/Text.tsx",
									"line": 38,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TextProps.emphasis",
								"id": 431
							}
						},
						{
							"id": 1900,
							"name": "fixed",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Quick way of absolutely position to common places"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 89,
									"character": 7
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "fullscreen"
									},
									{
										"type": "stringLiteral",
										"value": "top"
									},
									{
										"type": "stringLiteral",
										"value": "top-left"
									},
									{
										"type": "stringLiteral",
										"value": "top-right"
									},
									{
										"type": "stringLiteral",
										"value": "bottom"
									},
									{
										"type": "stringLiteral",
										"value": "bottom-left"
									},
									{
										"type": "stringLiteral",
										"value": "bottom-right"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.fixed",
								"id": 11
							}
						},
						{
							"id": 1882,
							"name": "heading",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies a heading font family style"
							},
							"sources": [
								{
									"fileName": "src/Text/Text.tsx",
									"line": 40,
									"character": 9
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TextProps.heading",
								"id": 432
							}
						},
						{
							"id": 1901,
							"name": "height",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Fixed height applied through inline styling"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 98,
									"character": 8
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.height",
								"id": 12
							}
						},
						{
							"id": 1883,
							"name": "inline",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Text default to block display, this will apply inline display."
							},
							"sources": [
								{
									"fileName": "src/Text/Text.tsx",
									"line": 42,
									"character": 8
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TextProps.inline",
								"id": 433
							}
						},
						{
							"id": 1873,
							"name": "label",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "A label that gives describes what the input is for"
							},
							"sources": [
								{
									"fileName": "src/TextArea/TextArea.tsx",
									"line": 11,
									"character": 9
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							}
						},
						{
							"id": 1902,
							"name": "maxWidth",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Max width applied through inline styling"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 102,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.maxWidth",
								"id": 14
							}
						},
						{
							"id": 1903,
							"name": "minHeight",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Max height applied through inline styling"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 104,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.minHeight",
								"id": 15
							}
						},
						{
							"id": 1904,
							"name": "minWidth",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Min width applied through inline style"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 106,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.minWidth",
								"id": 16
							}
						},
						{
							"id": 1884,
							"name": "monospace",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies a monospace font family style"
							},
							"sources": [
								{
									"fileName": "src/Text/Text.tsx",
									"line": 44,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TextProps.monospace",
								"id": 434
							}
						},
						{
							"id": 1905,
							"name": "overflow",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Overflow"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 108,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "stringLiteral",
										"value": "hidden"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.overflow",
								"id": 17
							}
						},
						{
							"id": 1906,
							"name": "scrollable",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies overflow styling to enable/disable scrolling."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 116,
									"character": 12
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.scrollable",
								"id": 21
							}
						},
						{
							"id": 1885,
							"name": "size",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Size of the text"
							},
							"sources": [
								{
									"fileName": "src/Text/Text.tsx",
									"line": 46,
									"character": 6
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeTextSize",
								"id": 466
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TextProps.size",
								"id": 435
							}
						},
						{
							"id": 1886,
							"name": "strong",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies strong weight styling"
							},
							"sources": [
								{
									"fileName": "src/Text/Text.tsx",
									"line": 48,
									"character": 8
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TextProps.strong",
								"id": 436
							}
						},
						{
							"id": 1887,
							"name": "subscript",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies subscript baseline styling"
							},
							"sources": [
								{
									"fileName": "src/Text/Text.tsx",
									"line": 50,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TextProps.subscript",
								"id": 437
							}
						},
						{
							"id": 1888,
							"name": "superscript",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies superscript baseline styling"
							},
							"sources": [
								{
									"fileName": "src/Text/Text.tsx",
									"line": 52,
									"character": 13
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TextProps.superscript",
								"id": 438
							}
						},
						{
							"id": 1907,
							"name": "tag",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Any valid HTML or SVG element tag.",
								"tags": [
									{
										"tag": "reference",
										"text": "false\n"
									}
								]
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 122,
									"character": 5
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeAllElementTags",
								"id": 34
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.tag",
								"id": 22
							}
						},
						{
							"id": 1908,
							"name": "textColor",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Text colour to be applied."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 126,
									"character": 11
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeColor",
								"id": 30
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.textColor",
								"id": 23
							}
						},
						{
							"id": 1909,
							"name": "theme",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Theme applied to this element and inherited for child elements (until\na descendant theme is applied)."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 131,
									"character": 7
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeTheme",
								"id": 35
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.theme",
								"id": 24
							}
						},
						{
							"id": 1889,
							"name": "titlecase",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies title casing styling"
							},
							"sources": [
								{
									"fileName": "src/Text/Text.tsx",
									"line": 54,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TextProps.titlecase",
								"id": 439
							}
						},
						{
							"id": 1890,
							"name": "uppercase",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies uppercasing styling"
							},
							"sources": [
								{
									"fileName": "src/Text/Text.tsx",
									"line": 56,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TextProps.uppercase",
								"id": 440
							}
						},
						{
							"id": 1891,
							"name": "weak",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies weak weight styling"
							},
							"sources": [
								{
									"fileName": "src/Text/Text.tsx",
									"line": 58,
									"character": 6
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TextProps.weak",
								"id": 441
							}
						},
						{
							"id": 1910,
							"name": "width",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Fixed width applied through inline styling"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 133,
									"character": 7
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.width",
								"id": 25
							}
						},
						{
							"id": 1911,
							"name": "zIndex",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "z-index number for layering elements."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 135,
									"character": 8
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "number"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.zIndex",
								"id": 26
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								1892,
								1878,
								1893,
								1894,
								1895,
								1896,
								1879,
								1897,
								1898,
								1872,
								1899,
								1880,
								1881,
								1900,
								1882,
								1901,
								1883,
								1873,
								1902,
								1903,
								1904,
								1884,
								1905,
								1906,
								1885,
								1886,
								1887,
								1888,
								1907,
								1908,
								1909,
								1889,
								1890,
								1891,
								1910,
								1911
							]
						}
					],
					"sources": [
						{
							"fileName": "src/TextArea/TextArea.tsx",
							"line": 7,
							"character": 30
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"name": "TextProps",
							"id": 427
						}
					]
				},
				{
					"id": 1912,
					"name": "TextArea",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "src/TextArea/TextArea.tsx",
							"line": 22,
							"character": 14
						}
					],
					"type": {
						"type": "reference",
						"name": "ForwardRefExoticComponent",
						"typeArguments": [
							{
								"type": "intersection",
								"types": [
									{
										"type": "reference",
										"name": "TextAreaProps",
										"id": 1871
									},
									{
										"type": "reflection",
										"declaration": {
											"id": 1913,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {}
										}
									},
									{
										"type": "reference",
										"name": "RefAttributes",
										"typeArguments": [
											{
												"type": "reference",
												"name": "HTMLTextAreaElement"
											}
										]
									}
								]
							}
						]
					},
					"defaultValue": " React.forwardRef<HTMLTextAreaElement, Attributes<HTMLTextAreaElement, TextAreaProps>>((props, ref) => {\n  const {\n    disabled,\n    label,\n    margin,\n    padding,\n    paddingHorizontal = 'x3',\n    paddingVertical = 'x2',\n    ...rest\n  } = props;\n\n  return (\n    <InputLabel\n        disabled={ disabled }\n        label={ label }\n        margin={ margin }\n        paddingHorizontal={ padding || paddingHorizontal }\n        paddingVertical={ padding || paddingVertical }>\n      <Text { ...rest }\n          className=\"TextArea\"\n          disabled={ disabled }\n          paddingHorizontal={ padding || paddingHorizontal }\n          paddingVertical={ padding || paddingVertical }\n          ref={ ref }\n          size=\"x1\"\n          strong\n          tag=\"textarea\" />\n    </InputLabel>\n  );\n})"
				}
			],
			"groups": [
				{
					"title": "Interfaces",
					"kind": 256,
					"children": [
						1871
					]
				},
				{
					"title": "Variables",
					"kind": 32,
					"children": [
						1912
					]
				}
			],
			"sources": [
				{
					"fileName": "src/TextArea/TextArea.tsx",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 1914,
			"name": "\"ThemeSwitcher/ThemeSwitcher\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "/Users/harry/Projects/personal/preshape/src/ThemeSwitcher/ThemeSwitcher.tsx",
			"children": [
				{
					"id": 1915,
					"name": "ThemeSwitcherProps",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"children": [
						{
							"id": 1931,
							"name": "absolute",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Quick way of absolutely position to common places"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 58,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "fullscreen"
									},
									{
										"type": "stringLiteral",
										"value": "top"
									},
									{
										"type": "stringLiteral",
										"value": "top-left"
									},
									{
										"type": "stringLiteral",
										"value": "top-right"
									},
									{
										"type": "stringLiteral",
										"value": "bottom"
									},
									{
										"type": "stringLiteral",
										"value": "bottom-left"
									},
									{
										"type": "stringLiteral",
										"value": "bottom-right"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.absolute",
								"id": 3
							}
						},
						{
							"id": 1922,
							"name": "alignChildren",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Short cut child alignment property for both alignChildrenHorizontal and\nalignChildrenVertical."
							},
							"sources": [
								{
									"fileName": "src/Flex/Flex.tsx",
									"line": 11,
									"character": 15
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "start"
									},
									{
										"type": "stringLiteral",
										"value": "middle"
									},
									{
										"type": "stringLiteral",
										"value": "end"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "FlexProps.alignChildren",
								"id": 240
							}
						},
						{
							"id": 1923,
							"name": "alignChildrenHorizontal",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Horizontal alignment of children flex items."
							},
							"sources": [
								{
									"fileName": "src/Flex/Flex.tsx",
									"line": 13,
									"character": 25
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "start"
									},
									{
										"type": "stringLiteral",
										"value": "middle"
									},
									{
										"type": "stringLiteral",
										"value": "end"
									},
									{
										"type": "stringLiteral",
										"value": "around"
									},
									{
										"type": "stringLiteral",
										"value": "between"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "FlexProps.alignChildrenHorizontal",
								"id": 241
							}
						},
						{
							"id": 1924,
							"name": "alignChildrenVertical",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Vertical alignment of children flex items."
							},
							"sources": [
								{
									"fileName": "src/Flex/Flex.tsx",
									"line": 15,
									"character": 23
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "start"
									},
									{
										"type": "stringLiteral",
										"value": "middle"
									},
									{
										"type": "stringLiteral",
										"value": "end"
									},
									{
										"type": "stringLiteral",
										"value": "around"
									},
									{
										"type": "stringLiteral",
										"value": "between"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "FlexProps.alignChildrenVertical",
								"id": 242
							}
						},
						{
							"id": 1925,
							"name": "alignSelf",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Flex item alignment property (changes with parent direction)."
							},
							"sources": [
								{
									"fileName": "src/Flex/Flex.tsx",
									"line": 17,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "start"
									},
									{
										"type": "stringLiteral",
										"value": "middle"
									},
									{
										"type": "stringLiteral",
										"value": "end"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "FlexProps.alignSelf",
								"id": 243
							}
						},
						{
							"id": 1932,
							"name": "backgroundColor",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Background colour to be applied, shades are taken from the current\ntheme."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 70,
									"character": 17
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeColor",
								"id": 30
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.backgroundColor",
								"id": 4
							}
						},
						{
							"id": 1926,
							"name": "basis",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Initial width to flex from for a child item."
							},
							"sources": [
								{
									"fileName": "src/Flex/Flex.tsx",
									"line": 19,
									"character": 7
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "content"
									},
									{
										"type": "stringLiteral",
										"value": "container"
									},
									{
										"type": "stringLiteral",
										"value": "none"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "FlexProps.basis",
								"id": 244
							}
						},
						{
							"id": 1933,
							"name": "borderColor",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Border colour to be applied, shades are taken from the current\ntheme."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 75,
									"character": 13
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeColor",
								"id": 30
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.borderColor",
								"id": 5
							}
						},
						{
							"id": 1934,
							"name": "borderRadius",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Adds styling of a border radius to one of the size multiples."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 79,
									"character": 14
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "x1"
									},
									{
										"type": "stringLiteral",
										"value": "x2"
									},
									{
										"type": "stringLiteral",
										"value": "x3"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.borderRadius",
								"id": 6
							}
						},
						{
							"id": 1935,
							"name": "borderSize",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Thickness of the border to be applied"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 81,
									"character": 12
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "x1"
									},
									{
										"type": "stringLiteral",
										"value": "x2"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.borderSize",
								"id": 7
							}
						},
						{
							"id": 1936,
							"name": "clickable",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Adds styling to indicate that the element is clickable"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 83,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.clickable",
								"id": 8
							}
						},
						{
							"id": 1937,
							"name": "container",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies relative positioning to contain child elements."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 85,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.container",
								"id": 9
							}
						},
						{
							"id": 1927,
							"name": "direction",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Direction on which way to flex items."
							},
							"sources": [
								{
									"fileName": "src/Flex/Flex.tsx",
									"line": 21,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "horizontal"
									},
									{
										"type": "stringLiteral",
										"value": "vertical"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "FlexProps.direction",
								"id": 245
							}
						},
						{
							"id": 1938,
							"name": "display",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies display styling"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 87,
									"character": 9
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "block"
									},
									{
										"type": "stringLiteral",
										"value": "inline-block"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.display",
								"id": 10
							}
						},
						{
							"id": 1939,
							"name": "fixed",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Quick way of absolutely position to common places"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 89,
									"character": 7
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "fullscreen"
									},
									{
										"type": "stringLiteral",
										"value": "top"
									},
									{
										"type": "stringLiteral",
										"value": "top-left"
									},
									{
										"type": "stringLiteral",
										"value": "top-right"
									},
									{
										"type": "stringLiteral",
										"value": "bottom"
									},
									{
										"type": "stringLiteral",
										"value": "bottom-left"
									},
									{
										"type": "stringLiteral",
										"value": "bottom-right"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.fixed",
								"id": 11
							}
						},
						{
							"id": 1921,
							"name": "gap",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Spacing applied between child ListItems, values are global spacing variables.",
								"tags": [
									{
										"tag": "default",
										"text": "\"x1\"\n"
									}
								]
							},
							"sources": [
								{
									"fileName": "src/List/List.tsx",
									"line": 13,
									"character": 5
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeSize",
								"id": 31
							},
							"overwrites": {
								"type": "reference",
								"name": "FlexProps.gap",
								"id": 246
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "ListProps.gap",
								"id": 1213
							}
						},
						{
							"id": 1928,
							"name": "grow",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Flex item property if it should grow with available space."
							},
							"sources": [
								{
									"fileName": "src/Flex/Flex.tsx",
									"line": 25,
									"character": 6
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "FlexProps.grow",
								"id": 247
							}
						},
						{
							"id": 1940,
							"name": "height",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Fixed height applied through inline styling"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 98,
									"character": 8
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.height",
								"id": 12
							}
						},
						{
							"id": 1941,
							"name": "margin",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Margins applied for the global spacing variables"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 100,
									"character": 8
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeSize",
								"id": 31
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.margin",
								"id": 13
							}
						},
						{
							"id": 1942,
							"name": "maxWidth",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Max width applied through inline styling"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 102,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.maxWidth",
								"id": 14
							}
						},
						{
							"id": 1943,
							"name": "minHeight",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Max height applied through inline styling"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 104,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.minHeight",
								"id": 15
							}
						},
						{
							"id": 1944,
							"name": "minWidth",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Min width applied through inline style"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 106,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.minWidth",
								"id": 16
							}
						},
						{
							"id": 1916,
							"name": "onChange",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/ThemeSwitcher/ThemeSwitcher.tsx",
									"line": 9,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "reflection",
										"declaration": {
											"id": 1917,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"signatures": [
												{
													"id": 1918,
													"name": "__call",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"parameters": [
														{
															"id": 1919,
															"name": "theme",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "reference",
																"name": "TypeTheme",
																"id": 35
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								]
							}
						},
						{
							"id": 1945,
							"name": "overflow",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Overflow"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 108,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "stringLiteral",
										"value": "hidden"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.overflow",
								"id": 17
							}
						},
						{
							"id": 1946,
							"name": "padding",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Padding applied for the global spacing variables"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 110,
									"character": 9
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeSize",
								"id": 31
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.padding",
								"id": 18
							}
						},
						{
							"id": 1947,
							"name": "paddingHorizontal",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Horizontal padding applied for the global spacing variables"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 112,
									"character": 19
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeSize",
								"id": 31
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.paddingHorizontal",
								"id": 19
							}
						},
						{
							"id": 1948,
							"name": "paddingVertical",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Vertical pa?dding applied for the global spacing variables"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 114,
									"character": 17
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeSize",
								"id": 31
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.paddingVertical",
								"id": 20
							}
						},
						{
							"id": 1949,
							"name": "scrollable",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies overflow styling to enable/disable scrolling."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 116,
									"character": 12
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.scrollable",
								"id": 21
							}
						},
						{
							"id": 1929,
							"name": "shrink",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Flex item property if it should shrink."
							},
							"sources": [
								{
									"fileName": "src/Flex/Flex.tsx",
									"line": 27,
									"character": 8
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "FlexProps.shrink",
								"id": 248
							}
						},
						{
							"id": 1950,
							"name": "tag",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Any valid HTML or SVG element tag.",
								"tags": [
									{
										"tag": "reference",
										"text": "false\n"
									}
								]
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 122,
									"character": 5
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeAllElementTags",
								"id": 34
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.tag",
								"id": 22
							}
						},
						{
							"id": 1951,
							"name": "textColor",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Text colour to be applied."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 126,
									"character": 11
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeColor",
								"id": 30
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.textColor",
								"id": 23
							}
						},
						{
							"id": 1920,
							"name": "theme",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/ThemeSwitcher/ThemeSwitcher.tsx",
									"line": 10,
									"character": 7
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeTheme",
								"id": 35
							},
							"overwrites": {
								"type": "reference",
								"name": "BaseProps.theme",
								"id": 24
							}
						},
						{
							"id": 1952,
							"name": "width",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Fixed width applied through inline styling"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 133,
									"character": 7
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.width",
								"id": 25
							}
						},
						{
							"id": 1930,
							"name": "wrap",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Flag to allow flex items to wrap over to new lines"
							},
							"sources": [
								{
									"fileName": "src/Flex/Flex.tsx",
									"line": 29,
									"character": 6
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "FlexProps.wrap",
								"id": 249
							}
						},
						{
							"id": 1953,
							"name": "zIndex",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "z-index number for layering elements."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 135,
									"character": 8
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "number"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.zIndex",
								"id": 26
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								1931,
								1922,
								1923,
								1924,
								1925,
								1932,
								1926,
								1933,
								1934,
								1935,
								1936,
								1937,
								1927,
								1938,
								1939,
								1921,
								1928,
								1940,
								1941,
								1942,
								1943,
								1944,
								1916,
								1945,
								1946,
								1947,
								1948,
								1949,
								1929,
								1950,
								1951,
								1920,
								1952,
								1930,
								1953
							]
						}
					],
					"sources": [
						{
							"fileName": "src/ThemeSwitcher/ThemeSwitcher.tsx",
							"line": 8,
							"character": 35
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"name": "ListProps",
							"id": 1212
						}
					]
				},
				{
					"id": 1954,
					"name": "ThemeControls",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "src/ThemeSwitcher/ThemeSwitcher.tsx",
							"line": 13,
							"character": 19
						}
					],
					"type": {
						"type": "reference",
						"name": "ForwardRefExoticComponent",
						"typeArguments": [
							{
								"type": "intersection",
								"types": [
									{
										"type": "reference",
										"name": "ThemeSwitcherProps",
										"id": 1915
									},
									{
										"type": "reflection",
										"declaration": {
											"id": 1955,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {}
										}
									},
									{
										"type": "reference",
										"name": "RefAttributes",
										"typeArguments": [
											{
												"type": "reference",
												"name": "HTMLUListElement"
											}
										]
									}
								]
							}
						]
					},
					"defaultValue": " React.forwardRef<HTMLUListElement, Attributes<HTMLUListElement, ThemeSwitcherProps>>((props, ref) => {\n  const { onChange, theme, ...rest } = props;\n\n  return (\n    <List { ...rest } ref={ ref }>\n      <ListItem>\n        <Link\n            active={ theme === 'day' }\n            onClick={ onChange && (() => onChange('day')) }>\n          <Icon name=\"Sun\" size=\"1rem\" />\n        </Link>\n      </ListItem>\n\n      <ListItem>\n        <Link\n            active={ theme === 'night' }\n            onClick={ onChange && (() => onChange('night')) }>\n          <Icon name=\"Moon\" size=\"0.9rem\" />\n        </Link>\n      </ListItem>\n    </List>\n  );\n})"
				}
			],
			"groups": [
				{
					"title": "Interfaces",
					"kind": 256,
					"children": [
						1915
					]
				},
				{
					"title": "Variables",
					"kind": 32,
					"children": [
						1954
					]
				}
			],
			"sources": [
				{
					"fileName": "src/ThemeSwitcher/ThemeSwitcher.tsx",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 1363,
			"name": "\"hooks/index\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "/Users/harry/Projects/personal/preshape/src/hooks/index.ts",
			"sources": [
				{
					"fileName": "src/hooks/index.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 1288,
			"name": "\"hooks/useEventListener\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "/Users/harry/Projects/personal/preshape/src/hooks/useEventListener.ts",
			"children": [
				{
					"id": 1289,
					"name": "useEventListener",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1290,
							"name": "useEventListener",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"typeParameter": [
								{
									"id": 1291,
									"name": "E",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Window"
									}
								},
								{
									"id": 1292,
									"name": "K",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {},
									"type": {
										"type": "typeOperator",
										"operator": "keyof",
										"target": {
											"type": "reference",
											"name": "WindowEventMap"
										}
									}
								}
							],
							"parameters": [
								{
									"id": 1293,
									"name": "el",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "typeParameter",
												"name": "E",
												"constraint": {
													"type": "reference",
													"name": "Window"
												}
											},
											{
												"type": "intrinsic",
												"name": "null"
											},
											{
												"type": "intrinsic",
												"name": "undefined"
											}
										]
									}
								},
								{
									"id": 1294,
									"name": "type",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"name": "K",
										"constraint": {
											"type": "typeOperator",
											"operator": "keyof",
											"target": {
												"type": "reference",
												"name": "WindowEventMap"
											}
										}
									}
								},
								{
									"id": 1295,
									"name": "handler",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 1296,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {
												"isExported": true
											},
											"signatures": [
												{
													"id": 1297,
													"name": "__call",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"parameters": [
														{
															"id": 1298,
															"name": "evnt",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "unknown",
																"name": "WindowEventMap[K]"
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											],
											"sources": [
												{
													"fileName": "src/hooks/useEventListener.ts",
													"line": 4,
													"character": 119
												}
											]
										}
									}
								},
								{
									"id": 1299,
									"name": "watch",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "any"
										}
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						},
						{
							"id": 1300,
							"name": "useEventListener",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"typeParameter": [
								{
									"id": 1301,
									"name": "E",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Document"
									}
								},
								{
									"id": 1302,
									"name": "K",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {},
									"type": {
										"type": "typeOperator",
										"operator": "keyof",
										"target": {
											"type": "reference",
											"name": "DocumentEventMap"
										}
									}
								}
							],
							"parameters": [
								{
									"id": 1303,
									"name": "el",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "typeParameter",
												"name": "E",
												"constraint": {
													"type": "reference",
													"name": "Document"
												}
											},
											{
												"type": "intrinsic",
												"name": "null"
											},
											{
												"type": "intrinsic",
												"name": "undefined"
											}
										]
									}
								},
								{
									"id": 1304,
									"name": "type",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"name": "K",
										"constraint": {
											"type": "typeOperator",
											"operator": "keyof",
											"target": {
												"type": "reference",
												"name": "DocumentEventMap"
											}
										}
									}
								},
								{
									"id": 1305,
									"name": "handler",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 1306,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {
												"isExported": true
											},
											"signatures": [
												{
													"id": 1307,
													"name": "__call",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"parameters": [
														{
															"id": 1308,
															"name": "evt",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "unknown",
																"name": "DocumentEventMap[K]"
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											],
											"sources": [
												{
													"fileName": "src/hooks/useEventListener.ts",
													"line": 5,
													"character": 123
												}
											]
										}
									}
								},
								{
									"id": 1309,
									"name": "watch",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "any"
										}
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						},
						{
							"id": 1310,
							"name": "useEventListener",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"typeParameter": [
								{
									"id": 1311,
									"name": "E",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "HTMLElement"
									}
								},
								{
									"id": 1312,
									"name": "K",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {},
									"type": {
										"type": "typeOperator",
										"operator": "keyof",
										"target": {
											"type": "reference",
											"name": "HTMLElementEventMap"
										}
									}
								}
							],
							"parameters": [
								{
									"id": 1313,
									"name": "el",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "typeParameter",
												"name": "E",
												"constraint": {
													"type": "reference",
													"name": "HTMLElement"
												}
											},
											{
												"type": "intrinsic",
												"name": "null"
											},
											{
												"type": "intrinsic",
												"name": "undefined"
											}
										]
									}
								},
								{
									"id": 1314,
									"name": "type",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"name": "K",
										"constraint": {
											"type": "typeOperator",
											"operator": "keyof",
											"target": {
												"type": "reference",
												"name": "HTMLElementEventMap"
											}
										}
									}
								},
								{
									"id": 1315,
									"name": "handler",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 1316,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {
												"isExported": true
											},
											"signatures": [
												{
													"id": 1317,
													"name": "__call",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"parameters": [
														{
															"id": 1318,
															"name": "evt",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "unknown",
																"name": "HTMLElementEventMap[K]"
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											],
											"sources": [
												{
													"fileName": "src/hooks/useEventListener.ts",
													"line": 6,
													"character": 129
												}
											]
										}
									}
								},
								{
									"id": 1319,
									"name": "watch",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "any"
										}
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					],
					"sources": [
						{
							"fileName": "src/hooks/useEventListener.ts",
							"line": 4,
							"character": 25
						},
						{
							"fileName": "src/hooks/useEventListener.ts",
							"line": 5,
							"character": 25
						},
						{
							"fileName": "src/hooks/useEventListener.ts",
							"line": 6,
							"character": 25
						},
						{
							"fileName": "src/hooks/useEventListener.ts",
							"line": 7,
							"character": 25
						}
					]
				}
			],
			"groups": [
				{
					"title": "Functions",
					"kind": 64,
					"children": [
						1289
					]
				}
			],
			"sources": [
				{
					"fileName": "src/hooks/useEventListener.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 1320,
			"name": "\"hooks/useIsInView\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "/Users/harry/Projects/personal/preshape/src/hooks/useIsInView.ts",
			"children": [
				{
					"id": 1321,
					"name": "BUFFER",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isConst": true
					},
					"sources": [
						{
							"fileName": "src/hooks/useIsInView.ts",
							"line": 4,
							"character": 12
						}
					],
					"type": {
						"type": "unknown",
						"name": "20"
					},
					"defaultValue": "20"
				},
				{
					"id": 1322,
					"name": "isElementInViewport",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isConst": true
					},
					"signatures": [
						{
							"id": 1323,
							"name": "isElementInViewport",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 1324,
									"name": "el",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Element"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						}
					],
					"sources": [
						{
							"fileName": "src/hooks/useIsInView.ts",
							"line": 6,
							"character": 25
						}
					]
				}
			],
			"groups": [
				{
					"title": "Variables",
					"kind": 32,
					"children": [
						1321
					]
				},
				{
					"title": "Functions",
					"kind": 64,
					"children": [
						1322
					]
				}
			],
			"sources": [
				{
					"fileName": "src/hooks/useIsInView.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 1325,
			"name": "\"hooks/useMediaQuery\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "/Users/harry/Projects/personal/preshape/src/hooks/useMediaQuery.ts",
			"children": [
				{
					"id": 1329,
					"name": "Listener",
					"kind": 256,
					"kindString": "Interface",
					"flags": {},
					"children": [
						{
							"id": 1330,
							"name": "listener",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "src/hooks/useMediaQuery.ts",
									"line": 10,
									"character": 10
								}
							],
							"type": {
								"type": "reference",
								"name": "MediaQueryList"
							}
						},
						{
							"id": 1331,
							"name": "media",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "src/hooks/useMediaQuery.ts",
									"line": 11,
									"character": 7
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 1332,
							"name": "query",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "src/hooks/useMediaQuery.ts",
									"line": 12,
									"character": 7
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								1330,
								1331,
								1332
							]
						}
					],
					"sources": [
						{
							"fileName": "src/hooks/useMediaQuery.ts",
							"line": 9,
							"character": 18
						}
					]
				},
				{
					"id": 1326,
					"name": "MatchPatternConfig",
					"kind": 256,
					"kindString": "Interface",
					"flags": {},
					"indexSignature": [
						{
							"id": 1327,
							"name": "__index",
							"kind": 8192,
							"kindString": "Index signature",
							"flags": {},
							"parameters": [
								{
									"id": 1328,
									"name": "key",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "any"
							}
						}
					],
					"sources": [
						{
							"fileName": "src/hooks/useMediaQuery.ts",
							"line": 5,
							"character": 28
						}
					]
				},
				{
					"id": 1333,
					"name": "Handler",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {},
					"sources": [
						{
							"fileName": "src/hooks/useMediaQuery.ts",
							"line": 15,
							"character": 12
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 1334,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"signatures": [
								{
									"id": 1335,
									"name": "__call",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 1336,
											"name": "e",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "MediaQueryListEvent"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							],
							"sources": [
								{
									"fileName": "src/hooks/useMediaQuery.ts",
									"line": 15,
									"character": 14
								}
							]
						}
					}
				},
				{
					"id": 1337,
					"name": "getListeners",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isConst": true
					},
					"signatures": [
						{
							"id": 1338,
							"name": "getListeners",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 1339,
									"name": "queries",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "string"
										}
									}
								},
								{
									"id": 1340,
									"name": "handler",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Handler",
										"id": 1333
									}
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reflection",
									"declaration": {
										"id": 1341,
										"name": "__type",
										"kind": 65536,
										"kindString": "Type literal",
										"flags": {},
										"children": [
											{
												"id": 1342,
												"name": "listener",
												"kind": 32,
												"kindString": "Variable",
												"flags": {},
												"sources": [
													{
														"fileName": "src/hooks/useMediaQuery.ts",
														"line": 23,
														"character": 19
													}
												],
												"type": {
													"type": "reference",
													"name": "MediaQueryList"
												}
											},
											{
												"id": 1343,
												"name": "media",
												"kind": 32,
												"kindString": "Variable",
												"flags": {},
												"sources": [
													{
														"fileName": "src/hooks/useMediaQuery.ts",
														"line": 23,
														"character": 26
													}
												],
												"type": {
													"type": "intrinsic",
													"name": "string"
												}
											},
											{
												"id": 1344,
												"name": "query",
												"kind": 32,
												"kindString": "Variable",
												"flags": {},
												"sources": [
													{
														"fileName": "src/hooks/useMediaQuery.ts",
														"line": 23,
														"character": 33
													}
												],
												"type": {
													"type": "intrinsic",
													"name": "string"
												}
											}
										],
										"groups": [
											{
												"title": "Variables",
												"kind": 32,
												"children": [
													1342,
													1343,
													1344
												]
											}
										]
									}
								}
							}
						}
					],
					"sources": [
						{
							"fileName": "src/hooks/useMediaQuery.ts",
							"line": 17,
							"character": 18
						}
					]
				},
				{
					"id": 1345,
					"name": "getMatchQueryIndex",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isConst": true
					},
					"signatures": [
						{
							"id": 1346,
							"name": "getMatchQueryIndex",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 1347,
									"name": "queries",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "string"
										}
									}
								},
								{
									"id": 1348,
									"name": "listeners",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "array",
										"elementType": {
											"type": "reference",
											"name": "Listener",
											"id": 1329
										}
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					],
					"sources": [
						{
							"fileName": "src/hooks/useMediaQuery.ts",
							"line": 26,
							"character": 24
						}
					]
				},
				{
					"id": 1349,
					"name": "removeListeners",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isConst": true
					},
					"signatures": [
						{
							"id": 1350,
							"name": "removeListeners",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 1351,
									"name": "listeners",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "array",
										"elementType": {
											"type": "reference",
											"name": "Listener",
											"id": 1329
										}
									}
								},
								{
									"id": 1352,
									"name": "handler",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Handler",
										"id": 1333
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					],
					"sources": [
						{
							"fileName": "src/hooks/useMediaQuery.ts",
							"line": 36,
							"character": 21
						}
					]
				}
			],
			"groups": [
				{
					"title": "Interfaces",
					"kind": 256,
					"children": [
						1329,
						1326
					]
				},
				{
					"title": "Type aliases",
					"kind": 4194304,
					"children": [
						1333
					]
				},
				{
					"title": "Functions",
					"kind": 64,
					"children": [
						1337,
						1345,
						1349
					]
				}
			],
			"sources": [
				{
					"fileName": "src/hooks/useMediaQuery.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 1353,
			"name": "\"hooks/useResizeObserver\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "/Users/harry/Projects/personal/preshape/src/hooks/useResizeObserver.ts",
			"sources": [
				{
					"fileName": "src/hooks/useResizeObserver.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 1354,
			"name": "\"hooks/useTheme\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "/Users/harry/Projects/personal/preshape/src/hooks/useTheme.ts",
			"sources": [
				{
					"fileName": "src/hooks/useTheme.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 1355,
			"name": "\"hooks/useWindowScrollTo\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "/Users/harry/Projects/personal/preshape/src/hooks/useWindowScrollTo.ts",
			"children": [
				{
					"id": 1356,
					"name": "Options",
					"kind": 256,
					"kindString": "Interface",
					"flags": {},
					"children": [
						{
							"id": 1357,
							"name": "ignorePaths",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/hooks/useWindowScrollTo.ts",
									"line": 6,
									"character": 13
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "string"
								}
							}
						},
						{
							"id": 1358,
							"name": "ignorePop",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/hooks/useWindowScrollTo.ts",
									"line": 7,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								1357,
								1358
							]
						}
					],
					"sources": [
						{
							"fileName": "src/hooks/useWindowScrollTo.ts",
							"line": 5,
							"character": 17
						}
					]
				},
				{
					"id": 1359,
					"name": "shouldScroll",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isConst": true
					},
					"signatures": [
						{
							"id": 1360,
							"name": "shouldScroll",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 1361,
									"name": "history",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "History"
									}
								},
								{
									"id": 1362,
									"name": "options",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Options",
										"id": 1356
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						}
					],
					"sources": [
						{
							"fileName": "src/hooks/useWindowScrollTo.ts",
							"line": 10,
							"character": 18
						}
					]
				}
			],
			"groups": [
				{
					"title": "Interfaces",
					"kind": 256,
					"children": [
						1356
					]
				},
				{
					"title": "Functions",
					"kind": 64,
					"children": [
						1359
					]
				}
			],
			"sources": [
				{
					"fileName": "src/hooks/useWindowScrollTo.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 1956,
			"name": "\"index\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "/Users/harry/Projects/personal/preshape/src/index.ts",
			"sources": [
				{
					"fileName": "src/index.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 70,
			"name": "\"variables\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "/Users/harry/Projects/personal/preshape/src/variables.ts",
			"children": [
				{
					"id": 89,
					"name": "borderSizeX1Px",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "src/variables.ts",
							"line": 23,
							"character": 27
						}
					],
					"type": {
						"type": "unknown",
						"name": "1"
					},
					"defaultValue": "1"
				},
				{
					"id": 91,
					"name": "borderSizeX1Rem",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "src/variables.ts",
							"line": 26,
							"character": 28
						}
					],
					"type": {
						"type": "unknown",
						"name": "0.0625"
					},
					"defaultValue": "0.0625"
				},
				{
					"id": 90,
					"name": "borderSizeX2Px",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "src/variables.ts",
							"line": 24,
							"character": 27
						}
					],
					"type": {
						"type": "unknown",
						"name": "2"
					},
					"defaultValue": "2"
				},
				{
					"id": 92,
					"name": "borderSizeX2Rem",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "src/variables.ts",
							"line": 27,
							"character": 28
						}
					],
					"type": {
						"type": "unknown",
						"name": "0.125"
					},
					"defaultValue": "0.125"
				},
				{
					"id": 99,
					"name": "colorAccent1Shade1",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "src/variables.ts",
							"line": 37,
							"character": 31
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"defaultValue": " color.blue[4]"
				},
				{
					"id": 100,
					"name": "colorAccent1Shade2",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "src/variables.ts",
							"line": 38,
							"character": 31
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"defaultValue": " color.blue[5]"
				},
				{
					"id": 101,
					"name": "colorAccent1Shade3",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "src/variables.ts",
							"line": 39,
							"character": 31
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"defaultValue": " color.blue[6]"
				},
				{
					"id": 102,
					"name": "colorAccent2Shade1",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "src/variables.ts",
							"line": 41,
							"character": 31
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"defaultValue": " color.violet[4]"
				},
				{
					"id": 103,
					"name": "colorAccent2Shade2",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "src/variables.ts",
							"line": 42,
							"character": 31
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"defaultValue": " color.violet[5]"
				},
				{
					"id": 104,
					"name": "colorAccent2Shade3",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "src/variables.ts",
							"line": 43,
							"character": 31
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"defaultValue": " color.violet[6]"
				},
				{
					"id": 93,
					"name": "colorDarkShade1",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "src/variables.ts",
							"line": 29,
							"character": 28
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"defaultValue": " color.gray[9]"
				},
				{
					"id": 94,
					"name": "colorDarkShade2",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "src/variables.ts",
							"line": 30,
							"character": 28
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"defaultValue": " color.gray[8]"
				},
				{
					"id": 95,
					"name": "colorDarkShade3",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "src/variables.ts",
							"line": 31,
							"character": 28
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"defaultValue": " color.gray[7]"
				},
				{
					"id": 96,
					"name": "colorLightShade1",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "src/variables.ts",
							"line": 33,
							"character": 29
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"defaultValue": " color.gray[0]"
				},
				{
					"id": 97,
					"name": "colorLightShade2",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "src/variables.ts",
							"line": 34,
							"character": 29
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"defaultValue": " color.gray[1]"
				},
				{
					"id": 98,
					"name": "colorLightShade3",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "src/variables.ts",
							"line": 35,
							"character": 29
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"defaultValue": " color.gray[2]"
				},
				{
					"id": 108,
					"name": "colorNegativeShade1",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "src/variables.ts",
							"line": 49,
							"character": 32
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"defaultValue": " color.red[4]"
				},
				{
					"id": 109,
					"name": "colorNegativeShade2",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "src/variables.ts",
							"line": 50,
							"character": 32
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"defaultValue": " color.red[5]"
				},
				{
					"id": 110,
					"name": "colorNegativeShade3",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "src/variables.ts",
							"line": 51,
							"character": 32
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"defaultValue": " color.red[6]"
				},
				{
					"id": 105,
					"name": "colorPositiveShade1",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "src/variables.ts",
							"line": 45,
							"character": 32
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"defaultValue": " color.green[4]"
				},
				{
					"id": 106,
					"name": "colorPositiveShade2",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "src/variables.ts",
							"line": 46,
							"character": 32
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"defaultValue": " color.green[5]"
				},
				{
					"id": 107,
					"name": "colorPositiveShade3",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "src/variables.ts",
							"line": 47,
							"character": 32
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"defaultValue": " color.green[6]"
				},
				{
					"id": 171,
					"name": "routeTransitionTime",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "src/variables.ts",
							"line": 104,
							"character": 32
						}
					],
					"type": {
						"type": "unknown",
						"name": "400"
					},
					"defaultValue": " transitionTimeBase"
				},
				{
					"id": 77,
					"name": "sizeX10Px",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "src/variables.ts",
							"line": 9,
							"character": 22
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					},
					"defaultValue": " sizeX1Px * 10"
				},
				{
					"id": 86,
					"name": "sizeX10Rem",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "src/variables.ts",
							"line": 19,
							"character": 23
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					},
					"defaultValue": " sizeX1Rem * 10"
				},
				{
					"id": 78,
					"name": "sizeX12Px",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "src/variables.ts",
							"line": 10,
							"character": 22
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					},
					"defaultValue": " sizeX1Px * 12"
				},
				{
					"id": 87,
					"name": "sizeX12Rem",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "src/variables.ts",
							"line": 20,
							"character": 23
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					},
					"defaultValue": " sizeX1Rem * 12"
				},
				{
					"id": 79,
					"name": "sizeX16Px",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "src/variables.ts",
							"line": 11,
							"character": 22
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					},
					"defaultValue": " sizeX1Px * 16"
				},
				{
					"id": 88,
					"name": "sizeX16Rem",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "src/variables.ts",
							"line": 21,
							"character": 23
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					},
					"defaultValue": " sizeX1Rem * 16"
				},
				{
					"id": 71,
					"name": "sizeX1Px",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "src/variables.ts",
							"line": 3,
							"character": 21
						}
					],
					"type": {
						"type": "unknown",
						"name": "4"
					},
					"defaultValue": "4"
				},
				{
					"id": 80,
					"name": "sizeX1Rem",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "src/variables.ts",
							"line": 13,
							"character": 22
						}
					],
					"type": {
						"type": "unknown",
						"name": "0.25"
					},
					"defaultValue": "0.25"
				},
				{
					"id": 72,
					"name": "sizeX2Px",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "src/variables.ts",
							"line": 4,
							"character": 21
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					},
					"defaultValue": " sizeX1Px * 2"
				},
				{
					"id": 81,
					"name": "sizeX2Rem",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "src/variables.ts",
							"line": 14,
							"character": 22
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					},
					"defaultValue": " sizeX1Rem * 2"
				},
				{
					"id": 73,
					"name": "sizeX3Px",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "src/variables.ts",
							"line": 5,
							"character": 21
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					},
					"defaultValue": " sizeX1Px * 3"
				},
				{
					"id": 82,
					"name": "sizeX3Rem",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "src/variables.ts",
							"line": 15,
							"character": 22
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					},
					"defaultValue": " sizeX1Rem * 3"
				},
				{
					"id": 74,
					"name": "sizeX4Px",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "src/variables.ts",
							"line": 6,
							"character": 21
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					},
					"defaultValue": " sizeX1Px * 4"
				},
				{
					"id": 83,
					"name": "sizeX4Rem",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "src/variables.ts",
							"line": 16,
							"character": 22
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					},
					"defaultValue": " sizeX1Rem * 4"
				},
				{
					"id": 75,
					"name": "sizeX6Px",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "src/variables.ts",
							"line": 7,
							"character": 21
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					},
					"defaultValue": " sizeX1Px * 6"
				},
				{
					"id": 84,
					"name": "sizeX6Rem",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "src/variables.ts",
							"line": 17,
							"character": 22
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					},
					"defaultValue": " sizeX1Rem * 6"
				},
				{
					"id": 76,
					"name": "sizeX8Px",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "src/variables.ts",
							"line": 8,
							"character": 21
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					},
					"defaultValue": " sizeX1Px * 8"
				},
				{
					"id": 85,
					"name": "sizeX8Rem",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "src/variables.ts",
							"line": 18,
							"character": 22
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					},
					"defaultValue": " sizeX1Rem * 8"
				},
				{
					"id": 168,
					"name": "transitionTimeBase",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "src/variables.ts",
							"line": 100,
							"character": 31
						}
					],
					"type": {
						"type": "unknown",
						"name": "400"
					},
					"defaultValue": "400"
				},
				{
					"id": 167,
					"name": "transitionTimeFast",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "src/variables.ts",
							"line": 99,
							"character": 31
						}
					],
					"type": {
						"type": "unknown",
						"name": "200"
					},
					"defaultValue": "200"
				},
				{
					"id": 169,
					"name": "transitionTimeSlow",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "src/variables.ts",
							"line": 101,
							"character": 31
						}
					],
					"type": {
						"type": "unknown",
						"name": "800"
					},
					"defaultValue": "800"
				},
				{
					"id": 170,
					"name": "transitionTimingFunction",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "src/variables.ts",
							"line": 102,
							"character": 37
						}
					],
					"type": {
						"type": "array",
						"elementType": {
							"type": "intrinsic",
							"name": "number"
						}
					},
					"defaultValue": " [0.25, 0.46, 0.45, 0.94]"
				},
				{
					"id": 111,
					"name": "themeDay",
					"kind": 2097152,
					"kindString": "Object literal",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"children": [
						{
							"id": 118,
							"name": "colorAccentShade1",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/variables.ts",
									"line": 60,
									"character": 19
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"defaultValue": " colorAccent1Shade1"
						},
						{
							"id": 119,
							"name": "colorAccentShade2",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/variables.ts",
									"line": 61,
									"character": 19
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"defaultValue": " colorAccent1Shade2"
						},
						{
							"id": 120,
							"name": "colorAccentShade3",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/variables.ts",
									"line": 62,
									"character": 19
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"defaultValue": " colorAccent1Shade3"
						},
						{
							"id": 112,
							"name": "colorBackgroundShade1",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/variables.ts",
									"line": 54,
									"character": 23
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"defaultValue": " colorLightShade1"
						},
						{
							"id": 113,
							"name": "colorBackgroundShade2",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/variables.ts",
									"line": 55,
									"character": 23
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"defaultValue": " colorLightShade2"
						},
						{
							"id": 114,
							"name": "colorBackgroundShade3",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/variables.ts",
									"line": 56,
									"character": 23
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"defaultValue": " colorLightShade3"
						},
						{
							"id": 115,
							"name": "colorTextShade1",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/variables.ts",
									"line": 57,
									"character": 17
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"defaultValue": " colorDarkShade1"
						},
						{
							"id": 116,
							"name": "colorTextShade2",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/variables.ts",
									"line": 58,
									"character": 17
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"defaultValue": " colorDarkShade2"
						},
						{
							"id": 117,
							"name": "colorTextShade3",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/variables.ts",
									"line": 59,
									"character": 17
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"defaultValue": " colorDarkShade3"
						}
					],
					"groups": [
						{
							"title": "Variables",
							"kind": 32,
							"children": [
								118,
								119,
								120,
								112,
								113,
								114,
								115,
								116,
								117
							]
						}
					],
					"sources": [
						{
							"fileName": "src/variables.ts",
							"line": 53,
							"character": 21
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "object"
					}
				},
				{
					"id": 121,
					"name": "themeNight",
					"kind": 2097152,
					"kindString": "Object literal",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"children": [
						{
							"id": 128,
							"name": "colorAccentShade1",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/variables.ts",
									"line": 72,
									"character": 19
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"defaultValue": " colorAccent2Shade1"
						},
						{
							"id": 129,
							"name": "colorAccentShade2",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/variables.ts",
									"line": 73,
									"character": 19
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"defaultValue": " colorAccent2Shade2"
						},
						{
							"id": 130,
							"name": "colorAccentShade3",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/variables.ts",
									"line": 74,
									"character": 19
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"defaultValue": " colorAccent2Shade3"
						},
						{
							"id": 122,
							"name": "colorBackgroundShade1",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/variables.ts",
									"line": 66,
									"character": 23
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"defaultValue": " colorDarkShade1"
						},
						{
							"id": 123,
							"name": "colorBackgroundShade2",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/variables.ts",
									"line": 67,
									"character": 23
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"defaultValue": " colorDarkShade2"
						},
						{
							"id": 124,
							"name": "colorBackgroundShade3",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/variables.ts",
									"line": 68,
									"character": 23
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"defaultValue": " colorDarkShade3"
						},
						{
							"id": 125,
							"name": "colorTextShade1",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/variables.ts",
									"line": 69,
									"character": 17
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"defaultValue": " colorLightShade1"
						},
						{
							"id": 126,
							"name": "colorTextShade2",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/variables.ts",
									"line": 70,
									"character": 17
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"defaultValue": " colorLightShade2"
						},
						{
							"id": 127,
							"name": "colorTextShade3",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/variables.ts",
									"line": 71,
									"character": 17
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"defaultValue": " colorLightShade3"
						}
					],
					"groups": [
						{
							"title": "Variables",
							"kind": 32,
							"children": [
								128,
								129,
								130,
								122,
								123,
								124,
								125,
								126,
								127
							]
						}
					],
					"sources": [
						{
							"fileName": "src/variables.ts",
							"line": 65,
							"character": 23
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "object"
					}
				},
				{
					"id": 157,
					"name": "themePropNameCSSMap",
					"kind": 2097152,
					"kindString": "Object literal",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"children": [
						{
							"id": 164,
							"name": "colorAccentShade1",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/variables.ts",
									"line": 94,
									"character": 19
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"defaultValue": "\"color-accent--shade-1\""
						},
						{
							"id": 165,
							"name": "colorAccentShade2",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/variables.ts",
									"line": 95,
									"character": 19
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"defaultValue": "\"color-accent--shade-1\""
						},
						{
							"id": 166,
							"name": "colorAccentShade3",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/variables.ts",
									"line": 96,
									"character": 19
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"defaultValue": "\"color-accent--shade-1\""
						},
						{
							"id": 158,
							"name": "colorBackgroundShade1",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/variables.ts",
									"line": 88,
									"character": 23
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"defaultValue": "\"color-background--shade-1\""
						},
						{
							"id": 159,
							"name": "colorBackgroundShade2",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/variables.ts",
									"line": 89,
									"character": 23
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"defaultValue": "\"color-background--shade-2\""
						},
						{
							"id": 160,
							"name": "colorBackgroundShade3",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/variables.ts",
									"line": 90,
									"character": 23
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"defaultValue": "\"color-background--shade-3\""
						},
						{
							"id": 161,
							"name": "colorTextShade1",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/variables.ts",
									"line": 91,
									"character": 17
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"defaultValue": "\"color-text--shade-1\""
						},
						{
							"id": 162,
							"name": "colorTextShade2",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/variables.ts",
									"line": 92,
									"character": 17
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"defaultValue": "\"color-text--shade-1\""
						},
						{
							"id": 163,
							"name": "colorTextShade3",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/variables.ts",
									"line": 93,
									"character": 17
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"defaultValue": "\"color-text--shade-1\""
						}
					],
					"groups": [
						{
							"title": "Variables",
							"kind": 32,
							"children": [
								164,
								165,
								166,
								158,
								159,
								160,
								161,
								162,
								163
							]
						}
					],
					"sources": [
						{
							"fileName": "src/variables.ts",
							"line": 87,
							"character": 32
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "object"
					}
				},
				{
					"id": 131,
					"name": "themes",
					"kind": 2097152,
					"kindString": "Object literal",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"children": [
						{
							"id": 132,
							"name": "day",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/variables.ts",
									"line": 78,
									"character": 5
								}
							],
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 133,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {},
									"children": [
										{
											"id": 140,
											"name": "colorAccentShade1",
											"kind": 32,
											"kindString": "Variable",
											"flags": {},
											"sources": [
												{
													"fileName": "src/variables.ts",
													"line": 60,
													"character": 19
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											},
											"defaultValue": " colorAccent1Shade1"
										},
										{
											"id": 141,
											"name": "colorAccentShade2",
											"kind": 32,
											"kindString": "Variable",
											"flags": {},
											"sources": [
												{
													"fileName": "src/variables.ts",
													"line": 61,
													"character": 19
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											},
											"defaultValue": " colorAccent1Shade2"
										},
										{
											"id": 142,
											"name": "colorAccentShade3",
											"kind": 32,
											"kindString": "Variable",
											"flags": {},
											"sources": [
												{
													"fileName": "src/variables.ts",
													"line": 62,
													"character": 19
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											},
											"defaultValue": " colorAccent1Shade3"
										},
										{
											"id": 134,
											"name": "colorBackgroundShade1",
											"kind": 32,
											"kindString": "Variable",
											"flags": {},
											"sources": [
												{
													"fileName": "src/variables.ts",
													"line": 54,
													"character": 23
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											},
											"defaultValue": " colorLightShade1"
										},
										{
											"id": 135,
											"name": "colorBackgroundShade2",
											"kind": 32,
											"kindString": "Variable",
											"flags": {},
											"sources": [
												{
													"fileName": "src/variables.ts",
													"line": 55,
													"character": 23
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											},
											"defaultValue": " colorLightShade2"
										},
										{
											"id": 136,
											"name": "colorBackgroundShade3",
											"kind": 32,
											"kindString": "Variable",
											"flags": {},
											"sources": [
												{
													"fileName": "src/variables.ts",
													"line": 56,
													"character": 23
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											},
											"defaultValue": " colorLightShade3"
										},
										{
											"id": 137,
											"name": "colorTextShade1",
											"kind": 32,
											"kindString": "Variable",
											"flags": {},
											"sources": [
												{
													"fileName": "src/variables.ts",
													"line": 57,
													"character": 17
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											},
											"defaultValue": " colorDarkShade1"
										},
										{
											"id": 138,
											"name": "colorTextShade2",
											"kind": 32,
											"kindString": "Variable",
											"flags": {},
											"sources": [
												{
													"fileName": "src/variables.ts",
													"line": 58,
													"character": 17
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											},
											"defaultValue": " colorDarkShade2"
										},
										{
											"id": 139,
											"name": "colorTextShade3",
											"kind": 32,
											"kindString": "Variable",
											"flags": {},
											"sources": [
												{
													"fileName": "src/variables.ts",
													"line": 59,
													"character": 17
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											},
											"defaultValue": " colorDarkShade3"
										}
									],
									"groups": [
										{
											"title": "Variables",
											"kind": 32,
											"children": [
												140,
												141,
												142,
												134,
												135,
												136,
												137,
												138,
												139
											]
										}
									]
								}
							},
							"defaultValue": " themeDay"
						},
						{
							"id": 143,
							"name": "night",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/variables.ts",
									"line": 79,
									"character": 7
								}
							],
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 144,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {},
									"children": [
										{
											"id": 151,
											"name": "colorAccentShade1",
											"kind": 32,
											"kindString": "Variable",
											"flags": {},
											"sources": [
												{
													"fileName": "src/variables.ts",
													"line": 72,
													"character": 19
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											},
											"defaultValue": " colorAccent2Shade1"
										},
										{
											"id": 152,
											"name": "colorAccentShade2",
											"kind": 32,
											"kindString": "Variable",
											"flags": {},
											"sources": [
												{
													"fileName": "src/variables.ts",
													"line": 73,
													"character": 19
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											},
											"defaultValue": " colorAccent2Shade2"
										},
										{
											"id": 153,
											"name": "colorAccentShade3",
											"kind": 32,
											"kindString": "Variable",
											"flags": {},
											"sources": [
												{
													"fileName": "src/variables.ts",
													"line": 74,
													"character": 19
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											},
											"defaultValue": " colorAccent2Shade3"
										},
										{
											"id": 145,
											"name": "colorBackgroundShade1",
											"kind": 32,
											"kindString": "Variable",
											"flags": {},
											"sources": [
												{
													"fileName": "src/variables.ts",
													"line": 66,
													"character": 23
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											},
											"defaultValue": " colorDarkShade1"
										},
										{
											"id": 146,
											"name": "colorBackgroundShade2",
											"kind": 32,
											"kindString": "Variable",
											"flags": {},
											"sources": [
												{
													"fileName": "src/variables.ts",
													"line": 67,
													"character": 23
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											},
											"defaultValue": " colorDarkShade2"
										},
										{
											"id": 147,
											"name": "colorBackgroundShade3",
											"kind": 32,
											"kindString": "Variable",
											"flags": {},
											"sources": [
												{
													"fileName": "src/variables.ts",
													"line": 68,
													"character": 23
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											},
											"defaultValue": " colorDarkShade3"
										},
										{
											"id": 148,
											"name": "colorTextShade1",
											"kind": 32,
											"kindString": "Variable",
											"flags": {},
											"sources": [
												{
													"fileName": "src/variables.ts",
													"line": 69,
													"character": 17
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											},
											"defaultValue": " colorLightShade1"
										},
										{
											"id": 149,
											"name": "colorTextShade2",
											"kind": 32,
											"kindString": "Variable",
											"flags": {},
											"sources": [
												{
													"fileName": "src/variables.ts",
													"line": 70,
													"character": 17
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											},
											"defaultValue": " colorLightShade2"
										},
										{
											"id": 150,
											"name": "colorTextShade3",
											"kind": 32,
											"kindString": "Variable",
											"flags": {},
											"sources": [
												{
													"fileName": "src/variables.ts",
													"line": 71,
													"character": 17
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											},
											"defaultValue": " colorLightShade3"
										}
									],
									"groups": [
										{
											"title": "Variables",
											"kind": 32,
											"children": [
												151,
												152,
												153,
												145,
												146,
												147,
												148,
												149,
												150
											]
										}
									]
								}
							},
							"defaultValue": " themeNight"
						}
					],
					"groups": [
						{
							"title": "Variables",
							"kind": 32,
							"children": [
								132,
								143
							]
						}
					],
					"sources": [
						{
							"fileName": "src/variables.ts",
							"line": 77,
							"character": 19
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "object"
					}
				},
				{
					"id": 154,
					"name": "themesOpposite",
					"kind": 2097152,
					"kindString": "Object literal",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"children": [
						{
							"id": 155,
							"name": "day",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/variables.ts",
									"line": 83,
									"character": 5
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"defaultValue": "\"night\""
						},
						{
							"id": 156,
							"name": "night",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/variables.ts",
									"line": 84,
									"character": 7
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"defaultValue": "\"day\""
						}
					],
					"groups": [
						{
							"title": "Variables",
							"kind": 32,
							"children": [
								155,
								156
							]
						}
					],
					"sources": [
						{
							"fileName": "src/variables.ts",
							"line": 82,
							"character": 27
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "object"
					}
				}
			],
			"groups": [
				{
					"title": "Variables",
					"kind": 32,
					"children": [
						89,
						91,
						90,
						92,
						99,
						100,
						101,
						102,
						103,
						104,
						93,
						94,
						95,
						96,
						97,
						98,
						108,
						109,
						110,
						105,
						106,
						107,
						171,
						77,
						86,
						78,
						87,
						79,
						88,
						71,
						80,
						72,
						81,
						73,
						82,
						74,
						83,
						75,
						84,
						76,
						85,
						168,
						167,
						169,
						170
					]
				},
				{
					"title": "Object literals",
					"kind": 2097152,
					"children": [
						111,
						121,
						157,
						131,
						154
					]
				}
			],
			"sources": [
				{
					"fileName": "src/variables.ts",
					"line": 1,
					"character": 0
				}
			]
		}
	],
	"groups": [
		{
			"title": "External modules",
			"kind": 1,
			"children": [
				39,
				276,
				172,
				1,
				478,
				520,
				548,
				577,
				619,
				699,
				658,
				709,
				751,
				238,
				796,
				824,
				867,
				907,
				978,
				1047,
				1006,
				1090,
				1132,
				1160,
				1211,
				1249,
				1364,
				1403,
				1434,
				1472,
				1477,
				1482,
				1515,
				1513,
				660,
				1524,
				1552,
				1581,
				1619,
				1657,
				1699,
				1727,
				1770,
				1798,
				1842,
				426,
				1870,
				1914,
				1363,
				1288,
				1320,
				1325,
				1353,
				1354,
				1355,
				1956,
				70
			]
		}
	]
}