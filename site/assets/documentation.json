{
	"id": 0,
	"name": "preshape",
	"kind": 0,
	"flags": {},
	"children": [
		{
			"id": 39,
			"name": "\"Alert/Alert\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "/Users/harry/Projects/personal/preshape/src/Alert/Alert.tsx",
			"children": [
				{
					"id": 40,
					"name": "AlertProps",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "Alert component for bringing attention to a message."
					},
					"children": [
						{
							"id": 44,
							"name": "absolute",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Quick way of absolutely position to common places"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 58,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "fullscreen"
									},
									{
										"type": "stringLiteral",
										"value": "top"
									},
									{
										"type": "stringLiteral",
										"value": "top-left"
									},
									{
										"type": "stringLiteral",
										"value": "top-right"
									},
									{
										"type": "stringLiteral",
										"value": "bottom"
									},
									{
										"type": "stringLiteral",
										"value": "bottom-left"
									},
									{
										"type": "stringLiteral",
										"value": "bottom-right"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.absolute",
								"id": 3
							}
						},
						{
							"id": 45,
							"name": "backgroundColor",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Background colour to be applied, shades are taken from the current\ntheme."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 70,
									"character": 17
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeColor",
								"id": 30
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.backgroundColor",
								"id": 4
							}
						},
						{
							"id": 46,
							"name": "borderColor",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Border colour to be applied, shades are taken from the current\ntheme."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 75,
									"character": 13
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeColor",
								"id": 30
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.borderColor",
								"id": 5
							}
						},
						{
							"id": 47,
							"name": "borderRadius",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Adds styling of a border radius to one of the size multiples."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 79,
									"character": 14
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "x1"
									},
									{
										"type": "stringLiteral",
										"value": "x2"
									},
									{
										"type": "stringLiteral",
										"value": "x3"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.borderRadius",
								"id": 6
							}
						},
						{
							"id": 48,
							"name": "borderSize",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Thickness of the border to be applied"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 81,
									"character": 12
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "x1"
									},
									{
										"type": "stringLiteral",
										"value": "x2"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.borderSize",
								"id": 7
							}
						},
						{
							"id": 49,
							"name": "clickable",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Adds styling to indicate that the element is clickable"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 83,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.clickable",
								"id": 8
							}
						},
						{
							"id": 41,
							"name": "color",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Colour that is applied to the Alert to indicate the type of action"
							},
							"sources": [
								{
									"fileName": "src/Alert/Alert.tsx",
									"line": 11,
									"character": 7
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "accent"
									},
									{
										"type": "stringLiteral",
										"value": "negative"
									},
									{
										"type": "stringLiteral",
										"value": "positive"
									}
								]
							}
						},
						{
							"id": 50,
							"name": "container",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies relative positioning to contain child elements."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 85,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.container",
								"id": 9
							}
						},
						{
							"id": 51,
							"name": "display",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies display styling"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 87,
									"character": 9
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "block"
									},
									{
										"type": "stringLiteral",
										"value": "inline-block"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.display",
								"id": 10
							}
						},
						{
							"id": 42,
							"name": "fill",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Appies a filled in style to the alert."
							},
							"sources": [
								{
									"fileName": "src/Alert/Alert.tsx",
									"line": 13,
									"character": 6
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							}
						},
						{
							"id": 52,
							"name": "fixed",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Quick way of absolutely position to common places"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 89,
									"character": 7
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "fullscreen"
									},
									{
										"type": "stringLiteral",
										"value": "top"
									},
									{
										"type": "stringLiteral",
										"value": "top-left"
									},
									{
										"type": "stringLiteral",
										"value": "top-right"
									},
									{
										"type": "stringLiteral",
										"value": "bottom"
									},
									{
										"type": "stringLiteral",
										"value": "bottom-left"
									},
									{
										"type": "stringLiteral",
										"value": "bottom-right"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.fixed",
								"id": 11
							}
						},
						{
							"id": 43,
							"name": "flash",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Whether the alert is flashing, a great way to give it extra attention."
							},
							"sources": [
								{
									"fileName": "src/Alert/Alert.tsx",
									"line": 15,
									"character": 7
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							}
						},
						{
							"id": 53,
							"name": "height",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Fixed height applied through inline styling"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 98,
									"character": 8
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.height",
								"id": 12
							}
						},
						{
							"id": 54,
							"name": "margin",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Margins applied for the global spacing variables"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 100,
									"character": 8
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeSize",
								"id": 31
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.margin",
								"id": 13
							}
						},
						{
							"id": 55,
							"name": "maxWidth",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Max width applied through inline styling"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 102,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.maxWidth",
								"id": 14
							}
						},
						{
							"id": 56,
							"name": "minHeight",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Max height applied through inline styling"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 104,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.minHeight",
								"id": 15
							}
						},
						{
							"id": 57,
							"name": "minWidth",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Min width applied through inline style"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 106,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.minWidth",
								"id": 16
							}
						},
						{
							"id": 58,
							"name": "overflow",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Overflow"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 108,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "stringLiteral",
										"value": "hidden"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.overflow",
								"id": 17
							}
						},
						{
							"id": 59,
							"name": "padding",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Padding applied for the global spacing variables"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 110,
									"character": 9
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeSize",
								"id": 31
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.padding",
								"id": 18
							}
						},
						{
							"id": 60,
							"name": "paddingHorizontal",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Horizontal padding applied for the global spacing variables"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 112,
									"character": 19
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeSize",
								"id": 31
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.paddingHorizontal",
								"id": 19
							}
						},
						{
							"id": 61,
							"name": "paddingVertical",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Vertical pa?dding applied for the global spacing variables"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 114,
									"character": 17
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeSize",
								"id": 31
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.paddingVertical",
								"id": 20
							}
						},
						{
							"id": 62,
							"name": "scrollable",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies overflow styling to enable/disable scrolling."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 116,
									"character": 12
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.scrollable",
								"id": 21
							}
						},
						{
							"id": 63,
							"name": "tag",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Any valid HTML or SVG element tag.",
								"tags": [
									{
										"tag": "reference",
										"text": "false\n"
									}
								]
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 122,
									"character": 5
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeAllElementTags",
								"id": 34
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.tag",
								"id": 22
							}
						},
						{
							"id": 64,
							"name": "textColor",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Text colour to be applied."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 126,
									"character": 11
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeColor",
								"id": 30
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.textColor",
								"id": 23
							}
						},
						{
							"id": 65,
							"name": "theme",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Theme applied to this element and inherited for child elements (until\na descendant theme is applied)."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 131,
									"character": 7
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeTheme",
								"id": 35
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.theme",
								"id": 24
							}
						},
						{
							"id": 66,
							"name": "width",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Fixed width applied through inline styling"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 133,
									"character": 7
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.width",
								"id": 25
							}
						},
						{
							"id": 67,
							"name": "zIndex",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "z-index number for layering elements."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 135,
									"character": 8
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "number"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.zIndex",
								"id": 26
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								44,
								45,
								46,
								47,
								48,
								49,
								41,
								50,
								51,
								42,
								52,
								43,
								53,
								54,
								55,
								56,
								57,
								58,
								59,
								60,
								61,
								62,
								63,
								64,
								65,
								66,
								67
							]
						}
					],
					"sources": [
						{
							"fileName": "src/Alert/Alert.tsx",
							"line": 9,
							"character": 27
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"name": "BaseProps",
							"id": 2
						}
					]
				},
				{
					"id": 68,
					"name": "Alert",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "src/Alert/Alert.tsx",
							"line": 18,
							"character": 11
						}
					],
					"type": {
						"type": "reference",
						"name": "ForwardRefExoticComponent",
						"typeArguments": [
							{
								"type": "intersection",
								"types": [
									{
										"type": "reference",
										"name": "AlertProps",
										"id": 40
									},
									{
										"type": "reflection",
										"declaration": {
											"id": 69,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {}
										}
									},
									{
										"type": "reference",
										"name": "RefAttributes",
										"typeArguments": [
											{
												"type": "reference",
												"name": "HTMLDivElement"
											}
										]
									}
								]
							}
						]
					},
					"defaultValue": " React.forwardRef<HTMLDivElement, Attributes<HTMLDivElement, AlertProps>>((props, ref) => {\n  const { color, fill, flash, ...rest } = props;\n  const classes = classnames('Alert', `Alert--${color}`, {\n    'Alert--fill': fill,\n    'Alert--flash': flash,\n  });\n\n  return (\n    <Base { ...rest }\n        borderSize=\"x2\"\n        className={ classes }\n        ref={ ref } />\n  );\n})"
				}
			],
			"groups": [
				{
					"title": "Interfaces",
					"kind": 256,
					"children": [
						40
					]
				},
				{
					"title": "Variables",
					"kind": 32,
					"children": [
						68
					]
				}
			],
			"sources": [
				{
					"fileName": "src/Alert/Alert.tsx",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 211,
			"name": "\"Appear/Appear\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "/Users/harry/Projects/personal/preshape/src/Appear/Appear.tsx",
			"children": [
				{
					"id": 212,
					"name": "AppearProps",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"children": [
						{
							"id": 233,
							"name": "absolute",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Quick way of absolutely position to common places"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 58,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "fullscreen"
									},
									{
										"type": "stringLiteral",
										"value": "top"
									},
									{
										"type": "stringLiteral",
										"value": "top-left"
									},
									{
										"type": "stringLiteral",
										"value": "top-right"
									},
									{
										"type": "stringLiteral",
										"value": "bottom"
									},
									{
										"type": "stringLiteral",
										"value": "bottom-left"
									},
									{
										"type": "stringLiteral",
										"value": "bottom-right"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.absolute",
								"id": 3
							}
						},
						{
							"id": 223,
							"name": "alignChildren",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Short cut child alignment property for both alignChildrenHorizontal and\nalignChildrenVertical."
							},
							"sources": [
								{
									"fileName": "src/Flex/Flex.tsx",
									"line": 11,
									"character": 15
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "start"
									},
									{
										"type": "stringLiteral",
										"value": "middle"
									},
									{
										"type": "stringLiteral",
										"value": "end"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "FlexProps.alignChildren",
								"id": 175
							}
						},
						{
							"id": 224,
							"name": "alignChildrenHorizontal",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Horizontal alignment of children flex items."
							},
							"sources": [
								{
									"fileName": "src/Flex/Flex.tsx",
									"line": 13,
									"character": 25
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "start"
									},
									{
										"type": "stringLiteral",
										"value": "middle"
									},
									{
										"type": "stringLiteral",
										"value": "end"
									},
									{
										"type": "stringLiteral",
										"value": "around"
									},
									{
										"type": "stringLiteral",
										"value": "between"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "FlexProps.alignChildrenHorizontal",
								"id": 176
							}
						},
						{
							"id": 225,
							"name": "alignChildrenVertical",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Vertical alignment of children flex items."
							},
							"sources": [
								{
									"fileName": "src/Flex/Flex.tsx",
									"line": 15,
									"character": 23
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "start"
									},
									{
										"type": "stringLiteral",
										"value": "middle"
									},
									{
										"type": "stringLiteral",
										"value": "end"
									},
									{
										"type": "stringLiteral",
										"value": "around"
									},
									{
										"type": "stringLiteral",
										"value": "between"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "FlexProps.alignChildrenVertical",
								"id": 177
							}
						},
						{
							"id": 226,
							"name": "alignSelf",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Flex item alignment property (changes with parent direction)."
							},
							"sources": [
								{
									"fileName": "src/Flex/Flex.tsx",
									"line": 17,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "start"
									},
									{
										"type": "stringLiteral",
										"value": "middle"
									},
									{
										"type": "stringLiteral",
										"value": "end"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "FlexProps.alignSelf",
								"id": 178
							}
						},
						{
							"id": 213,
							"name": "animation",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Type of animation that is applied when appearing and disappearing.",
								"tags": [
									{
										"tag": "default",
										"text": "\"FadeSlideUp\"\n"
									}
								]
							},
							"sources": [
								{
									"fileName": "src/Appear/Appear.tsx",
									"line": 23,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "Fade"
									},
									{
										"type": "stringLiteral",
										"value": "FadeSlideUp"
									},
									{
										"type": "stringLiteral",
										"value": "FadeSlideRight"
									},
									{
										"type": "stringLiteral",
										"value": "FadeSlideDown"
									},
									{
										"type": "stringLiteral",
										"value": "FadeSlideLeft"
									},
									{
										"type": "stringLiteral",
										"value": "Pop"
									},
									{
										"type": "stringLiteral",
										"value": "ScaleYDown"
									},
									{
										"type": "stringLiteral",
										"value": "ScaleYUp"
									}
								]
							}
						},
						{
							"id": 234,
							"name": "backgroundColor",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Background colour to be applied, shades are taken from the current\ntheme."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 70,
									"character": 17
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeColor",
								"id": 30
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.backgroundColor",
								"id": 4
							}
						},
						{
							"id": 235,
							"name": "borderColor",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Border colour to be applied, shades are taken from the current\ntheme."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 75,
									"character": 13
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeColor",
								"id": 30
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.borderColor",
								"id": 5
							}
						},
						{
							"id": 236,
							"name": "borderRadius",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Adds styling of a border radius to one of the size multiples."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 79,
									"character": 14
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "x1"
									},
									{
										"type": "stringLiteral",
										"value": "x2"
									},
									{
										"type": "stringLiteral",
										"value": "x3"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.borderRadius",
								"id": 6
							}
						},
						{
							"id": 237,
							"name": "borderSize",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Thickness of the border to be applied"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 81,
									"character": 12
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "x1"
									},
									{
										"type": "stringLiteral",
										"value": "x2"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.borderSize",
								"id": 7
							}
						},
						{
							"id": 238,
							"name": "clickable",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Adds styling to indicate that the element is clickable"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 83,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.clickable",
								"id": 8
							}
						},
						{
							"id": 239,
							"name": "container",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies relative positioning to contain child elements."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 85,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.container",
								"id": 9
							}
						},
						{
							"id": 214,
							"name": "delay",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Time (in milliseconds) that the appearance/disappearance animation is delayed for.",
								"tags": [
									{
										"tag": "default",
										"text": "0\n"
									}
								]
							},
							"sources": [
								{
									"fileName": "src/Appear/Appear.tsx",
									"line": 37,
									"character": 7
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "number"
									}
								]
							}
						},
						{
							"id": 227,
							"name": "direction",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Direction on which way to flex items."
							},
							"sources": [
								{
									"fileName": "src/Flex/Flex.tsx",
									"line": 19,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "horizontal"
									},
									{
										"type": "stringLiteral",
										"value": "vertical"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "FlexProps.direction",
								"id": 179
							}
						},
						{
							"id": 240,
							"name": "display",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies display styling"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 87,
									"character": 9
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "block"
									},
									{
										"type": "stringLiteral",
										"value": "inline-block"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.display",
								"id": 10
							}
						},
						{
							"id": 241,
							"name": "fixed",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Quick way of absolutely position to common places"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 89,
									"character": 7
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "fullscreen"
									},
									{
										"type": "stringLiteral",
										"value": "top"
									},
									{
										"type": "stringLiteral",
										"value": "top-left"
									},
									{
										"type": "stringLiteral",
										"value": "top-right"
									},
									{
										"type": "stringLiteral",
										"value": "bottom"
									},
									{
										"type": "stringLiteral",
										"value": "bottom-left"
									},
									{
										"type": "stringLiteral",
										"value": "bottom-right"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.fixed",
								"id": 11
							}
						},
						{
							"id": 228,
							"name": "gap",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Spacing applied between child flex items, values are global spacing variables."
							},
							"sources": [
								{
									"fileName": "src/Flex/Flex.tsx",
									"line": 21,
									"character": 5
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeSize",
								"id": 31
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "FlexProps.gap",
								"id": 180
							}
						},
						{
							"id": 229,
							"name": "grow",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Flex item property if it should grow with available space."
							},
							"sources": [
								{
									"fileName": "src/Flex/Flex.tsx",
									"line": 23,
									"character": 6
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "FlexProps.grow",
								"id": 181
							}
						},
						{
							"id": 242,
							"name": "height",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Fixed height applied through inline styling"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 98,
									"character": 8
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.height",
								"id": 12
							}
						},
						{
							"id": 230,
							"name": "initial",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Initial width to flex from for a child item."
							},
							"sources": [
								{
									"fileName": "src/Flex/Flex.tsx",
									"line": 25,
									"character": 9
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "content"
									},
									{
										"type": "stringLiteral",
										"value": "container"
									},
									{
										"type": "stringLiteral",
										"value": "none"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "FlexProps.initial",
								"id": 182
							}
						},
						{
							"id": 243,
							"name": "margin",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Margins applied for the global spacing variables"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 100,
									"character": 8
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeSize",
								"id": 31
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.margin",
								"id": 13
							}
						},
						{
							"id": 244,
							"name": "maxWidth",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Max width applied through inline styling"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 102,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.maxWidth",
								"id": 14
							}
						},
						{
							"id": 245,
							"name": "minHeight",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Max height applied through inline styling"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 104,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.minHeight",
								"id": 15
							}
						},
						{
							"id": 246,
							"name": "minWidth",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Min width applied through inline style"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 106,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.minWidth",
								"id": 16
							}
						},
						{
							"id": 215,
							"name": "onEntered",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Called back for after appearance"
							},
							"sources": [
								{
									"fileName": "src/Appear/Appear.tsx",
									"line": 39,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "reflection",
										"declaration": {
											"id": 216,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"signatures": [
												{
													"id": 217,
													"name": "__call",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								]
							}
						},
						{
							"id": 218,
							"name": "onExited",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Called back for after disappearance"
							},
							"sources": [
								{
									"fileName": "src/Appear/Appear.tsx",
									"line": 41,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "reflection",
										"declaration": {
											"id": 219,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"signatures": [
												{
													"id": 220,
													"name": "__call",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								]
							}
						},
						{
							"id": 247,
							"name": "overflow",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Overflow"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 108,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "stringLiteral",
										"value": "hidden"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.overflow",
								"id": 17
							}
						},
						{
							"id": 248,
							"name": "padding",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Padding applied for the global spacing variables"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 110,
									"character": 9
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeSize",
								"id": 31
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.padding",
								"id": 18
							}
						},
						{
							"id": 249,
							"name": "paddingHorizontal",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Horizontal padding applied for the global spacing variables"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 112,
									"character": 19
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeSize",
								"id": 31
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.paddingHorizontal",
								"id": 19
							}
						},
						{
							"id": 250,
							"name": "paddingVertical",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Vertical pa?dding applied for the global spacing variables"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 114,
									"character": 17
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeSize",
								"id": 31
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.paddingVertical",
								"id": 20
							}
						},
						{
							"id": 251,
							"name": "scrollable",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies overflow styling to enable/disable scrolling."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 116,
									"character": 12
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.scrollable",
								"id": 21
							}
						},
						{
							"id": 231,
							"name": "shrink",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Flex item property if it should shrink."
							},
							"sources": [
								{
									"fileName": "src/Flex/Flex.tsx",
									"line": 27,
									"character": 8
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "FlexProps.shrink",
								"id": 183
							}
						},
						{
							"id": 252,
							"name": "tag",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Any valid HTML or SVG element tag.",
								"tags": [
									{
										"tag": "reference",
										"text": "false\n"
									}
								]
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 122,
									"character": 5
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeAllElementTags",
								"id": 34
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.tag",
								"id": 22
							}
						},
						{
							"id": 253,
							"name": "textColor",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Text colour to be applied."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 126,
									"character": 11
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeColor",
								"id": 30
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.textColor",
								"id": 23
							}
						},
						{
							"id": 254,
							"name": "theme",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Theme applied to this element and inherited for child elements (until\na descendant theme is applied)."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 131,
									"character": 7
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeTheme",
								"id": 35
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.theme",
								"id": 24
							}
						},
						{
							"id": 221,
							"name": "time",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "One of the global timing speeds, for how long the animations takes to complete",
								"tags": [
									{
										"tag": "default",
										"text": "\"fast\"\n"
									}
								]
							},
							"sources": [
								{
									"fileName": "src/Appear/Appear.tsx",
									"line": 47,
									"character": 6
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "slow"
									},
									{
										"type": "stringLiteral",
										"value": "base"
									},
									{
										"type": "stringLiteral",
										"value": "fast"
									}
								]
							}
						},
						{
							"id": 222,
							"name": "visible",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Trigger for appearance/disappearance animation.",
								"tags": [
									{
										"tag": "default",
										"text": "true\n"
									}
								]
							},
							"sources": [
								{
									"fileName": "src/Appear/Appear.tsx",
									"line": 53,
									"character": 9
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							}
						},
						{
							"id": 255,
							"name": "width",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Fixed width applied through inline styling"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 133,
									"character": 7
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.width",
								"id": 25
							}
						},
						{
							"id": 232,
							"name": "wrap",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Flag to allow flex items to wrap over to new lines"
							},
							"sources": [
								{
									"fileName": "src/Flex/Flex.tsx",
									"line": 29,
									"character": 6
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "FlexProps.wrap",
								"id": 184
							}
						},
						{
							"id": 256,
							"name": "zIndex",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "z-index number for layering elements."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 135,
									"character": 8
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "number"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.zIndex",
								"id": 26
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								233,
								223,
								224,
								225,
								226,
								213,
								234,
								235,
								236,
								237,
								238,
								239,
								214,
								227,
								240,
								241,
								228,
								229,
								242,
								230,
								243,
								244,
								245,
								246,
								215,
								218,
								247,
								248,
								249,
								250,
								251,
								231,
								252,
								253,
								254,
								221,
								222,
								255,
								232,
								256
							]
						}
					],
					"sources": [
						{
							"fileName": "src/Appear/Appear.tsx",
							"line": 17,
							"character": 28
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"name": "FlexProps",
							"id": 174
						}
					]
				},
				{
					"id": 262,
					"name": "Appear",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "src/Appear/Appear.tsx",
							"line": 56,
							"character": 12
						}
					],
					"type": {
						"type": "reference",
						"name": "ForwardRefExoticComponent",
						"typeArguments": [
							{
								"type": "intersection",
								"types": [
									{
										"type": "reference",
										"name": "AppearProps",
										"id": 212
									},
									{
										"type": "reflection",
										"declaration": {
											"id": 263,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {}
										}
									},
									{
										"type": "reference",
										"name": "RefAttributes",
										"typeArguments": [
											{
												"type": "reference",
												"name": "HTMLElement"
											}
										]
									}
								]
							}
						]
					},
					"defaultValue": " React.forwardRef<HTMLElement, Attributes<HTMLElement, AppearProps>>((props, ref) => {\n  const {\n    animation = 'FadeSlideUp',\n    className,\n    delay = 0,\n    onEntered,\n    onExited,\n    time = 'fast',\n    visible = true,\n    ...rest\n  } = props;\n\n  const classes = classnames(className, 'Appear', `Appear--${animation}`, `Appear--${time}`, {\n    [`Appear--${animation}-appear`]: !isClient && visible,\n  });\n\n  const transition = {\n    appear: `Appear--${animation}-appear`,\n    appearActive: `Appear--${animation}-appear-active`,\n    enter: `Appear--${animation}-enter`,\n    enterActive: `Appear--${animation}-enter-active`,\n    enterDone: `Appear--${animation}-enter-done`,\n    exit: `Appear--${animation}-exit`,\n    exitActive: `Appear--${animation}-exit-active`,\n    exitDone: `Appear--${animation}-exit-done`,\n  };\n\n  const style = {\n    ...props.style,\n    animationDelay: `${delay}ms`,\n    transitionDelay: `${delay}ms`,\n  };\n\n  return (\n    <CSSTransition\n        appear={ isClient && visible }\n        classNames={ transition }\n        in={ isClient && visible }\n        onEntered={ onEntered }\n        onExited={ onExited }\n        timeout={ times[time] }>\n      <Flex { ...rest } className={ classes } ref={ ref } style={ style } />\n    </CSSTransition>\n  );\n})"
				},
				{
					"id": 257,
					"name": "isClient",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isConst": true
					},
					"sources": [
						{
							"fileName": "src/Appear/Appear.tsx",
							"line": 9,
							"character": 14
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					},
					"defaultValue": " typeof window !== 'undefined'"
				},
				{
					"id": 258,
					"name": "times",
					"kind": 2097152,
					"kindString": "Object literal",
					"flags": {
						"isConst": true
					},
					"children": [
						{
							"id": 260,
							"name": "base",
							"kind": 32,
							"kindString": "Variable",
							"flags": {},
							"sources": [
								{
									"fileName": "src/Appear/Appear.tsx",
									"line": 13,
									"character": 6
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							},
							"defaultValue": " transitionTimeBase"
						},
						{
							"id": 259,
							"name": "fast",
							"kind": 32,
							"kindString": "Variable",
							"flags": {},
							"sources": [
								{
									"fileName": "src/Appear/Appear.tsx",
									"line": 12,
									"character": 6
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							},
							"defaultValue": " transitionTimeFast"
						},
						{
							"id": 261,
							"name": "slow",
							"kind": 32,
							"kindString": "Variable",
							"flags": {},
							"sources": [
								{
									"fileName": "src/Appear/Appear.tsx",
									"line": 14,
									"character": 6
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							},
							"defaultValue": " transitionTimeSlow"
						}
					],
					"groups": [
						{
							"title": "Variables",
							"kind": 32,
							"children": [
								260,
								259,
								261
							]
						}
					],
					"sources": [
						{
							"fileName": "src/Appear/Appear.tsx",
							"line": 11,
							"character": 11
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "object"
					}
				}
			],
			"groups": [
				{
					"title": "Interfaces",
					"kind": 256,
					"children": [
						212
					]
				},
				{
					"title": "Variables",
					"kind": 32,
					"children": [
						262,
						257
					]
				},
				{
					"title": "Object literals",
					"kind": 2097152,
					"children": [
						258
					]
				}
			],
			"sources": [
				{
					"fileName": "src/Appear/Appear.tsx",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 1,
			"name": "\"Base/Base\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "/Users/harry/Projects/personal/preshape/src/Base/Base.tsx",
			"children": [
				{
					"id": 2,
					"name": "BaseProps",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"children": [
						{
							"id": 3,
							"name": "absolute",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Quick way of absolutely position to common places"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 58,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "fullscreen"
									},
									{
										"type": "stringLiteral",
										"value": "top"
									},
									{
										"type": "stringLiteral",
										"value": "top-left"
									},
									{
										"type": "stringLiteral",
										"value": "top-right"
									},
									{
										"type": "stringLiteral",
										"value": "bottom"
									},
									{
										"type": "stringLiteral",
										"value": "bottom-left"
									},
									{
										"type": "stringLiteral",
										"value": "bottom-right"
									}
								]
							}
						},
						{
							"id": 4,
							"name": "backgroundColor",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Background colour to be applied, shades are taken from the current\ntheme."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 70,
									"character": 17
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeColor",
								"id": 30
							}
						},
						{
							"id": 5,
							"name": "borderColor",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Border colour to be applied, shades are taken from the current\ntheme."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 75,
									"character": 13
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeColor",
								"id": 30
							}
						},
						{
							"id": 6,
							"name": "borderRadius",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Adds styling of a border radius to one of the size multiples."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 79,
									"character": 14
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "x1"
									},
									{
										"type": "stringLiteral",
										"value": "x2"
									},
									{
										"type": "stringLiteral",
										"value": "x3"
									}
								]
							}
						},
						{
							"id": 7,
							"name": "borderSize",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Thickness of the border to be applied"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 81,
									"character": 12
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "x1"
									},
									{
										"type": "stringLiteral",
										"value": "x2"
									}
								]
							}
						},
						{
							"id": 8,
							"name": "clickable",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Adds styling to indicate that the element is clickable"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 83,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							}
						},
						{
							"id": 9,
							"name": "container",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies relative positioning to contain child elements."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 85,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							}
						},
						{
							"id": 10,
							"name": "display",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies display styling"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 87,
									"character": 9
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "block"
									},
									{
										"type": "stringLiteral",
										"value": "inline-block"
									}
								]
							}
						},
						{
							"id": 11,
							"name": "fixed",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Quick way of absolutely position to common places"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 89,
									"character": 7
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "fullscreen"
									},
									{
										"type": "stringLiteral",
										"value": "top"
									},
									{
										"type": "stringLiteral",
										"value": "top-left"
									},
									{
										"type": "stringLiteral",
										"value": "top-right"
									},
									{
										"type": "stringLiteral",
										"value": "bottom"
									},
									{
										"type": "stringLiteral",
										"value": "bottom-left"
									},
									{
										"type": "stringLiteral",
										"value": "bottom-right"
									}
								]
							}
						},
						{
							"id": 12,
							"name": "height",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Fixed height applied through inline styling"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 98,
									"character": 8
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							}
						},
						{
							"id": 13,
							"name": "margin",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Margins applied for the global spacing variables"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 100,
									"character": 8
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeSize",
								"id": 31
							}
						},
						{
							"id": 14,
							"name": "maxWidth",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Max width applied through inline styling"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 102,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							}
						},
						{
							"id": 15,
							"name": "minHeight",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Max height applied through inline styling"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 104,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							}
						},
						{
							"id": 16,
							"name": "minWidth",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Min width applied through inline style"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 106,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							}
						},
						{
							"id": 17,
							"name": "overflow",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Overflow"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 108,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "stringLiteral",
										"value": "hidden"
									}
								]
							}
						},
						{
							"id": 18,
							"name": "padding",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Padding applied for the global spacing variables"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 110,
									"character": 9
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeSize",
								"id": 31
							}
						},
						{
							"id": 19,
							"name": "paddingHorizontal",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Horizontal padding applied for the global spacing variables"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 112,
									"character": 19
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeSize",
								"id": 31
							}
						},
						{
							"id": 20,
							"name": "paddingVertical",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Vertical pa?dding applied for the global spacing variables"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 114,
									"character": 17
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeSize",
								"id": 31
							}
						},
						{
							"id": 21,
							"name": "scrollable",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies overflow styling to enable/disable scrolling."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 116,
									"character": 12
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							}
						},
						{
							"id": 22,
							"name": "tag",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Any valid HTML or SVG element tag.",
								"tags": [
									{
										"tag": "reference",
										"text": "false\n"
									}
								]
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 122,
									"character": 5
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeAllElementTags",
								"id": 34
							}
						},
						{
							"id": 23,
							"name": "textColor",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Text colour to be applied."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 126,
									"character": 11
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeColor",
								"id": 30
							}
						},
						{
							"id": 24,
							"name": "theme",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Theme applied to this element and inherited for child elements (until\na descendant theme is applied)."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 131,
									"character": 7
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeTheme",
								"id": 35
							}
						},
						{
							"id": 25,
							"name": "width",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Fixed width applied through inline styling"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 133,
									"character": 7
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							}
						},
						{
							"id": 26,
							"name": "zIndex",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "z-index number for layering elements."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 135,
									"character": 8
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "number"
									}
								]
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								3,
								4,
								5,
								6,
								7,
								8,
								9,
								10,
								11,
								12,
								13,
								14,
								15,
								16,
								17,
								18,
								19,
								20,
								21,
								22,
								23,
								24,
								25,
								26
							]
						}
					],
					"sources": [
						{
							"fileName": "src/Base/Base.tsx",
							"line": 56,
							"character": 26
						}
					],
					"extendedBy": [
						{
							"type": "reference",
							"name": "AlertProps",
							"id": 40
						},
						{
							"type": "reference",
							"name": "FlexProps",
							"id": 174
						},
						{
							"type": "reference",
							"name": "TextProps",
							"id": 265
						},
						{
							"type": "reference",
							"name": "BulletPointProps",
							"id": 359
						},
						{
							"type": "reference",
							"name": "BulletPointsProps",
							"id": 387
						},
						{
							"type": "reference",
							"name": "Props",
							"id": 635
						},
						{
							"type": "reference",
							"name": "IconProps",
							"id": 746
						},
						{
							"type": "reference",
							"name": "ImageProps",
							"id": 817
						},
						{
							"type": "reference",
							"name": "LabelsProps",
							"id": 971
						},
						{
							"type": "reference",
							"name": "PlacementProps",
							"id": 1127
						},
						{
							"type": "reference",
							"name": "PlacementArrowProps",
							"id": 1161
						},
						{
							"type": "reference",
							"name": "SeparatorProps",
							"id": 1282
						},
						{
							"type": "reference",
							"name": "TabProps",
							"id": 1310
						},
						{
							"type": "reference",
							"name": "TableBodyProps",
							"id": 1457
						},
						{
							"type": "reference",
							"name": "TableHeaderProps",
							"id": 1528
						},
						{
							"type": "reference",
							"name": "TableRowProps",
							"id": 1600
						}
					]
				},
				{
					"id": 27,
					"name": "Attributes",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {
						"isExported": true
					},
					"typeParameter": [
						{
							"id": 28,
							"name": "E",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {}
						},
						{
							"id": 29,
							"name": "P",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {}
						}
					],
					"sources": [
						{
							"fileName": "src/Base/Base.tsx",
							"line": 8,
							"character": 22
						}
					],
					"type": {
						"type": "intersection",
						"types": [
							{
								"type": "typeParameter",
								"name": "P"
							},
							{
								"type": "reference",
								"name": "Omit",
								"typeArguments": [
									{
										"type": "unknown",
										"name": "E extends SVGElement ? SVGAttributes<E> : AllHTMLAttributes<E>"
									},
									{
										"type": "typeOperator",
										"operator": "keyof",
										"target": {
											"type": "typeParameter",
											"name": "P"
										}
									}
								]
							}
						]
					}
				},
				{
					"id": 36,
					"name": "ReactElemenetProps",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {},
					"sources": [
						{
							"fileName": "src/Base/Base.tsx",
							"line": 138,
							"character": 23
						}
					],
					"type": {
						"type": "reference",
						"name": "Omit",
						"typeArguments": [
							{
								"type": "intersection",
								"types": [
									{
										"type": "reference",
										"name": "AllHTMLAttributes",
										"typeArguments": [
											{
												"type": "reference",
												"name": "Element"
											}
										]
									},
									{
										"type": "reference",
										"name": "SVGAttributes",
										"typeArguments": [
											{
												"type": "reference",
												"name": "Element"
											}
										]
									}
								]
							},
							{
								"type": "stringLiteral",
								"value": "crossOrigin"
							}
						]
					}
				},
				{
					"id": 34,
					"name": "TypeAllElementTags",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {
						"isExported": true
					},
					"sources": [
						{
							"fileName": "src/Base/Base.tsx",
							"line": 50,
							"character": 30
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "reference",
								"name": "TypeHTMLTags",
								"id": 32
							},
							{
								"type": "reference",
								"name": "TypeSVGTags",
								"id": 33
							}
						]
					}
				},
				{
					"id": 30,
					"name": "TypeColor",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {
						"isExported": true
					},
					"sources": [
						{
							"fileName": "src/Base/Base.tsx",
							"line": 13,
							"character": 21
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "stringLiteral",
								"value": "accent-shade-1"
							},
							{
								"type": "stringLiteral",
								"value": "accent-shade-2"
							},
							{
								"type": "stringLiteral",
								"value": "accent-shade-3"
							},
							{
								"type": "stringLiteral",
								"value": "background-shade-1"
							},
							{
								"type": "stringLiteral",
								"value": "background-shade-2"
							},
							{
								"type": "stringLiteral",
								"value": "background-shade-3"
							},
							{
								"type": "stringLiteral",
								"value": "dark-shade-1"
							},
							{
								"type": "stringLiteral",
								"value": "dark-shade-2"
							},
							{
								"type": "stringLiteral",
								"value": "dark-shade-3"
							},
							{
								"type": "stringLiteral",
								"value": "light-shade-1"
							},
							{
								"type": "stringLiteral",
								"value": "light-shade-2"
							},
							{
								"type": "stringLiteral",
								"value": "light-shade-3"
							},
							{
								"type": "stringLiteral",
								"value": "negative-shade-1"
							},
							{
								"type": "stringLiteral",
								"value": "negative-shade-2"
							},
							{
								"type": "stringLiteral",
								"value": "negative-shade-3"
							},
							{
								"type": "stringLiteral",
								"value": "positive-shade-1"
							},
							{
								"type": "stringLiteral",
								"value": "positive-shade-2"
							},
							{
								"type": "stringLiteral",
								"value": "positive-shade-3"
							},
							{
								"type": "stringLiteral",
								"value": "text-shade-1"
							},
							{
								"type": "stringLiteral",
								"value": "text-shade-2"
							},
							{
								"type": "stringLiteral",
								"value": "text-shade-3"
							}
						]
					}
				},
				{
					"id": 32,
					"name": "TypeHTMLTags",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {
						"isExported": true
					},
					"sources": [
						{
							"fileName": "src/Base/Base.tsx",
							"line": 48,
							"character": 24
						}
					],
					"type": {
						"type": "typeOperator",
						"operator": "keyof",
						"target": {
							"type": "reference",
							"name": "HTMLElementTagNameMap"
						}
					}
				},
				{
					"id": 33,
					"name": "TypeSVGTags",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {
						"isExported": true
					},
					"sources": [
						{
							"fileName": "src/Base/Base.tsx",
							"line": 49,
							"character": 23
						}
					],
					"type": {
						"type": "typeOperator",
						"operator": "keyof",
						"target": {
							"type": "reference",
							"name": "Omit",
							"typeArguments": [
								{
									"type": "reference",
									"name": "SVGElementTagNameMap"
								},
								{
									"type": "reference",
									"name": "TypeHTMLTags"
								}
							]
						}
					}
				},
				{
					"id": 31,
					"name": "TypeSize",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {
						"isExported": true
					},
					"sources": [
						{
							"fileName": "src/Base/Base.tsx",
							"line": 36,
							"character": 20
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "stringLiteral",
								"value": "x0"
							},
							{
								"type": "stringLiteral",
								"value": "x1"
							},
							{
								"type": "stringLiteral",
								"value": "x2"
							},
							{
								"type": "stringLiteral",
								"value": "x3"
							},
							{
								"type": "stringLiteral",
								"value": "x4"
							},
							{
								"type": "stringLiteral",
								"value": "x6"
							},
							{
								"type": "stringLiteral",
								"value": "x8"
							},
							{
								"type": "stringLiteral",
								"value": "x10"
							},
							{
								"type": "stringLiteral",
								"value": "x12"
							},
							{
								"type": "stringLiteral",
								"value": "x16"
							}
						]
					}
				},
				{
					"id": 35,
					"name": "TypeTheme",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {
						"isExported": true
					},
					"sources": [
						{
							"fileName": "src/Base/Base.tsx",
							"line": 52,
							"character": 21
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "stringLiteral",
								"value": "day"
							},
							{
								"type": "stringLiteral",
								"value": "night"
							}
						]
					}
				},
				{
					"id": 37,
					"name": "Base",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "src/Base/Base.tsx",
							"line": 143,
							"character": 10
						}
					],
					"type": {
						"type": "reference",
						"name": "ForwardRefExoticComponent",
						"typeArguments": [
							{
								"type": "intersection",
								"types": [
									{
										"type": "reference",
										"name": "BaseProps",
										"id": 2
									},
									{
										"type": "reflection",
										"declaration": {
											"id": 38,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {}
										}
									},
									{
										"type": "reference",
										"name": "RefAttributes",
										"typeArguments": [
											{
												"type": "reference",
												"name": "Element"
											}
										]
									}
								]
							}
						]
					},
					"defaultValue": " React.forwardRef<Element, BaseProps & ReactElemenetProps>((props, ref) => {\n  const {\n    absolute,\n    backgroundColor,\n    borderColor,\n    borderRadius,\n    borderSize,\n    children,\n    className,\n    clickable,\n    container,\n    display,\n    fixed,\n    height,\n    maxWidth,\n    minWidth,\n    minHeight,\n    overflow,\n    padding,\n    paddingHorizontal = padding,\n    paddingVertical = padding,\n    margin,\n    scrollable,\n    style,\n    tag,\n    textColor,\n    theme,\n    width,\n    zIndex,\n    ...rest\n  } = props;\n\n  const classes = classnames('Base', {\n    'Base--clickable': clickable,\n    'Base--container': container,\n    'Base--max-width': maxWidth,\n    'Base--scrollable': scrollable,\n    [`Base--absolute-${absolute}`]: absolute,\n    [`Base--background-color-${backgroundColor}`]: backgroundColor,\n    [`Base--border-color-${borderColor}`]: borderColor,\n    [`Base--border-radius-${borderRadius}`]: borderRadius,\n    [`Base--border-size-${borderSize}`]: borderSize,\n    [`Base--display-${display}`]: display,\n    [`Base--fixed-${fixed}`]: fixed,\n    [`Base--margin-${margin}`]: margin,\n    [`Base--overflow-${overflow}`]: overflow,\n    [`Base--padding-horizontal-${paddingHorizontal}`]: paddingHorizontal,\n    [`Base--padding-vertical-${paddingVertical}`]: paddingVertical,\n    [`Base--text-color-${textColor}`]: textColor,\n    [`Theme--${theme}`]: theme,\n  }, className);\n\n  return React.createElement(tag || 'div', {\n    ...rest,\n    className: classes,\n    ref: ref,\n    style: { height, minHeight, maxWidth, minWidth, width, zIndex, ...style },\n  }, children);\n})"
				}
			],
			"groups": [
				{
					"title": "Interfaces",
					"kind": 256,
					"children": [
						2
					]
				},
				{
					"title": "Type aliases",
					"kind": 4194304,
					"children": [
						27,
						36,
						34,
						30,
						32,
						33,
						31,
						35
					]
				},
				{
					"title": "Variables",
					"kind": 32,
					"children": [
						37
					]
				}
			],
			"sources": [
				{
					"fileName": "src/Base/Base.tsx",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 316,
			"name": "\"BlockQuote/BlockQuote\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "/Users/harry/Projects/personal/preshape/src/BlockQuote/BlockQuote.tsx",
			"children": [
				{
					"id": 317,
					"name": "BlockQuoteProps",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"children": [
						{
							"id": 332,
							"name": "absolute",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Quick way of absolutely position to common places"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 58,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "fullscreen"
									},
									{
										"type": "stringLiteral",
										"value": "top"
									},
									{
										"type": "stringLiteral",
										"value": "top-left"
									},
									{
										"type": "stringLiteral",
										"value": "top-right"
									},
									{
										"type": "stringLiteral",
										"value": "bottom"
									},
									{
										"type": "stringLiteral",
										"value": "bottom-left"
									},
									{
										"type": "stringLiteral",
										"value": "bottom-right"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.absolute",
								"id": 3
							}
						},
						{
							"id": 318,
							"name": "align",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Text alignment"
							},
							"sources": [
								{
									"fileName": "src/Text/Text.tsx",
									"line": 32,
									"character": 7
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "start"
									},
									{
										"type": "stringLiteral",
										"value": "middle"
									},
									{
										"type": "stringLiteral",
										"value": "end"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TextProps.align",
								"id": 266
							}
						},
						{
							"id": 333,
							"name": "backgroundColor",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Background colour to be applied, shades are taken from the current\ntheme."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 70,
									"character": 17
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeColor",
								"id": 30
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.backgroundColor",
								"id": 4
							}
						},
						{
							"id": 334,
							"name": "borderColor",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Border colour to be applied, shades are taken from the current\ntheme."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 75,
									"character": 13
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeColor",
								"id": 30
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.borderColor",
								"id": 5
							}
						},
						{
							"id": 335,
							"name": "borderRadius",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Adds styling of a border radius to one of the size multiples."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 79,
									"character": 14
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "x1"
									},
									{
										"type": "stringLiteral",
										"value": "x2"
									},
									{
										"type": "stringLiteral",
										"value": "x3"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.borderRadius",
								"id": 6
							}
						},
						{
							"id": 336,
							"name": "borderSize",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Thickness of the border to be applied"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 81,
									"character": 12
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "x1"
									},
									{
										"type": "stringLiteral",
										"value": "x2"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.borderSize",
								"id": 7
							}
						},
						{
							"id": 319,
							"name": "breakOn",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "How the block of text should break onto new lines."
							},
							"sources": [
								{
									"fileName": "src/Text/Text.tsx",
									"line": 34,
									"character": 9
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "all"
									},
									{
										"type": "stringLiteral",
										"value": "none"
									},
									{
										"type": "stringLiteral",
										"value": "word"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TextProps.breakOn",
								"id": 267
							}
						},
						{
							"id": 337,
							"name": "clickable",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Adds styling to indicate that the element is clickable"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 83,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.clickable",
								"id": 8
							}
						},
						{
							"id": 338,
							"name": "container",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies relative positioning to contain child elements."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 85,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.container",
								"id": 9
							}
						},
						{
							"id": 339,
							"name": "display",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies display styling"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 87,
									"character": 9
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "block"
									},
									{
										"type": "stringLiteral",
										"value": "inline-block"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.display",
								"id": 10
							}
						},
						{
							"id": 320,
							"name": "ellipsis",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Replaces the overflow of text with the ellipsis character"
							},
							"sources": [
								{
									"fileName": "src/Text/Text.tsx",
									"line": 36,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TextProps.ellipsis",
								"id": 268
							}
						},
						{
							"id": 321,
							"name": "emphasis",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies emphasis styling"
							},
							"sources": [
								{
									"fileName": "src/Text/Text.tsx",
									"line": 38,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TextProps.emphasis",
								"id": 269
							}
						},
						{
							"id": 340,
							"name": "fixed",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Quick way of absolutely position to common places"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 89,
									"character": 7
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "fullscreen"
									},
									{
										"type": "stringLiteral",
										"value": "top"
									},
									{
										"type": "stringLiteral",
										"value": "top-left"
									},
									{
										"type": "stringLiteral",
										"value": "top-right"
									},
									{
										"type": "stringLiteral",
										"value": "bottom"
									},
									{
										"type": "stringLiteral",
										"value": "bottom-left"
									},
									{
										"type": "stringLiteral",
										"value": "bottom-right"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.fixed",
								"id": 11
							}
						},
						{
							"id": 322,
							"name": "heading",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies a heading font family style"
							},
							"sources": [
								{
									"fileName": "src/Text/Text.tsx",
									"line": 40,
									"character": 9
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TextProps.heading",
								"id": 270
							}
						},
						{
							"id": 341,
							"name": "height",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Fixed height applied through inline styling"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 98,
									"character": 8
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.height",
								"id": 12
							}
						},
						{
							"id": 323,
							"name": "inline",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Text default to block display, this will apply inline display."
							},
							"sources": [
								{
									"fileName": "src/Text/Text.tsx",
									"line": 42,
									"character": 8
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TextProps.inline",
								"id": 271
							}
						},
						{
							"id": 342,
							"name": "margin",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Margins applied for the global spacing variables"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 100,
									"character": 8
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeSize",
								"id": 31
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.margin",
								"id": 13
							}
						},
						{
							"id": 343,
							"name": "maxWidth",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Max width applied through inline styling"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 102,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.maxWidth",
								"id": 14
							}
						},
						{
							"id": 344,
							"name": "minHeight",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Max height applied through inline styling"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 104,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.minHeight",
								"id": 15
							}
						},
						{
							"id": 345,
							"name": "minWidth",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Min width applied through inline style"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 106,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.minWidth",
								"id": 16
							}
						},
						{
							"id": 324,
							"name": "monospace",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies a monospace font family style"
							},
							"sources": [
								{
									"fileName": "src/Text/Text.tsx",
									"line": 44,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TextProps.monospace",
								"id": 272
							}
						},
						{
							"id": 346,
							"name": "overflow",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Overflow"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 108,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "stringLiteral",
										"value": "hidden"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.overflow",
								"id": 17
							}
						},
						{
							"id": 347,
							"name": "padding",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Padding applied for the global spacing variables"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 110,
									"character": 9
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeSize",
								"id": 31
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.padding",
								"id": 18
							}
						},
						{
							"id": 348,
							"name": "paddingHorizontal",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Horizontal padding applied for the global spacing variables"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 112,
									"character": 19
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeSize",
								"id": 31
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.paddingHorizontal",
								"id": 19
							}
						},
						{
							"id": 349,
							"name": "paddingVertical",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Vertical pa?dding applied for the global spacing variables"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 114,
									"character": 17
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeSize",
								"id": 31
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.paddingVertical",
								"id": 20
							}
						},
						{
							"id": 350,
							"name": "scrollable",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies overflow styling to enable/disable scrolling."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 116,
									"character": 12
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.scrollable",
								"id": 21
							}
						},
						{
							"id": 325,
							"name": "size",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Size of the text"
							},
							"sources": [
								{
									"fileName": "src/Text/Text.tsx",
									"line": 46,
									"character": 6
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeTextSize",
								"id": 304
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TextProps.size",
								"id": 273
							}
						},
						{
							"id": 326,
							"name": "strong",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies strong weight styling"
							},
							"sources": [
								{
									"fileName": "src/Text/Text.tsx",
									"line": 48,
									"character": 8
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TextProps.strong",
								"id": 274
							}
						},
						{
							"id": 327,
							"name": "subscript",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies subscript baseline styling"
							},
							"sources": [
								{
									"fileName": "src/Text/Text.tsx",
									"line": 50,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TextProps.subscript",
								"id": 275
							}
						},
						{
							"id": 328,
							"name": "superscript",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies superscript baseline styling"
							},
							"sources": [
								{
									"fileName": "src/Text/Text.tsx",
									"line": 52,
									"character": 13
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TextProps.superscript",
								"id": 276
							}
						},
						{
							"id": 351,
							"name": "tag",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Any valid HTML or SVG element tag.",
								"tags": [
									{
										"tag": "reference",
										"text": "false\n"
									}
								]
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 122,
									"character": 5
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeAllElementTags",
								"id": 34
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.tag",
								"id": 22
							}
						},
						{
							"id": 352,
							"name": "textColor",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Text colour to be applied."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 126,
									"character": 11
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeColor",
								"id": 30
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.textColor",
								"id": 23
							}
						},
						{
							"id": 353,
							"name": "theme",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Theme applied to this element and inherited for child elements (until\na descendant theme is applied)."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 131,
									"character": 7
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeTheme",
								"id": 35
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.theme",
								"id": 24
							}
						},
						{
							"id": 329,
							"name": "titlecase",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies title casing styling"
							},
							"sources": [
								{
									"fileName": "src/Text/Text.tsx",
									"line": 54,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TextProps.titlecase",
								"id": 277
							}
						},
						{
							"id": 330,
							"name": "uppercase",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies uppercasing styling"
							},
							"sources": [
								{
									"fileName": "src/Text/Text.tsx",
									"line": 56,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TextProps.uppercase",
								"id": 278
							}
						},
						{
							"id": 331,
							"name": "weak",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies weak weight styling"
							},
							"sources": [
								{
									"fileName": "src/Text/Text.tsx",
									"line": 58,
									"character": 6
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TextProps.weak",
								"id": 279
							}
						},
						{
							"id": 354,
							"name": "width",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Fixed width applied through inline styling"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 133,
									"character": 7
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.width",
								"id": 25
							}
						},
						{
							"id": 355,
							"name": "zIndex",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "z-index number for layering elements."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 135,
									"character": 8
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "number"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.zIndex",
								"id": 26
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								332,
								318,
								333,
								334,
								335,
								336,
								319,
								337,
								338,
								339,
								320,
								321,
								340,
								322,
								341,
								323,
								342,
								343,
								344,
								345,
								324,
								346,
								347,
								348,
								349,
								350,
								325,
								326,
								327,
								328,
								351,
								352,
								353,
								329,
								330,
								331,
								354,
								355
							]
						}
					],
					"sources": [
						{
							"fileName": "src/BlockQuote/BlockQuote.tsx",
							"line": 6,
							"character": 32
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"name": "TextProps",
							"id": 265
						}
					]
				},
				{
					"id": 356,
					"name": "BlockQuote",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "src/BlockQuote/BlockQuote.tsx",
							"line": 8,
							"character": 16
						}
					],
					"type": {
						"type": "reference",
						"name": "ForwardRefExoticComponent",
						"typeArguments": [
							{
								"type": "intersection",
								"types": [
									{
										"type": "reference",
										"name": "BlockQuoteProps",
										"id": 317
									},
									{
										"type": "reflection",
										"declaration": {
											"id": 357,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {}
										}
									},
									{
										"type": "reference",
										"name": "RefAttributes",
										"typeArguments": [
											{
												"type": "reference",
												"name": "HTMLQuoteElement"
											}
										]
									}
								]
							}
						]
					},
					"defaultValue": " React.forwardRef<HTMLQuoteElement, Attributes<HTMLQuoteElement, BlockQuoteProps>>((props, ref) => {\n  return (\n    <Text\n        paddingHorizontal=\"x6\"\n        paddingVertical=\"x1\"\n        { ...props }\n        className=\"BlockQuote\"\n        ref={ ref }\n        tag=\"blockquote\"\n        textColor=\"text-shade-3\" />\n  );\n})"
				}
			],
			"groups": [
				{
					"title": "Interfaces",
					"kind": 256,
					"children": [
						317
					]
				},
				{
					"title": "Variables",
					"kind": 32,
					"children": [
						356
					]
				}
			],
			"sources": [
				{
					"fileName": "src/BlockQuote/BlockQuote.tsx",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 358,
			"name": "\"BulletPoints/BulletPoint\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "/Users/harry/Projects/personal/preshape/src/BulletPoints/BulletPoint.tsx",
			"children": [
				{
					"id": 359,
					"name": "BulletPointProps",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"children": [
						{
							"id": 360,
							"name": "absolute",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Quick way of absolutely position to common places"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 58,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "fullscreen"
									},
									{
										"type": "stringLiteral",
										"value": "top"
									},
									{
										"type": "stringLiteral",
										"value": "top-left"
									},
									{
										"type": "stringLiteral",
										"value": "top-right"
									},
									{
										"type": "stringLiteral",
										"value": "bottom"
									},
									{
										"type": "stringLiteral",
										"value": "bottom-left"
									},
									{
										"type": "stringLiteral",
										"value": "bottom-right"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.absolute",
								"id": 3
							}
						},
						{
							"id": 361,
							"name": "backgroundColor",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Background colour to be applied, shades are taken from the current\ntheme."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 70,
									"character": 17
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeColor",
								"id": 30
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.backgroundColor",
								"id": 4
							}
						},
						{
							"id": 362,
							"name": "borderColor",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Border colour to be applied, shades are taken from the current\ntheme."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 75,
									"character": 13
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeColor",
								"id": 30
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.borderColor",
								"id": 5
							}
						},
						{
							"id": 363,
							"name": "borderRadius",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Adds styling of a border radius to one of the size multiples."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 79,
									"character": 14
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "x1"
									},
									{
										"type": "stringLiteral",
										"value": "x2"
									},
									{
										"type": "stringLiteral",
										"value": "x3"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.borderRadius",
								"id": 6
							}
						},
						{
							"id": 364,
							"name": "borderSize",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Thickness of the border to be applied"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 81,
									"character": 12
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "x1"
									},
									{
										"type": "stringLiteral",
										"value": "x2"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.borderSize",
								"id": 7
							}
						},
						{
							"id": 365,
							"name": "clickable",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Adds styling to indicate that the element is clickable"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 83,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.clickable",
								"id": 8
							}
						},
						{
							"id": 366,
							"name": "container",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies relative positioning to contain child elements."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 85,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.container",
								"id": 9
							}
						},
						{
							"id": 367,
							"name": "display",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies display styling"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 87,
									"character": 9
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "block"
									},
									{
										"type": "stringLiteral",
										"value": "inline-block"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.display",
								"id": 10
							}
						},
						{
							"id": 368,
							"name": "fixed",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Quick way of absolutely position to common places"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 89,
									"character": 7
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "fullscreen"
									},
									{
										"type": "stringLiteral",
										"value": "top"
									},
									{
										"type": "stringLiteral",
										"value": "top-left"
									},
									{
										"type": "stringLiteral",
										"value": "top-right"
									},
									{
										"type": "stringLiteral",
										"value": "bottom"
									},
									{
										"type": "stringLiteral",
										"value": "bottom-left"
									},
									{
										"type": "stringLiteral",
										"value": "bottom-right"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.fixed",
								"id": 11
							}
						},
						{
							"id": 369,
							"name": "height",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Fixed height applied through inline styling"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 98,
									"character": 8
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.height",
								"id": 12
							}
						},
						{
							"id": 370,
							"name": "margin",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Margins applied for the global spacing variables"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 100,
									"character": 8
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeSize",
								"id": 31
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.margin",
								"id": 13
							}
						},
						{
							"id": 371,
							"name": "maxWidth",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Max width applied through inline styling"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 102,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.maxWidth",
								"id": 14
							}
						},
						{
							"id": 372,
							"name": "minHeight",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Max height applied through inline styling"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 104,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.minHeight",
								"id": 15
							}
						},
						{
							"id": 373,
							"name": "minWidth",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Min width applied through inline style"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 106,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.minWidth",
								"id": 16
							}
						},
						{
							"id": 374,
							"name": "overflow",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Overflow"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 108,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "stringLiteral",
										"value": "hidden"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.overflow",
								"id": 17
							}
						},
						{
							"id": 375,
							"name": "padding",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Padding applied for the global spacing variables"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 110,
									"character": 9
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeSize",
								"id": 31
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.padding",
								"id": 18
							}
						},
						{
							"id": 376,
							"name": "paddingHorizontal",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Horizontal padding applied for the global spacing variables"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 112,
									"character": 19
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeSize",
								"id": 31
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.paddingHorizontal",
								"id": 19
							}
						},
						{
							"id": 377,
							"name": "paddingVertical",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Vertical pa?dding applied for the global spacing variables"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 114,
									"character": 17
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeSize",
								"id": 31
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.paddingVertical",
								"id": 20
							}
						},
						{
							"id": 378,
							"name": "scrollable",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies overflow styling to enable/disable scrolling."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 116,
									"character": 12
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.scrollable",
								"id": 21
							}
						},
						{
							"id": 379,
							"name": "tag",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Any valid HTML or SVG element tag.",
								"tags": [
									{
										"tag": "reference",
										"text": "false\n"
									}
								]
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 122,
									"character": 5
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeAllElementTags",
								"id": 34
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.tag",
								"id": 22
							}
						},
						{
							"id": 380,
							"name": "textColor",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Text colour to be applied."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 126,
									"character": 11
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeColor",
								"id": 30
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.textColor",
								"id": 23
							}
						},
						{
							"id": 381,
							"name": "theme",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Theme applied to this element and inherited for child elements (until\na descendant theme is applied)."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 131,
									"character": 7
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeTheme",
								"id": 35
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.theme",
								"id": 24
							}
						},
						{
							"id": 382,
							"name": "width",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Fixed width applied through inline styling"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 133,
									"character": 7
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.width",
								"id": 25
							}
						},
						{
							"id": 383,
							"name": "zIndex",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "z-index number for layering elements."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 135,
									"character": 8
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "number"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.zIndex",
								"id": 26
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								360,
								361,
								362,
								363,
								364,
								365,
								366,
								367,
								368,
								369,
								370,
								371,
								372,
								373,
								374,
								375,
								376,
								377,
								378,
								379,
								380,
								381,
								382,
								383
							]
						}
					],
					"sources": [
						{
							"fileName": "src/BulletPoints/BulletPoint.tsx",
							"line": 4,
							"character": 33
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"name": "BaseProps",
							"id": 2
						}
					]
				},
				{
					"id": 384,
					"name": "BulletPoint",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "src/BulletPoints/BulletPoint.tsx",
							"line": 6,
							"character": 17
						}
					],
					"type": {
						"type": "reference",
						"name": "ForwardRefExoticComponent",
						"typeArguments": [
							{
								"type": "intersection",
								"types": [
									{
										"type": "reference",
										"name": "BulletPointProps",
										"id": 359
									},
									{
										"type": "reflection",
										"declaration": {
											"id": 385,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {}
										}
									},
									{
										"type": "reference",
										"name": "RefAttributes",
										"typeArguments": [
											{
												"type": "reference",
												"name": "HTMLLIElement"
											}
										]
									}
								]
							}
						]
					},
					"defaultValue": " React.forwardRef<HTMLLIElement, Attributes<HTMLLIElement, BulletPointProps>>((props, ref) => {\n  return (\n    <Base { ...props }\n        className=\"BulletPoints__point\"\n        ref={ ref }\n        tag=\"li\" />\n  );\n})"
				}
			],
			"groups": [
				{
					"title": "Interfaces",
					"kind": 256,
					"children": [
						359
					]
				},
				{
					"title": "Variables",
					"kind": 32,
					"children": [
						384
					]
				}
			],
			"sources": [
				{
					"fileName": "src/BulletPoints/BulletPoint.tsx",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 386,
			"name": "\"BulletPoints/BulletPoints\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "/Users/harry/Projects/personal/preshape/src/BulletPoints/BulletPoints.tsx",
			"children": [
				{
					"id": 387,
					"name": "BulletPointsProps",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"children": [
						{
							"id": 389,
							"name": "absolute",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Quick way of absolutely position to common places"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 58,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "fullscreen"
									},
									{
										"type": "stringLiteral",
										"value": "top"
									},
									{
										"type": "stringLiteral",
										"value": "top-left"
									},
									{
										"type": "stringLiteral",
										"value": "top-right"
									},
									{
										"type": "stringLiteral",
										"value": "bottom"
									},
									{
										"type": "stringLiteral",
										"value": "bottom-left"
									},
									{
										"type": "stringLiteral",
										"value": "bottom-right"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.absolute",
								"id": 3
							}
						},
						{
							"id": 390,
							"name": "backgroundColor",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Background colour to be applied, shades are taken from the current\ntheme."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 70,
									"character": 17
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeColor",
								"id": 30
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.backgroundColor",
								"id": 4
							}
						},
						{
							"id": 391,
							"name": "borderColor",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Border colour to be applied, shades are taken from the current\ntheme."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 75,
									"character": 13
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeColor",
								"id": 30
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.borderColor",
								"id": 5
							}
						},
						{
							"id": 392,
							"name": "borderRadius",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Adds styling of a border radius to one of the size multiples."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 79,
									"character": 14
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "x1"
									},
									{
										"type": "stringLiteral",
										"value": "x2"
									},
									{
										"type": "stringLiteral",
										"value": "x3"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.borderRadius",
								"id": 6
							}
						},
						{
							"id": 393,
							"name": "borderSize",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Thickness of the border to be applied"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 81,
									"character": 12
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "x1"
									},
									{
										"type": "stringLiteral",
										"value": "x2"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.borderSize",
								"id": 7
							}
						},
						{
							"id": 394,
							"name": "clickable",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Adds styling to indicate that the element is clickable"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 83,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.clickable",
								"id": 8
							}
						},
						{
							"id": 395,
							"name": "container",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies relative positioning to contain child elements."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 85,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.container",
								"id": 9
							}
						},
						{
							"id": 396,
							"name": "display",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies display styling"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 87,
									"character": 9
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "block"
									},
									{
										"type": "stringLiteral",
										"value": "inline-block"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.display",
								"id": 10
							}
						},
						{
							"id": 397,
							"name": "fixed",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Quick way of absolutely position to common places"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 89,
									"character": 7
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "fullscreen"
									},
									{
										"type": "stringLiteral",
										"value": "top"
									},
									{
										"type": "stringLiteral",
										"value": "top-left"
									},
									{
										"type": "stringLiteral",
										"value": "top-right"
									},
									{
										"type": "stringLiteral",
										"value": "bottom"
									},
									{
										"type": "stringLiteral",
										"value": "bottom-left"
									},
									{
										"type": "stringLiteral",
										"value": "bottom-right"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.fixed",
								"id": 11
							}
						},
						{
							"id": 398,
							"name": "height",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Fixed height applied through inline styling"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 98,
									"character": 8
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.height",
								"id": 12
							}
						},
						{
							"id": 399,
							"name": "margin",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Margins applied for the global spacing variables"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 100,
									"character": 8
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeSize",
								"id": 31
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.margin",
								"id": 13
							}
						},
						{
							"id": 400,
							"name": "maxWidth",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Max width applied through inline styling"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 102,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.maxWidth",
								"id": 14
							}
						},
						{
							"id": 401,
							"name": "minHeight",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Max height applied through inline styling"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 104,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.minHeight",
								"id": 15
							}
						},
						{
							"id": 402,
							"name": "minWidth",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Min width applied through inline style"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 106,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.minWidth",
								"id": 16
							}
						},
						{
							"id": 388,
							"name": "numbered",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/BulletPoints/BulletPoints.tsx",
									"line": 7,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							}
						},
						{
							"id": 403,
							"name": "overflow",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Overflow"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 108,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "stringLiteral",
										"value": "hidden"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.overflow",
								"id": 17
							}
						},
						{
							"id": 404,
							"name": "padding",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Padding applied for the global spacing variables"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 110,
									"character": 9
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeSize",
								"id": 31
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.padding",
								"id": 18
							}
						},
						{
							"id": 405,
							"name": "paddingHorizontal",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Horizontal padding applied for the global spacing variables"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 112,
									"character": 19
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeSize",
								"id": 31
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.paddingHorizontal",
								"id": 19
							}
						},
						{
							"id": 406,
							"name": "paddingVertical",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Vertical pa?dding applied for the global spacing variables"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 114,
									"character": 17
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeSize",
								"id": 31
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.paddingVertical",
								"id": 20
							}
						},
						{
							"id": 407,
							"name": "scrollable",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies overflow styling to enable/disable scrolling."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 116,
									"character": 12
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.scrollable",
								"id": 21
							}
						},
						{
							"id": 408,
							"name": "tag",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Any valid HTML or SVG element tag.",
								"tags": [
									{
										"tag": "reference",
										"text": "false\n"
									}
								]
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 122,
									"character": 5
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeAllElementTags",
								"id": 34
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.tag",
								"id": 22
							}
						},
						{
							"id": 409,
							"name": "textColor",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Text colour to be applied."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 126,
									"character": 11
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeColor",
								"id": 30
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.textColor",
								"id": 23
							}
						},
						{
							"id": 410,
							"name": "theme",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Theme applied to this element and inherited for child elements (until\na descendant theme is applied)."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 131,
									"character": 7
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeTheme",
								"id": 35
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.theme",
								"id": 24
							}
						},
						{
							"id": 411,
							"name": "width",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Fixed width applied through inline styling"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 133,
									"character": 7
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.width",
								"id": 25
							}
						},
						{
							"id": 412,
							"name": "zIndex",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "z-index number for layering elements."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 135,
									"character": 8
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "number"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.zIndex",
								"id": 26
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								389,
								390,
								391,
								392,
								393,
								394,
								395,
								396,
								397,
								398,
								399,
								400,
								401,
								402,
								388,
								403,
								404,
								405,
								406,
								407,
								408,
								409,
								410,
								411,
								412
							]
						}
					],
					"sources": [
						{
							"fileName": "src/BulletPoints/BulletPoints.tsx",
							"line": 6,
							"character": 34
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"name": "BaseProps",
							"id": 2
						}
					]
				},
				{
					"id": 413,
					"name": "BulletPoints",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "src/BulletPoints/BulletPoints.tsx",
							"line": 10,
							"character": 18
						}
					],
					"type": {
						"type": "reference",
						"name": "ForwardRefExoticComponent",
						"typeArguments": [
							{
								"type": "intersection",
								"types": [
									{
										"type": "reference",
										"name": "BulletPointsProps",
										"id": 387
									},
									{
										"type": "reflection",
										"declaration": {
											"id": 414,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {}
										}
									},
									{
										"type": "reference",
										"name": "RefAttributes",
										"typeArguments": [
											{
												"type": "reference",
												"name": "HTMLUListElement"
											}
										]
									}
								]
							}
						]
					},
					"defaultValue": " React.forwardRef<HTMLUListElement, Attributes<HTMLUListElement, BulletPointsProps>>((props, ref) => {\n  const { numbered, ...rest } = props;\n  const classes = classnames('BulletPoints', {\n    'BulletPoints--numbered': numbered,\n  });\n\n  return (\n    <Base { ...rest }\n        className={ classes }\n        ref={ ref }\n        tag=\"ul\" />\n  );\n})"
				}
			],
			"groups": [
				{
					"title": "Interfaces",
					"kind": 256,
					"children": [
						387
					]
				},
				{
					"title": "Variables",
					"kind": 32,
					"children": [
						413
					]
				}
			],
			"sources": [
				{
					"fileName": "src/BulletPoints/BulletPoints.tsx",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 415,
			"name": "\"Button/Button\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "/Users/harry/Projects/personal/preshape/src/Button/Button.tsx",
			"children": [
				{
					"id": 416,
					"name": "ButtonProps",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "Button component with a fill and outline style with a variety of colours\nfor different purposes."
					},
					"children": [
						{
							"id": 431,
							"name": "absolute",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Quick way of absolutely position to common places"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 58,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "fullscreen"
									},
									{
										"type": "stringLiteral",
										"value": "top"
									},
									{
										"type": "stringLiteral",
										"value": "top-left"
									},
									{
										"type": "stringLiteral",
										"value": "top-right"
									},
									{
										"type": "stringLiteral",
										"value": "bottom"
									},
									{
										"type": "stringLiteral",
										"value": "bottom-left"
									},
									{
										"type": "stringLiteral",
										"value": "bottom-right"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.absolute",
								"id": 3
							}
						},
						{
							"id": 417,
							"name": "active",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Retains the Button in its active state"
							},
							"sources": [
								{
									"fileName": "src/Button/Button.tsx",
									"line": 13,
									"character": 8
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							}
						},
						{
							"id": 421,
							"name": "alignChildren",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Short cut child alignment property for both alignChildrenHorizontal and\nalignChildrenVertical."
							},
							"sources": [
								{
									"fileName": "src/Flex/Flex.tsx",
									"line": 11,
									"character": 15
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "start"
									},
									{
										"type": "stringLiteral",
										"value": "middle"
									},
									{
										"type": "stringLiteral",
										"value": "end"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "FlexProps.alignChildren",
								"id": 175
							}
						},
						{
							"id": 422,
							"name": "alignChildrenHorizontal",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Horizontal alignment of children flex items."
							},
							"sources": [
								{
									"fileName": "src/Flex/Flex.tsx",
									"line": 13,
									"character": 25
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "start"
									},
									{
										"type": "stringLiteral",
										"value": "middle"
									},
									{
										"type": "stringLiteral",
										"value": "end"
									},
									{
										"type": "stringLiteral",
										"value": "around"
									},
									{
										"type": "stringLiteral",
										"value": "between"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "FlexProps.alignChildrenHorizontal",
								"id": 176
							}
						},
						{
							"id": 423,
							"name": "alignChildrenVertical",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Vertical alignment of children flex items."
							},
							"sources": [
								{
									"fileName": "src/Flex/Flex.tsx",
									"line": 15,
									"character": 23
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "start"
									},
									{
										"type": "stringLiteral",
										"value": "middle"
									},
									{
										"type": "stringLiteral",
										"value": "end"
									},
									{
										"type": "stringLiteral",
										"value": "around"
									},
									{
										"type": "stringLiteral",
										"value": "between"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "FlexProps.alignChildrenVertical",
								"id": 177
							}
						},
						{
							"id": 424,
							"name": "alignSelf",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Flex item alignment property (changes with parent direction)."
							},
							"sources": [
								{
									"fileName": "src/Flex/Flex.tsx",
									"line": 17,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "start"
									},
									{
										"type": "stringLiteral",
										"value": "middle"
									},
									{
										"type": "stringLiteral",
										"value": "end"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "FlexProps.alignSelf",
								"id": 178
							}
						},
						{
							"id": 432,
							"name": "backgroundColor",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Background colour to be applied, shades are taken from the current\ntheme."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 70,
									"character": 17
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeColor",
								"id": 30
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.backgroundColor",
								"id": 4
							}
						},
						{
							"id": 433,
							"name": "borderColor",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Border colour to be applied, shades are taken from the current\ntheme."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 75,
									"character": 13
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeColor",
								"id": 30
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.borderColor",
								"id": 5
							}
						},
						{
							"id": 434,
							"name": "borderRadius",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Adds styling of a border radius to one of the size multiples."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 79,
									"character": 14
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "x1"
									},
									{
										"type": "stringLiteral",
										"value": "x2"
									},
									{
										"type": "stringLiteral",
										"value": "x3"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.borderRadius",
								"id": 6
							}
						},
						{
							"id": 435,
							"name": "borderSize",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Thickness of the border to be applied"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 81,
									"character": 12
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "x1"
									},
									{
										"type": "stringLiteral",
										"value": "x2"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.borderSize",
								"id": 7
							}
						},
						{
							"id": 436,
							"name": "clickable",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Adds styling to indicate that the element is clickable"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 83,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.clickable",
								"id": 8
							}
						},
						{
							"id": 418,
							"name": "color",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Colour that is applied to the button to indicate the type of action",
								"tags": [
									{
										"tag": "default",
										"text": "\"accent\"\n"
									}
								]
							},
							"sources": [
								{
									"fileName": "src/Button/Button.tsx",
									"line": 19,
									"character": 7
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "accent"
									},
									{
										"type": "stringLiteral",
										"value": "negative"
									},
									{
										"type": "stringLiteral",
										"value": "positive"
									}
								]
							}
						},
						{
							"id": 437,
							"name": "container",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies relative positioning to contain child elements."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 85,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.container",
								"id": 9
							}
						},
						{
							"id": 425,
							"name": "direction",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Direction on which way to flex items."
							},
							"sources": [
								{
									"fileName": "src/Flex/Flex.tsx",
									"line": 19,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "horizontal"
									},
									{
										"type": "stringLiteral",
										"value": "vertical"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "FlexProps.direction",
								"id": 179
							}
						},
						{
							"id": 419,
							"name": "disabled",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "A styled disabled state that disables all interactions"
							},
							"sources": [
								{
									"fileName": "src/Button/Button.tsx",
									"line": 21,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							}
						},
						{
							"id": 438,
							"name": "display",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies display styling"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 87,
									"character": 9
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "block"
									},
									{
										"type": "stringLiteral",
										"value": "inline-block"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.display",
								"id": 10
							}
						},
						{
							"id": 420,
							"name": "fill",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Appies a filled in style to the button."
							},
							"sources": [
								{
									"fileName": "src/Button/Button.tsx",
									"line": 23,
									"character": 6
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							}
						},
						{
							"id": 439,
							"name": "fixed",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Quick way of absolutely position to common places"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 89,
									"character": 7
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "fullscreen"
									},
									{
										"type": "stringLiteral",
										"value": "top"
									},
									{
										"type": "stringLiteral",
										"value": "top-left"
									},
									{
										"type": "stringLiteral",
										"value": "top-right"
									},
									{
										"type": "stringLiteral",
										"value": "bottom"
									},
									{
										"type": "stringLiteral",
										"value": "bottom-left"
									},
									{
										"type": "stringLiteral",
										"value": "bottom-right"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.fixed",
								"id": 11
							}
						},
						{
							"id": 426,
							"name": "gap",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Spacing applied between child flex items, values are global spacing variables."
							},
							"sources": [
								{
									"fileName": "src/Flex/Flex.tsx",
									"line": 21,
									"character": 5
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeSize",
								"id": 31
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "FlexProps.gap",
								"id": 180
							}
						},
						{
							"id": 427,
							"name": "grow",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Flex item property if it should grow with available space."
							},
							"sources": [
								{
									"fileName": "src/Flex/Flex.tsx",
									"line": 23,
									"character": 6
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "FlexProps.grow",
								"id": 181
							}
						},
						{
							"id": 440,
							"name": "height",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Fixed height applied through inline styling"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 98,
									"character": 8
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.height",
								"id": 12
							}
						},
						{
							"id": 428,
							"name": "initial",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Initial width to flex from for a child item."
							},
							"sources": [
								{
									"fileName": "src/Flex/Flex.tsx",
									"line": 25,
									"character": 9
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "content"
									},
									{
										"type": "stringLiteral",
										"value": "container"
									},
									{
										"type": "stringLiteral",
										"value": "none"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "FlexProps.initial",
								"id": 182
							}
						},
						{
							"id": 441,
							"name": "margin",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Margins applied for the global spacing variables"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 100,
									"character": 8
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeSize",
								"id": 31
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.margin",
								"id": 13
							}
						},
						{
							"id": 442,
							"name": "maxWidth",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Max width applied through inline styling"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 102,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.maxWidth",
								"id": 14
							}
						},
						{
							"id": 443,
							"name": "minHeight",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Max height applied through inline styling"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 104,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.minHeight",
								"id": 15
							}
						},
						{
							"id": 444,
							"name": "minWidth",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Min width applied through inline style"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 106,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.minWidth",
								"id": 16
							}
						},
						{
							"id": 445,
							"name": "overflow",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Overflow"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 108,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "stringLiteral",
										"value": "hidden"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.overflow",
								"id": 17
							}
						},
						{
							"id": 446,
							"name": "padding",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Padding applied for the global spacing variables"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 110,
									"character": 9
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeSize",
								"id": 31
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.padding",
								"id": 18
							}
						},
						{
							"id": 447,
							"name": "paddingHorizontal",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Horizontal padding applied for the global spacing variables"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 112,
									"character": 19
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeSize",
								"id": 31
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.paddingHorizontal",
								"id": 19
							}
						},
						{
							"id": 448,
							"name": "paddingVertical",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Vertical pa?dding applied for the global spacing variables"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 114,
									"character": 17
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeSize",
								"id": 31
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.paddingVertical",
								"id": 20
							}
						},
						{
							"id": 449,
							"name": "scrollable",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies overflow styling to enable/disable scrolling."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 116,
									"character": 12
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.scrollable",
								"id": 21
							}
						},
						{
							"id": 429,
							"name": "shrink",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Flex item property if it should shrink."
							},
							"sources": [
								{
									"fileName": "src/Flex/Flex.tsx",
									"line": 27,
									"character": 8
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "FlexProps.shrink",
								"id": 183
							}
						},
						{
							"id": 450,
							"name": "tag",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Any valid HTML or SVG element tag.",
								"tags": [
									{
										"tag": "reference",
										"text": "false\n"
									}
								]
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 122,
									"character": 5
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeAllElementTags",
								"id": 34
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.tag",
								"id": 22
							}
						},
						{
							"id": 451,
							"name": "textColor",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Text colour to be applied."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 126,
									"character": 11
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeColor",
								"id": 30
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.textColor",
								"id": 23
							}
						},
						{
							"id": 452,
							"name": "theme",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Theme applied to this element and inherited for child elements (until\na descendant theme is applied)."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 131,
									"character": 7
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeTheme",
								"id": 35
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.theme",
								"id": 24
							}
						},
						{
							"id": 453,
							"name": "width",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Fixed width applied through inline styling"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 133,
									"character": 7
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.width",
								"id": 25
							}
						},
						{
							"id": 430,
							"name": "wrap",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Flag to allow flex items to wrap over to new lines"
							},
							"sources": [
								{
									"fileName": "src/Flex/Flex.tsx",
									"line": 29,
									"character": 6
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "FlexProps.wrap",
								"id": 184
							}
						},
						{
							"id": 454,
							"name": "zIndex",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "z-index number for layering elements."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 135,
									"character": 8
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "number"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.zIndex",
								"id": 26
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								431,
								417,
								421,
								422,
								423,
								424,
								432,
								433,
								434,
								435,
								436,
								418,
								437,
								425,
								419,
								438,
								420,
								439,
								426,
								427,
								440,
								428,
								441,
								442,
								443,
								444,
								445,
								446,
								447,
								448,
								449,
								429,
								450,
								451,
								452,
								453,
								430,
								454
							]
						}
					],
					"sources": [
						{
							"fileName": "src/Button/Button.tsx",
							"line": 11,
							"character": 28
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"name": "FlexProps",
							"id": 174
						}
					]
				},
				{
					"id": 455,
					"name": "Button",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "src/Button/Button.tsx",
							"line": 26,
							"character": 12
						}
					],
					"type": {
						"type": "reference",
						"name": "ForwardRefExoticComponent",
						"typeArguments": [
							{
								"type": "intersection",
								"types": [
									{
										"type": "reference",
										"name": "ButtonProps",
										"id": 416
									},
									{
										"type": "reflection",
										"declaration": {
											"id": 456,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {}
										}
									},
									{
										"type": "reference",
										"name": "RefAttributes",
										"typeArguments": [
											{
												"type": "reference",
												"name": "HTMLButtonElement"
											}
										]
									}
								]
							}
						]
					},
					"defaultValue": " React.forwardRef<HTMLButtonElement, Attributes<HTMLButtonElement, ButtonProps>>((props, ref) => {\n  const { active, color = 'accent', fill, ...rest } = props;\n  const classes = classnames('Button', {\n    'Button--active': active,\n    'Button--fill': fill,\n    [`Button--${color}`]: color,\n  });\n\n  return (\n    <Flex { ...rest }\n        alignChildren=\"middle\"\n        className={ classes }\n        direction=\"horizontal\"\n        grow\n        ref={ ref }\n        tag=\"button\" />\n  );\n})"
				}
			],
			"groups": [
				{
					"title": "Interfaces",
					"kind": 256,
					"children": [
						416
					]
				},
				{
					"title": "Variables",
					"kind": 32,
					"children": [
						455
					]
				}
			],
			"sources": [
				{
					"fileName": "src/Button/Button.tsx",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 457,
			"name": "\"Button/Buttons\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "/Users/harry/Projects/personal/preshape/src/Button/Buttons.tsx",
			"children": [
				{
					"id": 458,
					"name": "ButtonsProps",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "Button container component that joins or separates child components."
					},
					"children": [
						{
							"id": 470,
							"name": "absolute",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Quick way of absolutely position to common places"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 58,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "fullscreen"
									},
									{
										"type": "stringLiteral",
										"value": "top"
									},
									{
										"type": "stringLiteral",
										"value": "top-left"
									},
									{
										"type": "stringLiteral",
										"value": "top-right"
									},
									{
										"type": "stringLiteral",
										"value": "bottom"
									},
									{
										"type": "stringLiteral",
										"value": "bottom-left"
									},
									{
										"type": "stringLiteral",
										"value": "bottom-right"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.absolute",
								"id": 3
							}
						},
						{
							"id": 461,
							"name": "alignChildren",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Short cut child alignment property for both alignChildrenHorizontal and\nalignChildrenVertical."
							},
							"sources": [
								{
									"fileName": "src/Flex/Flex.tsx",
									"line": 11,
									"character": 15
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "start"
									},
									{
										"type": "stringLiteral",
										"value": "middle"
									},
									{
										"type": "stringLiteral",
										"value": "end"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "FlexProps.alignChildren",
								"id": 175
							}
						},
						{
							"id": 462,
							"name": "alignChildrenHorizontal",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Horizontal alignment of children flex items."
							},
							"sources": [
								{
									"fileName": "src/Flex/Flex.tsx",
									"line": 13,
									"character": 25
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "start"
									},
									{
										"type": "stringLiteral",
										"value": "middle"
									},
									{
										"type": "stringLiteral",
										"value": "end"
									},
									{
										"type": "stringLiteral",
										"value": "around"
									},
									{
										"type": "stringLiteral",
										"value": "between"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "FlexProps.alignChildrenHorizontal",
								"id": 176
							}
						},
						{
							"id": 463,
							"name": "alignChildrenVertical",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Vertical alignment of children flex items."
							},
							"sources": [
								{
									"fileName": "src/Flex/Flex.tsx",
									"line": 15,
									"character": 23
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "start"
									},
									{
										"type": "stringLiteral",
										"value": "middle"
									},
									{
										"type": "stringLiteral",
										"value": "end"
									},
									{
										"type": "stringLiteral",
										"value": "around"
									},
									{
										"type": "stringLiteral",
										"value": "between"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "FlexProps.alignChildrenVertical",
								"id": 177
							}
						},
						{
							"id": 464,
							"name": "alignSelf",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Flex item alignment property (changes with parent direction)."
							},
							"sources": [
								{
									"fileName": "src/Flex/Flex.tsx",
									"line": 17,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "start"
									},
									{
										"type": "stringLiteral",
										"value": "middle"
									},
									{
										"type": "stringLiteral",
										"value": "end"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "FlexProps.alignSelf",
								"id": 178
							}
						},
						{
							"id": 471,
							"name": "backgroundColor",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Background colour to be applied, shades are taken from the current\ntheme."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 70,
									"character": 17
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeColor",
								"id": 30
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.backgroundColor",
								"id": 4
							}
						},
						{
							"id": 472,
							"name": "borderColor",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Border colour to be applied, shades are taken from the current\ntheme."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 75,
									"character": 13
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeColor",
								"id": 30
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.borderColor",
								"id": 5
							}
						},
						{
							"id": 473,
							"name": "borderRadius",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Adds styling of a border radius to one of the size multiples."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 79,
									"character": 14
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "x1"
									},
									{
										"type": "stringLiteral",
										"value": "x2"
									},
									{
										"type": "stringLiteral",
										"value": "x3"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.borderRadius",
								"id": 6
							}
						},
						{
							"id": 474,
							"name": "borderSize",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Thickness of the border to be applied"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 81,
									"character": 12
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "x1"
									},
									{
										"type": "stringLiteral",
										"value": "x2"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.borderSize",
								"id": 7
							}
						},
						{
							"id": 475,
							"name": "clickable",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Adds styling to indicate that the element is clickable"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 83,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.clickable",
								"id": 8
							}
						},
						{
							"id": 476,
							"name": "container",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies relative positioning to contain child elements."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 85,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.container",
								"id": 9
							}
						},
						{
							"id": 465,
							"name": "direction",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Direction on which way to flex items."
							},
							"sources": [
								{
									"fileName": "src/Flex/Flex.tsx",
									"line": 19,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "horizontal"
									},
									{
										"type": "stringLiteral",
										"value": "vertical"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "FlexProps.direction",
								"id": 179
							}
						},
						{
							"id": 477,
							"name": "display",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies display styling"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 87,
									"character": 9
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "block"
									},
									{
										"type": "stringLiteral",
										"value": "inline-block"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.display",
								"id": 10
							}
						},
						{
							"id": 478,
							"name": "fixed",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Quick way of absolutely position to common places"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 89,
									"character": 7
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "fullscreen"
									},
									{
										"type": "stringLiteral",
										"value": "top"
									},
									{
										"type": "stringLiteral",
										"value": "top-left"
									},
									{
										"type": "stringLiteral",
										"value": "top-right"
									},
									{
										"type": "stringLiteral",
										"value": "bottom"
									},
									{
										"type": "stringLiteral",
										"value": "bottom-left"
									},
									{
										"type": "stringLiteral",
										"value": "bottom-right"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.fixed",
								"id": 11
							}
						},
						{
							"id": 459,
							"name": "gap",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Spacing applied between child Button items, values are global spacing variables.",
								"tags": [
									{
										"tag": "default",
										"text": "\"x1\"\n"
									}
								]
							},
							"sources": [
								{
									"fileName": "src/Button/Buttons.tsx",
									"line": 15,
									"character": 5
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeSize",
								"id": 31
							},
							"overwrites": {
								"type": "reference",
								"name": "FlexProps.gap",
								"id": 180
							}
						},
						{
							"id": 466,
							"name": "grow",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Flex item property if it should grow with available space."
							},
							"sources": [
								{
									"fileName": "src/Flex/Flex.tsx",
									"line": 23,
									"character": 6
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "FlexProps.grow",
								"id": 181
							}
						},
						{
							"id": 479,
							"name": "height",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Fixed height applied through inline styling"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 98,
									"character": 8
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.height",
								"id": 12
							}
						},
						{
							"id": 467,
							"name": "initial",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Initial width to flex from for a child item."
							},
							"sources": [
								{
									"fileName": "src/Flex/Flex.tsx",
									"line": 25,
									"character": 9
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "content"
									},
									{
										"type": "stringLiteral",
										"value": "container"
									},
									{
										"type": "stringLiteral",
										"value": "none"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "FlexProps.initial",
								"id": 182
							}
						},
						{
							"id": 460,
							"name": "joined",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Configures the children Buttons to be joined together."
							},
							"sources": [
								{
									"fileName": "src/Button/Buttons.tsx",
									"line": 17,
									"character": 8
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							}
						},
						{
							"id": 480,
							"name": "margin",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Margins applied for the global spacing variables"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 100,
									"character": 8
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeSize",
								"id": 31
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.margin",
								"id": 13
							}
						},
						{
							"id": 481,
							"name": "maxWidth",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Max width applied through inline styling"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 102,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.maxWidth",
								"id": 14
							}
						},
						{
							"id": 482,
							"name": "minHeight",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Max height applied through inline styling"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 104,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.minHeight",
								"id": 15
							}
						},
						{
							"id": 483,
							"name": "minWidth",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Min width applied through inline style"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 106,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.minWidth",
								"id": 16
							}
						},
						{
							"id": 484,
							"name": "overflow",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Overflow"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 108,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "stringLiteral",
										"value": "hidden"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.overflow",
								"id": 17
							}
						},
						{
							"id": 485,
							"name": "padding",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Padding applied for the global spacing variables"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 110,
									"character": 9
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeSize",
								"id": 31
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.padding",
								"id": 18
							}
						},
						{
							"id": 486,
							"name": "paddingHorizontal",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Horizontal padding applied for the global spacing variables"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 112,
									"character": 19
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeSize",
								"id": 31
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.paddingHorizontal",
								"id": 19
							}
						},
						{
							"id": 487,
							"name": "paddingVertical",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Vertical pa?dding applied for the global spacing variables"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 114,
									"character": 17
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeSize",
								"id": 31
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.paddingVertical",
								"id": 20
							}
						},
						{
							"id": 488,
							"name": "scrollable",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies overflow styling to enable/disable scrolling."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 116,
									"character": 12
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.scrollable",
								"id": 21
							}
						},
						{
							"id": 468,
							"name": "shrink",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Flex item property if it should shrink."
							},
							"sources": [
								{
									"fileName": "src/Flex/Flex.tsx",
									"line": 27,
									"character": 8
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "FlexProps.shrink",
								"id": 183
							}
						},
						{
							"id": 489,
							"name": "tag",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Any valid HTML or SVG element tag.",
								"tags": [
									{
										"tag": "reference",
										"text": "false\n"
									}
								]
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 122,
									"character": 5
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeAllElementTags",
								"id": 34
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.tag",
								"id": 22
							}
						},
						{
							"id": 490,
							"name": "textColor",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Text colour to be applied."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 126,
									"character": 11
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeColor",
								"id": 30
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.textColor",
								"id": 23
							}
						},
						{
							"id": 491,
							"name": "theme",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Theme applied to this element and inherited for child elements (until\na descendant theme is applied)."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 131,
									"character": 7
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeTheme",
								"id": 35
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.theme",
								"id": 24
							}
						},
						{
							"id": 492,
							"name": "width",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Fixed width applied through inline styling"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 133,
									"character": 7
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.width",
								"id": 25
							}
						},
						{
							"id": 469,
							"name": "wrap",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Flag to allow flex items to wrap over to new lines"
							},
							"sources": [
								{
									"fileName": "src/Flex/Flex.tsx",
									"line": 29,
									"character": 6
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "FlexProps.wrap",
								"id": 184
							}
						},
						{
							"id": 493,
							"name": "zIndex",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "z-index number for layering elements."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 135,
									"character": 8
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "number"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.zIndex",
								"id": 26
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								470,
								461,
								462,
								463,
								464,
								471,
								472,
								473,
								474,
								475,
								476,
								465,
								477,
								478,
								459,
								466,
								479,
								467,
								460,
								480,
								481,
								482,
								483,
								484,
								485,
								486,
								487,
								488,
								468,
								489,
								490,
								491,
								492,
								469,
								493
							]
						}
					],
					"sources": [
						{
							"fileName": "src/Button/Buttons.tsx",
							"line": 9,
							"character": 29
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"name": "FlexProps",
							"id": 174
						}
					]
				},
				{
					"id": 494,
					"name": "Buttons",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "src/Button/Buttons.tsx",
							"line": 20,
							"character": 13
						}
					],
					"type": {
						"type": "reference",
						"name": "ForwardRefExoticComponent",
						"typeArguments": [
							{
								"type": "intersection",
								"types": [
									{
										"type": "reference",
										"name": "ButtonsProps",
										"id": 458
									},
									{
										"type": "reflection",
										"declaration": {
											"id": 495,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {}
										}
									},
									{
										"type": "reference",
										"name": "RefAttributes",
										"typeArguments": [
											{
												"type": "reference",
												"name": "HTMLElement"
											}
										]
									}
								]
							}
						]
					},
					"defaultValue": " React.forwardRef<HTMLElement, Attributes<HTMLElement, ButtonsProps>>((props, ref) => {\n  const { gap = 'x1', joined, ...rest } = props;\n  const classes = classnames('Buttons', {\n    'Buttons--joined': joined,\n  });\n\n  return (\n    <Flex { ...rest }\n        className={ classes }\n        direction=\"horizontal\"\n        gap={ joined ? undefined : gap }\n        ref={ ref } />\n  );\n})"
				}
			],
			"groups": [
				{
					"title": "Interfaces",
					"kind": 256,
					"children": [
						458
					]
				},
				{
					"title": "Variables",
					"kind": 32,
					"children": [
						494
					]
				}
			],
			"sources": [
				{
					"fileName": "src/Button/Buttons.tsx",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 537,
			"name": "\"CheckBox/CheckBox\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "/Users/harry/Projects/personal/preshape/src/CheckBox/CheckBox.tsx",
			"children": [
				{
					"id": 538,
					"name": "CheckBoxProps",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"children": [
						{
							"id": 539,
							"name": "disabled",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "A styled disabled state that disables all interactions"
							},
							"sources": [
								{
									"fileName": "src/CheckBox/CheckBox.tsx",
									"line": 9,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							}
						},
						{
							"id": 540,
							"name": "label",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "A label that gives describes what the input is for"
							},
							"sources": [
								{
									"fileName": "src/CheckBox/CheckBox.tsx",
									"line": 11,
									"character": 7
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								539,
								540
							]
						}
					],
					"sources": [
						{
							"fileName": "src/CheckBox/CheckBox.tsx",
							"line": 7,
							"character": 30
						}
					]
				},
				{
					"id": 545,
					"name": "CheckBox",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "src/CheckBox/CheckBox.tsx",
							"line": 22,
							"character": 14
						}
					],
					"type": {
						"type": "reference",
						"name": "ForwardRefExoticComponent",
						"typeArguments": [
							{
								"type": "intersection",
								"types": [
									{
										"type": "reference",
										"name": "CheckBoxProps",
										"id": 538
									},
									{
										"type": "reflection",
										"declaration": {
											"id": 546,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {}
										}
									},
									{
										"type": "reference",
										"name": "RefAttributes",
										"typeArguments": [
											{
												"type": "reference",
												"name": "HTMLInputElement"
											}
										]
									}
								]
							}
						]
					},
					"defaultValue": " React.forwardRef<HTMLInputElement, Attributes<HTMLInputElement, CheckBoxProps>>((props, ref) => {\n  const {\n    disabled,\n    label,\n    margin,\n    padding,\n    paddingHorizontal = 'x3',\n    paddingVertical = 'x2',\n    ...rest\n  } = props;\n\n  return (\n    <SelectInputLabel\n        disabled={ disabled }\n        label={ label }\n        margin={ margin }\n        padding={ padding }\n        paddingHorizontal={ paddingHorizontal }\n        paddingVertical={ paddingVertical }>\n      <CheckBoxIndicator { ...rest }\n          disabled={ disabled }\n          ref={ ref } />\n    </SelectInputLabel>\n  );\n})"
				}
			],
			"groups": [
				{
					"title": "Interfaces",
					"kind": 256,
					"children": [
						538
					]
				},
				{
					"title": "Variables",
					"kind": 32,
					"children": [
						545
					]
				}
			],
			"sources": [
				{
					"fileName": "src/CheckBox/CheckBox.tsx",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 496,
			"name": "\"CheckBox/CheckBoxIndicator\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "/Users/harry/Projects/personal/preshape/src/CheckBox/CheckBoxIndicator.tsx",
			"children": [
				{
					"id": 497,
					"name": "CheckboxIndicator",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "src/CheckBox/CheckBoxIndicator.tsx",
							"line": 3,
							"character": 23
						}
					],
					"type": {
						"type": "reference",
						"name": "ForwardRefExoticComponent",
						"typeArguments": [
							{
								"type": "intersection",
								"types": [
									{
										"type": "reference",
										"name": "InputHTMLAttributes",
										"typeArguments": [
											{
												"type": "reference",
												"name": "HTMLInputElement"
											}
										]
									},
									{
										"type": "reference",
										"name": "RefAttributes",
										"typeArguments": [
											{
												"type": "reference",
												"name": "HTMLInputElement"
											}
										]
									}
								]
							}
						]
					},
					"defaultValue": " React.forwardRef<HTMLInputElement, React.InputHTMLAttributes<HTMLInputElement>>((props, ref) => {\n  return (\n    <div className=\"CheckBox\">\n      <input { ...props }\n          className=\"CheckBox__input\"\n          ref={ ref }\n          type=\"checkbox\" />\n      <div className=\"CheckBox__indicator\" />\n    </div>\n  );\n})"
				}
			],
			"groups": [
				{
					"title": "Variables",
					"kind": 32,
					"children": [
						497
					]
				}
			],
			"sources": [
				{
					"fileName": "src/CheckBox/CheckBoxIndicator.tsx",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 547,
			"name": "\"Code/Code\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "/Users/harry/Projects/personal/preshape/src/Code/Code.tsx",
			"children": [
				{
					"id": 548,
					"name": "CodeProps",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"children": [
						{
							"id": 563,
							"name": "absolute",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Quick way of absolutely position to common places"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 58,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "fullscreen"
									},
									{
										"type": "stringLiteral",
										"value": "top"
									},
									{
										"type": "stringLiteral",
										"value": "top-left"
									},
									{
										"type": "stringLiteral",
										"value": "top-right"
									},
									{
										"type": "stringLiteral",
										"value": "bottom"
									},
									{
										"type": "stringLiteral",
										"value": "bottom-left"
									},
									{
										"type": "stringLiteral",
										"value": "bottom-right"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.absolute",
								"id": 3
							}
						},
						{
							"id": 549,
							"name": "align",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Text alignment"
							},
							"sources": [
								{
									"fileName": "src/Text/Text.tsx",
									"line": 32,
									"character": 7
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "start"
									},
									{
										"type": "stringLiteral",
										"value": "middle"
									},
									{
										"type": "stringLiteral",
										"value": "end"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TextProps.align",
								"id": 266
							}
						},
						{
							"id": 564,
							"name": "backgroundColor",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Background colour to be applied, shades are taken from the current\ntheme."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 70,
									"character": 17
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeColor",
								"id": 30
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.backgroundColor",
								"id": 4
							}
						},
						{
							"id": 565,
							"name": "borderColor",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Border colour to be applied, shades are taken from the current\ntheme."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 75,
									"character": 13
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeColor",
								"id": 30
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.borderColor",
								"id": 5
							}
						},
						{
							"id": 566,
							"name": "borderRadius",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Adds styling of a border radius to one of the size multiples."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 79,
									"character": 14
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "x1"
									},
									{
										"type": "stringLiteral",
										"value": "x2"
									},
									{
										"type": "stringLiteral",
										"value": "x3"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.borderRadius",
								"id": 6
							}
						},
						{
							"id": 567,
							"name": "borderSize",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Thickness of the border to be applied"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 81,
									"character": 12
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "x1"
									},
									{
										"type": "stringLiteral",
										"value": "x2"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.borderSize",
								"id": 7
							}
						},
						{
							"id": 550,
							"name": "breakOn",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "How the block of text should break onto new lines."
							},
							"sources": [
								{
									"fileName": "src/Text/Text.tsx",
									"line": 34,
									"character": 9
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "all"
									},
									{
										"type": "stringLiteral",
										"value": "none"
									},
									{
										"type": "stringLiteral",
										"value": "word"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TextProps.breakOn",
								"id": 267
							}
						},
						{
							"id": 568,
							"name": "clickable",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Adds styling to indicate that the element is clickable"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 83,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.clickable",
								"id": 8
							}
						},
						{
							"id": 569,
							"name": "container",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies relative positioning to contain child elements."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 85,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.container",
								"id": 9
							}
						},
						{
							"id": 570,
							"name": "display",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies display styling"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 87,
									"character": 9
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "block"
									},
									{
										"type": "stringLiteral",
										"value": "inline-block"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.display",
								"id": 10
							}
						},
						{
							"id": 551,
							"name": "ellipsis",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Replaces the overflow of text with the ellipsis character"
							},
							"sources": [
								{
									"fileName": "src/Text/Text.tsx",
									"line": 36,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TextProps.ellipsis",
								"id": 268
							}
						},
						{
							"id": 552,
							"name": "emphasis",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies emphasis styling"
							},
							"sources": [
								{
									"fileName": "src/Text/Text.tsx",
									"line": 38,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TextProps.emphasis",
								"id": 269
							}
						},
						{
							"id": 571,
							"name": "fixed",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Quick way of absolutely position to common places"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 89,
									"character": 7
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "fullscreen"
									},
									{
										"type": "stringLiteral",
										"value": "top"
									},
									{
										"type": "stringLiteral",
										"value": "top-left"
									},
									{
										"type": "stringLiteral",
										"value": "top-right"
									},
									{
										"type": "stringLiteral",
										"value": "bottom"
									},
									{
										"type": "stringLiteral",
										"value": "bottom-left"
									},
									{
										"type": "stringLiteral",
										"value": "bottom-right"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.fixed",
								"id": 11
							}
						},
						{
							"id": 553,
							"name": "heading",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies a heading font family style"
							},
							"sources": [
								{
									"fileName": "src/Text/Text.tsx",
									"line": 40,
									"character": 9
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TextProps.heading",
								"id": 270
							}
						},
						{
							"id": 572,
							"name": "height",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Fixed height applied through inline styling"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 98,
									"character": 8
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.height",
								"id": 12
							}
						},
						{
							"id": 554,
							"name": "inline",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Text default to block display, this will apply inline display."
							},
							"sources": [
								{
									"fileName": "src/Text/Text.tsx",
									"line": 42,
									"character": 8
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TextProps.inline",
								"id": 271
							}
						},
						{
							"id": 573,
							"name": "margin",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Margins applied for the global spacing variables"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 100,
									"character": 8
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeSize",
								"id": 31
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.margin",
								"id": 13
							}
						},
						{
							"id": 574,
							"name": "maxWidth",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Max width applied through inline styling"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 102,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.maxWidth",
								"id": 14
							}
						},
						{
							"id": 575,
							"name": "minHeight",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Max height applied through inline styling"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 104,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.minHeight",
								"id": 15
							}
						},
						{
							"id": 576,
							"name": "minWidth",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Min width applied through inline style"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 106,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.minWidth",
								"id": 16
							}
						},
						{
							"id": 555,
							"name": "monospace",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies a monospace font family style"
							},
							"sources": [
								{
									"fileName": "src/Text/Text.tsx",
									"line": 44,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TextProps.monospace",
								"id": 272
							}
						},
						{
							"id": 577,
							"name": "overflow",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Overflow"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 108,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "stringLiteral",
										"value": "hidden"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.overflow",
								"id": 17
							}
						},
						{
							"id": 578,
							"name": "padding",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Padding applied for the global spacing variables"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 110,
									"character": 9
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeSize",
								"id": 31
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.padding",
								"id": 18
							}
						},
						{
							"id": 579,
							"name": "paddingHorizontal",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Horizontal padding applied for the global spacing variables"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 112,
									"character": 19
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeSize",
								"id": 31
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.paddingHorizontal",
								"id": 19
							}
						},
						{
							"id": 580,
							"name": "paddingVertical",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Vertical pa?dding applied for the global spacing variables"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 114,
									"character": 17
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeSize",
								"id": 31
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.paddingVertical",
								"id": 20
							}
						},
						{
							"id": 581,
							"name": "scrollable",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies overflow styling to enable/disable scrolling."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 116,
									"character": 12
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.scrollable",
								"id": 21
							}
						},
						{
							"id": 556,
							"name": "size",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Size of the text"
							},
							"sources": [
								{
									"fileName": "src/Text/Text.tsx",
									"line": 46,
									"character": 6
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeTextSize",
								"id": 304
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TextProps.size",
								"id": 273
							}
						},
						{
							"id": 557,
							"name": "strong",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies strong weight styling"
							},
							"sources": [
								{
									"fileName": "src/Text/Text.tsx",
									"line": 48,
									"character": 8
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TextProps.strong",
								"id": 274
							}
						},
						{
							"id": 558,
							"name": "subscript",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies subscript baseline styling"
							},
							"sources": [
								{
									"fileName": "src/Text/Text.tsx",
									"line": 50,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TextProps.subscript",
								"id": 275
							}
						},
						{
							"id": 559,
							"name": "superscript",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies superscript baseline styling"
							},
							"sources": [
								{
									"fileName": "src/Text/Text.tsx",
									"line": 52,
									"character": 13
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TextProps.superscript",
								"id": 276
							}
						},
						{
							"id": 582,
							"name": "tag",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Any valid HTML or SVG element tag.",
								"tags": [
									{
										"tag": "reference",
										"text": "false\n"
									}
								]
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 122,
									"character": 5
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeAllElementTags",
								"id": 34
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.tag",
								"id": 22
							}
						},
						{
							"id": 583,
							"name": "textColor",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Text colour to be applied."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 126,
									"character": 11
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeColor",
								"id": 30
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.textColor",
								"id": 23
							}
						},
						{
							"id": 584,
							"name": "theme",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Theme applied to this element and inherited for child elements (until\na descendant theme is applied)."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 131,
									"character": 7
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeTheme",
								"id": 35
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.theme",
								"id": 24
							}
						},
						{
							"id": 560,
							"name": "titlecase",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies title casing styling"
							},
							"sources": [
								{
									"fileName": "src/Text/Text.tsx",
									"line": 54,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TextProps.titlecase",
								"id": 277
							}
						},
						{
							"id": 561,
							"name": "uppercase",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies uppercasing styling"
							},
							"sources": [
								{
									"fileName": "src/Text/Text.tsx",
									"line": 56,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TextProps.uppercase",
								"id": 278
							}
						},
						{
							"id": 562,
							"name": "weak",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies weak weight styling"
							},
							"sources": [
								{
									"fileName": "src/Text/Text.tsx",
									"line": 58,
									"character": 6
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TextProps.weak",
								"id": 279
							}
						},
						{
							"id": 585,
							"name": "width",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Fixed width applied through inline styling"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 133,
									"character": 7
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.width",
								"id": 25
							}
						},
						{
							"id": 586,
							"name": "zIndex",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "z-index number for layering elements."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 135,
									"character": 8
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "number"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.zIndex",
								"id": 26
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								563,
								549,
								564,
								565,
								566,
								567,
								550,
								568,
								569,
								570,
								551,
								552,
								571,
								553,
								572,
								554,
								573,
								574,
								575,
								576,
								555,
								577,
								578,
								579,
								580,
								581,
								556,
								557,
								558,
								559,
								582,
								583,
								584,
								560,
								561,
								562,
								585,
								586
							]
						}
					],
					"sources": [
						{
							"fileName": "src/Code/Code.tsx",
							"line": 5,
							"character": 26
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"name": "TextProps",
							"id": 265
						}
					]
				},
				{
					"id": 587,
					"name": "Code",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "src/Code/Code.tsx",
							"line": 7,
							"character": 10
						}
					],
					"type": {
						"type": "reference",
						"name": "ForwardRefExoticComponent",
						"typeArguments": [
							{
								"type": "intersection",
								"types": [
									{
										"type": "reference",
										"name": "CodeProps",
										"id": 548
									},
									{
										"type": "reflection",
										"declaration": {
											"id": 588,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {}
										}
									},
									{
										"type": "reference",
										"name": "RefAttributes",
										"typeArguments": [
											{
												"type": "reference",
												"name": "HTMLElement"
											}
										]
									}
								]
							}
						]
					},
					"defaultValue": " React.forwardRef<HTMLElement, Attributes<HTMLElement, CodeProps>>((props, ref) => {\n  return (\n    <Text { ...props }\n        monospace\n        ref={ ref }\n        tag=\"code\" />\n  );\n})"
				}
			],
			"groups": [
				{
					"title": "Interfaces",
					"kind": 256,
					"children": [
						548
					]
				},
				{
					"title": "Variables",
					"kind": 32,
					"children": [
						587
					]
				}
			],
			"sources": [
				{
					"fileName": "src/Code/Code.tsx",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 589,
			"name": "\"Code/CodeBlock\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "/Users/harry/Projects/personal/preshape/src/Code/CodeBlock.tsx",
			"children": [
				{
					"id": 590,
					"name": "CodeBlockProps",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"children": [
						{
							"id": 608,
							"name": "absolute",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Quick way of absolutely position to common places"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 58,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "fullscreen"
									},
									{
										"type": "stringLiteral",
										"value": "top"
									},
									{
										"type": "stringLiteral",
										"value": "top-left"
									},
									{
										"type": "stringLiteral",
										"value": "top-right"
									},
									{
										"type": "stringLiteral",
										"value": "bottom"
									},
									{
										"type": "stringLiteral",
										"value": "bottom-left"
									},
									{
										"type": "stringLiteral",
										"value": "bottom-right"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.absolute",
								"id": 3
							}
						},
						{
							"id": 594,
							"name": "align",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Text alignment"
							},
							"sources": [
								{
									"fileName": "src/Text/Text.tsx",
									"line": 32,
									"character": 7
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "start"
									},
									{
										"type": "stringLiteral",
										"value": "middle"
									},
									{
										"type": "stringLiteral",
										"value": "end"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TextProps.align",
								"id": 266
							}
						},
						{
							"id": 609,
							"name": "backgroundColor",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Background colour to be applied, shades are taken from the current\ntheme."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 70,
									"character": 17
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeColor",
								"id": 30
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.backgroundColor",
								"id": 4
							}
						},
						{
							"id": 610,
							"name": "borderColor",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Border colour to be applied, shades are taken from the current\ntheme."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 75,
									"character": 13
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeColor",
								"id": 30
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.borderColor",
								"id": 5
							}
						},
						{
							"id": 611,
							"name": "borderRadius",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Adds styling of a border radius to one of the size multiples."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 79,
									"character": 14
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "x1"
									},
									{
										"type": "stringLiteral",
										"value": "x2"
									},
									{
										"type": "stringLiteral",
										"value": "x3"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.borderRadius",
								"id": 6
							}
						},
						{
							"id": 612,
							"name": "borderSize",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Thickness of the border to be applied"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 81,
									"character": 12
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "x1"
									},
									{
										"type": "stringLiteral",
										"value": "x2"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.borderSize",
								"id": 7
							}
						},
						{
							"id": 595,
							"name": "breakOn",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "How the block of text should break onto new lines."
							},
							"sources": [
								{
									"fileName": "src/Text/Text.tsx",
									"line": 34,
									"character": 9
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "all"
									},
									{
										"type": "stringLiteral",
										"value": "none"
									},
									{
										"type": "stringLiteral",
										"value": "word"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TextProps.breakOn",
								"id": 267
							}
						},
						{
							"id": 591,
							"name": "children",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/Code/CodeBlock.tsx",
									"line": 13,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							}
						},
						{
							"id": 613,
							"name": "clickable",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Adds styling to indicate that the element is clickable"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 83,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.clickable",
								"id": 8
							}
						},
						{
							"id": 614,
							"name": "container",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies relative positioning to contain child elements."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 85,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.container",
								"id": 9
							}
						},
						{
							"id": 615,
							"name": "display",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies display styling"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 87,
									"character": 9
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "block"
									},
									{
										"type": "stringLiteral",
										"value": "inline-block"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.display",
								"id": 10
							}
						},
						{
							"id": 596,
							"name": "ellipsis",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Replaces the overflow of text with the ellipsis character"
							},
							"sources": [
								{
									"fileName": "src/Text/Text.tsx",
									"line": 36,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TextProps.ellipsis",
								"id": 268
							}
						},
						{
							"id": 597,
							"name": "emphasis",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies emphasis styling"
							},
							"sources": [
								{
									"fileName": "src/Text/Text.tsx",
									"line": 38,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TextProps.emphasis",
								"id": 269
							}
						},
						{
							"id": 616,
							"name": "fixed",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Quick way of absolutely position to common places"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 89,
									"character": 7
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "fullscreen"
									},
									{
										"type": "stringLiteral",
										"value": "top"
									},
									{
										"type": "stringLiteral",
										"value": "top-left"
									},
									{
										"type": "stringLiteral",
										"value": "top-right"
									},
									{
										"type": "stringLiteral",
										"value": "bottom"
									},
									{
										"type": "stringLiteral",
										"value": "bottom-left"
									},
									{
										"type": "stringLiteral",
										"value": "bottom-right"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.fixed",
								"id": 11
							}
						},
						{
							"id": 598,
							"name": "heading",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies a heading font family style"
							},
							"sources": [
								{
									"fileName": "src/Text/Text.tsx",
									"line": 40,
									"character": 9
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TextProps.heading",
								"id": 270
							}
						},
						{
							"id": 617,
							"name": "height",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Fixed height applied through inline styling"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 98,
									"character": 8
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.height",
								"id": 12
							}
						},
						{
							"id": 599,
							"name": "inline",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Text default to block display, this will apply inline display."
							},
							"sources": [
								{
									"fileName": "src/Text/Text.tsx",
									"line": 42,
									"character": 8
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TextProps.inline",
								"id": 271
							}
						},
						{
							"id": 592,
							"name": "language",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/Code/CodeBlock.tsx",
									"line": 14,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "stringLiteral",
										"value": "css"
									},
									{
										"type": "stringLiteral",
										"value": "html"
									},
									{
										"type": "stringLiteral",
										"value": "javascript"
									},
									{
										"type": "stringLiteral",
										"value": "js"
									},
									{
										"type": "stringLiteral",
										"value": "jsx"
									},
									{
										"type": "stringLiteral",
										"value": "json"
									}
								]
							}
						},
						{
							"id": 618,
							"name": "margin",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Margins applied for the global spacing variables"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 100,
									"character": 8
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeSize",
								"id": 31
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.margin",
								"id": 13
							}
						},
						{
							"id": 619,
							"name": "maxWidth",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Max width applied through inline styling"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 102,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.maxWidth",
								"id": 14
							}
						},
						{
							"id": 620,
							"name": "minHeight",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Max height applied through inline styling"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 104,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.minHeight",
								"id": 15
							}
						},
						{
							"id": 621,
							"name": "minWidth",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Min width applied through inline style"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 106,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.minWidth",
								"id": 16
							}
						},
						{
							"id": 600,
							"name": "monospace",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies a monospace font family style"
							},
							"sources": [
								{
									"fileName": "src/Text/Text.tsx",
									"line": 44,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TextProps.monospace",
								"id": 272
							}
						},
						{
							"id": 622,
							"name": "overflow",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Overflow"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 108,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "stringLiteral",
										"value": "hidden"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.overflow",
								"id": 17
							}
						},
						{
							"id": 623,
							"name": "padding",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Padding applied for the global spacing variables"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 110,
									"character": 9
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeSize",
								"id": 31
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.padding",
								"id": 18
							}
						},
						{
							"id": 624,
							"name": "paddingHorizontal",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Horizontal padding applied for the global spacing variables"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 112,
									"character": 19
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeSize",
								"id": 31
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.paddingHorizontal",
								"id": 19
							}
						},
						{
							"id": 625,
							"name": "paddingVertical",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Vertical pa?dding applied for the global spacing variables"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 114,
									"character": 17
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeSize",
								"id": 31
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.paddingVertical",
								"id": 20
							}
						},
						{
							"id": 626,
							"name": "scrollable",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies overflow styling to enable/disable scrolling."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 116,
									"character": 12
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.scrollable",
								"id": 21
							}
						},
						{
							"id": 601,
							"name": "size",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Size of the text"
							},
							"sources": [
								{
									"fileName": "src/Text/Text.tsx",
									"line": 46,
									"character": 6
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeTextSize",
								"id": 304
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TextProps.size",
								"id": 273
							}
						},
						{
							"id": 602,
							"name": "strong",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies strong weight styling"
							},
							"sources": [
								{
									"fileName": "src/Text/Text.tsx",
									"line": 48,
									"character": 8
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TextProps.strong",
								"id": 274
							}
						},
						{
							"id": 603,
							"name": "subscript",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies subscript baseline styling"
							},
							"sources": [
								{
									"fileName": "src/Text/Text.tsx",
									"line": 50,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TextProps.subscript",
								"id": 275
							}
						},
						{
							"id": 604,
							"name": "superscript",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies superscript baseline styling"
							},
							"sources": [
								{
									"fileName": "src/Text/Text.tsx",
									"line": 52,
									"character": 13
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TextProps.superscript",
								"id": 276
							}
						},
						{
							"id": 627,
							"name": "tag",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Any valid HTML or SVG element tag.",
								"tags": [
									{
										"tag": "reference",
										"text": "false\n"
									}
								]
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 122,
									"character": 5
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeAllElementTags",
								"id": 34
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.tag",
								"id": 22
							}
						},
						{
							"id": 628,
							"name": "textColor",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Text colour to be applied."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 126,
									"character": 11
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeColor",
								"id": 30
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.textColor",
								"id": 23
							}
						},
						{
							"id": 629,
							"name": "theme",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Theme applied to this element and inherited for child elements (until\na descendant theme is applied)."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 131,
									"character": 7
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeTheme",
								"id": 35
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.theme",
								"id": 24
							}
						},
						{
							"id": 605,
							"name": "titlecase",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies title casing styling"
							},
							"sources": [
								{
									"fileName": "src/Text/Text.tsx",
									"line": 54,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TextProps.titlecase",
								"id": 277
							}
						},
						{
							"id": 606,
							"name": "uppercase",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies uppercasing styling"
							},
							"sources": [
								{
									"fileName": "src/Text/Text.tsx",
									"line": 56,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TextProps.uppercase",
								"id": 278
							}
						},
						{
							"id": 607,
							"name": "weak",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies weak weight styling"
							},
							"sources": [
								{
									"fileName": "src/Text/Text.tsx",
									"line": 58,
									"character": 6
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TextProps.weak",
								"id": 279
							}
						},
						{
							"id": 630,
							"name": "width",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Fixed width applied through inline styling"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 133,
									"character": 7
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.width",
								"id": 25
							}
						},
						{
							"id": 593,
							"name": "wrap",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/Code/CodeBlock.tsx",
									"line": 22,
									"character": 6
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							}
						},
						{
							"id": 631,
							"name": "zIndex",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "z-index number for layering elements."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 135,
									"character": 8
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "number"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.zIndex",
								"id": 26
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								608,
								594,
								609,
								610,
								611,
								612,
								595,
								591,
								613,
								614,
								615,
								596,
								597,
								616,
								598,
								617,
								599,
								592,
								618,
								619,
								620,
								621,
								600,
								622,
								623,
								624,
								625,
								626,
								601,
								602,
								603,
								604,
								627,
								628,
								629,
								605,
								606,
								607,
								630,
								593,
								631
							]
						}
					],
					"sources": [
						{
							"fileName": "src/Code/CodeBlock.tsx",
							"line": 12,
							"character": 31
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"name": "TextProps",
							"id": 265
						}
					]
				},
				{
					"id": 632,
					"name": "CodeBlock",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "src/Code/CodeBlock.tsx",
							"line": 25,
							"character": 15
						}
					],
					"type": {
						"type": "reference",
						"name": "ForwardRefExoticComponent",
						"typeArguments": [
							{
								"type": "intersection",
								"types": [
									{
										"type": "reference",
										"name": "CodeBlockProps",
										"id": 590
									},
									{
										"type": "reflection",
										"declaration": {
											"id": 633,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {}
										}
									},
									{
										"type": "reference",
										"name": "RefAttributes",
										"typeArguments": [
											{
												"type": "reference",
												"name": "HTMLPreElement"
											}
										]
									}
								]
							}
						]
					},
					"defaultValue": " React.forwardRef<HTMLPreElement, Attributes<HTMLPreElement, CodeBlockProps>>((props, ref) => {\n  const { children, language, wrap, ...rest } = props;\n  const classes = classnames('CodeBlock', {\n    'CodeBlock--wrap': wrap,\n    [`language-${language}`]: language,\n  });\n\n  let content = children;\n\n  if (language && children) {\n    content = Prism.highlight(children, Prism.languages[language], language);\n  }\n\n  return (\n    <Text { ...rest }\n        className={ classes }\n        ref={ ref }\n        tag=\"pre\">\n      { language ? (\n        <Code dangerouslySetInnerHTML={ { __html: content as string } } />\n      ) : (\n        <Code>{ content }</Code>\n      ) }\n    </Text>\n  );\n})"
				}
			],
			"groups": [
				{
					"title": "Interfaces",
					"kind": 256,
					"children": [
						590
					]
				},
				{
					"title": "Variables",
					"kind": 32,
					"children": [
						632
					]
				}
			],
			"sources": [
				{
					"fileName": "src/Code/CodeBlock.tsx",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 173,
			"name": "\"Flex/Flex\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "/Users/harry/Projects/personal/preshape/src/Flex/Flex.tsx",
			"children": [
				{
					"id": 174,
					"name": "FlexProps",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"children": [
						{
							"id": 185,
							"name": "absolute",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Quick way of absolutely position to common places"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 58,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "fullscreen"
									},
									{
										"type": "stringLiteral",
										"value": "top"
									},
									{
										"type": "stringLiteral",
										"value": "top-left"
									},
									{
										"type": "stringLiteral",
										"value": "top-right"
									},
									{
										"type": "stringLiteral",
										"value": "bottom"
									},
									{
										"type": "stringLiteral",
										"value": "bottom-left"
									},
									{
										"type": "stringLiteral",
										"value": "bottom-right"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.absolute",
								"id": 3
							}
						},
						{
							"id": 175,
							"name": "alignChildren",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Short cut child alignment property for both alignChildrenHorizontal and\nalignChildrenVertical."
							},
							"sources": [
								{
									"fileName": "src/Flex/Flex.tsx",
									"line": 11,
									"character": 15
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "start"
									},
									{
										"type": "stringLiteral",
										"value": "middle"
									},
									{
										"type": "stringLiteral",
										"value": "end"
									}
								]
							}
						},
						{
							"id": 176,
							"name": "alignChildrenHorizontal",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Horizontal alignment of children flex items."
							},
							"sources": [
								{
									"fileName": "src/Flex/Flex.tsx",
									"line": 13,
									"character": 25
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "start"
									},
									{
										"type": "stringLiteral",
										"value": "middle"
									},
									{
										"type": "stringLiteral",
										"value": "end"
									},
									{
										"type": "stringLiteral",
										"value": "around"
									},
									{
										"type": "stringLiteral",
										"value": "between"
									}
								]
							}
						},
						{
							"id": 177,
							"name": "alignChildrenVertical",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Vertical alignment of children flex items."
							},
							"sources": [
								{
									"fileName": "src/Flex/Flex.tsx",
									"line": 15,
									"character": 23
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "start"
									},
									{
										"type": "stringLiteral",
										"value": "middle"
									},
									{
										"type": "stringLiteral",
										"value": "end"
									},
									{
										"type": "stringLiteral",
										"value": "around"
									},
									{
										"type": "stringLiteral",
										"value": "between"
									}
								]
							}
						},
						{
							"id": 178,
							"name": "alignSelf",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Flex item alignment property (changes with parent direction)."
							},
							"sources": [
								{
									"fileName": "src/Flex/Flex.tsx",
									"line": 17,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "start"
									},
									{
										"type": "stringLiteral",
										"value": "middle"
									},
									{
										"type": "stringLiteral",
										"value": "end"
									}
								]
							}
						},
						{
							"id": 186,
							"name": "backgroundColor",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Background colour to be applied, shades are taken from the current\ntheme."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 70,
									"character": 17
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeColor",
								"id": 30
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.backgroundColor",
								"id": 4
							}
						},
						{
							"id": 187,
							"name": "borderColor",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Border colour to be applied, shades are taken from the current\ntheme."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 75,
									"character": 13
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeColor",
								"id": 30
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.borderColor",
								"id": 5
							}
						},
						{
							"id": 188,
							"name": "borderRadius",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Adds styling of a border radius to one of the size multiples."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 79,
									"character": 14
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "x1"
									},
									{
										"type": "stringLiteral",
										"value": "x2"
									},
									{
										"type": "stringLiteral",
										"value": "x3"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.borderRadius",
								"id": 6
							}
						},
						{
							"id": 189,
							"name": "borderSize",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Thickness of the border to be applied"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 81,
									"character": 12
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "x1"
									},
									{
										"type": "stringLiteral",
										"value": "x2"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.borderSize",
								"id": 7
							}
						},
						{
							"id": 190,
							"name": "clickable",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Adds styling to indicate that the element is clickable"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 83,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.clickable",
								"id": 8
							}
						},
						{
							"id": 191,
							"name": "container",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies relative positioning to contain child elements."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 85,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.container",
								"id": 9
							}
						},
						{
							"id": 179,
							"name": "direction",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Direction on which way to flex items."
							},
							"sources": [
								{
									"fileName": "src/Flex/Flex.tsx",
									"line": 19,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "horizontal"
									},
									{
										"type": "stringLiteral",
										"value": "vertical"
									}
								]
							}
						},
						{
							"id": 192,
							"name": "display",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies display styling"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 87,
									"character": 9
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "block"
									},
									{
										"type": "stringLiteral",
										"value": "inline-block"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.display",
								"id": 10
							}
						},
						{
							"id": 193,
							"name": "fixed",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Quick way of absolutely position to common places"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 89,
									"character": 7
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "fullscreen"
									},
									{
										"type": "stringLiteral",
										"value": "top"
									},
									{
										"type": "stringLiteral",
										"value": "top-left"
									},
									{
										"type": "stringLiteral",
										"value": "top-right"
									},
									{
										"type": "stringLiteral",
										"value": "bottom"
									},
									{
										"type": "stringLiteral",
										"value": "bottom-left"
									},
									{
										"type": "stringLiteral",
										"value": "bottom-right"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.fixed",
								"id": 11
							}
						},
						{
							"id": 180,
							"name": "gap",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Spacing applied between child flex items, values are global spacing variables."
							},
							"sources": [
								{
									"fileName": "src/Flex/Flex.tsx",
									"line": 21,
									"character": 5
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeSize",
								"id": 31
							}
						},
						{
							"id": 181,
							"name": "grow",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Flex item property if it should grow with available space."
							},
							"sources": [
								{
									"fileName": "src/Flex/Flex.tsx",
									"line": 23,
									"character": 6
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							}
						},
						{
							"id": 194,
							"name": "height",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Fixed height applied through inline styling"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 98,
									"character": 8
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.height",
								"id": 12
							}
						},
						{
							"id": 182,
							"name": "initial",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Initial width to flex from for a child item."
							},
							"sources": [
								{
									"fileName": "src/Flex/Flex.tsx",
									"line": 25,
									"character": 9
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "content"
									},
									{
										"type": "stringLiteral",
										"value": "container"
									},
									{
										"type": "stringLiteral",
										"value": "none"
									}
								]
							}
						},
						{
							"id": 195,
							"name": "margin",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Margins applied for the global spacing variables"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 100,
									"character": 8
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeSize",
								"id": 31
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.margin",
								"id": 13
							}
						},
						{
							"id": 196,
							"name": "maxWidth",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Max width applied through inline styling"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 102,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.maxWidth",
								"id": 14
							}
						},
						{
							"id": 197,
							"name": "minHeight",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Max height applied through inline styling"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 104,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.minHeight",
								"id": 15
							}
						},
						{
							"id": 198,
							"name": "minWidth",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Min width applied through inline style"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 106,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.minWidth",
								"id": 16
							}
						},
						{
							"id": 199,
							"name": "overflow",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Overflow"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 108,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "stringLiteral",
										"value": "hidden"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.overflow",
								"id": 17
							}
						},
						{
							"id": 200,
							"name": "padding",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Padding applied for the global spacing variables"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 110,
									"character": 9
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeSize",
								"id": 31
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.padding",
								"id": 18
							}
						},
						{
							"id": 201,
							"name": "paddingHorizontal",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Horizontal padding applied for the global spacing variables"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 112,
									"character": 19
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeSize",
								"id": 31
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.paddingHorizontal",
								"id": 19
							}
						},
						{
							"id": 202,
							"name": "paddingVertical",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Vertical pa?dding applied for the global spacing variables"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 114,
									"character": 17
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeSize",
								"id": 31
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.paddingVertical",
								"id": 20
							}
						},
						{
							"id": 203,
							"name": "scrollable",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies overflow styling to enable/disable scrolling."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 116,
									"character": 12
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.scrollable",
								"id": 21
							}
						},
						{
							"id": 183,
							"name": "shrink",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Flex item property if it should shrink."
							},
							"sources": [
								{
									"fileName": "src/Flex/Flex.tsx",
									"line": 27,
									"character": 8
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							}
						},
						{
							"id": 204,
							"name": "tag",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Any valid HTML or SVG element tag.",
								"tags": [
									{
										"tag": "reference",
										"text": "false\n"
									}
								]
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 122,
									"character": 5
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeAllElementTags",
								"id": 34
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.tag",
								"id": 22
							}
						},
						{
							"id": 205,
							"name": "textColor",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Text colour to be applied."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 126,
									"character": 11
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeColor",
								"id": 30
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.textColor",
								"id": 23
							}
						},
						{
							"id": 206,
							"name": "theme",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Theme applied to this element and inherited for child elements (until\na descendant theme is applied)."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 131,
									"character": 7
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeTheme",
								"id": 35
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.theme",
								"id": 24
							}
						},
						{
							"id": 207,
							"name": "width",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Fixed width applied through inline styling"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 133,
									"character": 7
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.width",
								"id": 25
							}
						},
						{
							"id": 184,
							"name": "wrap",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Flag to allow flex items to wrap over to new lines"
							},
							"sources": [
								{
									"fileName": "src/Flex/Flex.tsx",
									"line": 29,
									"character": 6
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							}
						},
						{
							"id": 208,
							"name": "zIndex",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "z-index number for layering elements."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 135,
									"character": 8
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "number"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.zIndex",
								"id": 26
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								185,
								175,
								176,
								177,
								178,
								186,
								187,
								188,
								189,
								190,
								191,
								179,
								192,
								193,
								180,
								181,
								194,
								182,
								195,
								196,
								197,
								198,
								199,
								200,
								201,
								202,
								203,
								183,
								204,
								205,
								206,
								207,
								184,
								208
							]
						}
					],
					"sources": [
						{
							"fileName": "src/Flex/Flex.tsx",
							"line": 6,
							"character": 26
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"name": "BaseProps",
							"id": 2
						}
					],
					"extendedBy": [
						{
							"type": "reference",
							"name": "AppearProps",
							"id": 212
						},
						{
							"type": "reference",
							"name": "ButtonProps",
							"id": 416
						},
						{
							"type": "reference",
							"name": "ButtonsProps",
							"id": 458
						},
						{
							"type": "reference",
							"name": "SelectInputLabelProps",
							"id": 499
						},
						{
							"type": "reference",
							"name": "GridProps",
							"id": 663
						},
						{
							"type": "reference",
							"name": "GridItemProps",
							"id": 706
						},
						{
							"type": "reference",
							"name": "InputLabelProps",
							"id": 845
						},
						{
							"type": "reference",
							"name": "ListProps",
							"id": 1050
						},
						{
							"type": "reference",
							"name": "ListItemProps",
							"id": 1088
						},
						{
							"type": "reference",
							"name": "PlacementContentProps",
							"id": 1192
						},
						{
							"type": "reference",
							"name": "TabContentProps",
							"id": 1339
						},
						{
							"type": "reference",
							"name": "TabsProps",
							"id": 1377
						}
					]
				},
				{
					"id": 209,
					"name": "Flex",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "src/Flex/Flex.tsx",
							"line": 33,
							"character": 10
						}
					],
					"type": {
						"type": "reference",
						"name": "ForwardRefExoticComponent",
						"typeArguments": [
							{
								"type": "intersection",
								"types": [
									{
										"type": "reference",
										"name": "FlexProps",
										"id": 174
									},
									{
										"type": "reflection",
										"declaration": {
											"id": 210,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {}
										}
									},
									{
										"type": "reference",
										"name": "RefAttributes",
										"typeArguments": [
											{
												"type": "reference",
												"name": "HTMLElement"
											}
										]
									}
								]
							}
						]
					},
					"defaultValue": " React.forwardRef<HTMLElement, Attributes<HTMLElement, FlexProps>>((props, ref) => {\n  const {\n    alignChildren,\n    alignChildrenHorizontal = alignChildren,\n    alignChildrenVertical = alignChildren,\n    alignSelf,\n    className,\n    direction,\n    grow,\n    gap,\n    initial,\n    shrink,\n    wrap,\n    ...rest\n  } = props;\n\n  const classes = classnames('Flex', {\n    [`Flex--align-horz-${alignChildrenHorizontal}`]: alignChildrenHorizontal,\n    [`Flex--align-self-${alignSelf}`]: alignSelf,\n    [`Flex--align-vert-${alignChildrenVertical}`]: alignChildrenVertical,\n    [`Flex--${direction}`]: direction,\n    [`Flex--initial-${initial}`]: initial,\n    [`Flex--gap-${gap}`]: gap,\n    'Flex--grow': grow,\n    'Flex--shrink': shrink,\n    'Flex--wrap': wrap,\n  }, className);\n\n  return (\n    <Base { ...rest }\n        className={ classes }\n        ref={ ref } />\n  );\n})"
				}
			],
			"groups": [
				{
					"title": "Interfaces",
					"kind": 256,
					"children": [
						174
					]
				},
				{
					"title": "Variables",
					"kind": 32,
					"children": [
						209
					]
				}
			],
			"sources": [
				{
					"fileName": "src/Flex/Flex.tsx",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 634,
			"name": "\"Form/Form\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "/Users/harry/Projects/personal/preshape/src/Form/Form.tsx",
			"children": [
				{
					"id": 635,
					"name": "Props",
					"kind": 256,
					"kindString": "Interface",
					"flags": {},
					"children": [
						{
							"id": 636,
							"name": "absolute",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Quick way of absolutely position to common places"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 58,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "fullscreen"
									},
									{
										"type": "stringLiteral",
										"value": "top"
									},
									{
										"type": "stringLiteral",
										"value": "top-left"
									},
									{
										"type": "stringLiteral",
										"value": "top-right"
									},
									{
										"type": "stringLiteral",
										"value": "bottom"
									},
									{
										"type": "stringLiteral",
										"value": "bottom-left"
									},
									{
										"type": "stringLiteral",
										"value": "bottom-right"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.absolute",
								"id": 3
							}
						},
						{
							"id": 637,
							"name": "backgroundColor",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Background colour to be applied, shades are taken from the current\ntheme."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 70,
									"character": 17
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeColor",
								"id": 30
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.backgroundColor",
								"id": 4
							}
						},
						{
							"id": 638,
							"name": "borderColor",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Border colour to be applied, shades are taken from the current\ntheme."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 75,
									"character": 13
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeColor",
								"id": 30
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.borderColor",
								"id": 5
							}
						},
						{
							"id": 639,
							"name": "borderRadius",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Adds styling of a border radius to one of the size multiples."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 79,
									"character": 14
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "x1"
									},
									{
										"type": "stringLiteral",
										"value": "x2"
									},
									{
										"type": "stringLiteral",
										"value": "x3"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.borderRadius",
								"id": 6
							}
						},
						{
							"id": 640,
							"name": "borderSize",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Thickness of the border to be applied"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 81,
									"character": 12
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "x1"
									},
									{
										"type": "stringLiteral",
										"value": "x2"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.borderSize",
								"id": 7
							}
						},
						{
							"id": 641,
							"name": "clickable",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Adds styling to indicate that the element is clickable"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 83,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.clickable",
								"id": 8
							}
						},
						{
							"id": 642,
							"name": "container",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies relative positioning to contain child elements."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 85,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.container",
								"id": 9
							}
						},
						{
							"id": 643,
							"name": "display",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies display styling"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 87,
									"character": 9
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "block"
									},
									{
										"type": "stringLiteral",
										"value": "inline-block"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.display",
								"id": 10
							}
						},
						{
							"id": 644,
							"name": "fixed",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Quick way of absolutely position to common places"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 89,
									"character": 7
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "fullscreen"
									},
									{
										"type": "stringLiteral",
										"value": "top"
									},
									{
										"type": "stringLiteral",
										"value": "top-left"
									},
									{
										"type": "stringLiteral",
										"value": "top-right"
									},
									{
										"type": "stringLiteral",
										"value": "bottom"
									},
									{
										"type": "stringLiteral",
										"value": "bottom-left"
									},
									{
										"type": "stringLiteral",
										"value": "bottom-right"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.fixed",
								"id": 11
							}
						},
						{
							"id": 645,
							"name": "height",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Fixed height applied through inline styling"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 98,
									"character": 8
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.height",
								"id": 12
							}
						},
						{
							"id": 646,
							"name": "margin",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Margins applied for the global spacing variables"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 100,
									"character": 8
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeSize",
								"id": 31
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.margin",
								"id": 13
							}
						},
						{
							"id": 647,
							"name": "maxWidth",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Max width applied through inline styling"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 102,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.maxWidth",
								"id": 14
							}
						},
						{
							"id": 648,
							"name": "minHeight",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Max height applied through inline styling"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 104,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.minHeight",
								"id": 15
							}
						},
						{
							"id": 649,
							"name": "minWidth",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Min width applied through inline style"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 106,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.minWidth",
								"id": 16
							}
						},
						{
							"id": 650,
							"name": "overflow",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Overflow"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 108,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "stringLiteral",
										"value": "hidden"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.overflow",
								"id": 17
							}
						},
						{
							"id": 651,
							"name": "padding",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Padding applied for the global spacing variables"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 110,
									"character": 9
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeSize",
								"id": 31
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.padding",
								"id": 18
							}
						},
						{
							"id": 652,
							"name": "paddingHorizontal",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Horizontal padding applied for the global spacing variables"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 112,
									"character": 19
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeSize",
								"id": 31
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.paddingHorizontal",
								"id": 19
							}
						},
						{
							"id": 653,
							"name": "paddingVertical",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Vertical pa?dding applied for the global spacing variables"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 114,
									"character": 17
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeSize",
								"id": 31
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.paddingVertical",
								"id": 20
							}
						},
						{
							"id": 654,
							"name": "scrollable",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies overflow styling to enable/disable scrolling."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 116,
									"character": 12
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.scrollable",
								"id": 21
							}
						},
						{
							"id": 655,
							"name": "tag",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Any valid HTML or SVG element tag.",
								"tags": [
									{
										"tag": "reference",
										"text": "false\n"
									}
								]
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 122,
									"character": 5
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeAllElementTags",
								"id": 34
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.tag",
								"id": 22
							}
						},
						{
							"id": 656,
							"name": "textColor",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Text colour to be applied."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 126,
									"character": 11
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeColor",
								"id": 30
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.textColor",
								"id": 23
							}
						},
						{
							"id": 657,
							"name": "theme",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Theme applied to this element and inherited for child elements (until\na descendant theme is applied)."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 131,
									"character": 7
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeTheme",
								"id": 35
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.theme",
								"id": 24
							}
						},
						{
							"id": 658,
							"name": "width",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Fixed width applied through inline styling"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 133,
									"character": 7
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.width",
								"id": 25
							}
						},
						{
							"id": 659,
							"name": "zIndex",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "z-index number for layering elements."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 135,
									"character": 8
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "number"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.zIndex",
								"id": 26
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								636,
								637,
								638,
								639,
								640,
								641,
								642,
								643,
								644,
								645,
								646,
								647,
								648,
								649,
								650,
								651,
								652,
								653,
								654,
								655,
								656,
								657,
								658,
								659
							]
						}
					],
					"sources": [
						{
							"fileName": "src/Form/Form.tsx",
							"line": 4,
							"character": 15
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"name": "BaseProps",
							"id": 2
						}
					]
				},
				{
					"id": 660,
					"name": "Form",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "src/Form/Form.tsx",
							"line": 6,
							"character": 10
						}
					],
					"type": {
						"type": "reference",
						"name": "ForwardRefExoticComponent",
						"typeArguments": [
							{
								"type": "intersection",
								"types": [
									{
										"type": "reference",
										"name": "Props",
										"id": 635
									},
									{
										"type": "reflection",
										"declaration": {
											"id": 661,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {}
										}
									},
									{
										"type": "reference",
										"name": "RefAttributes",
										"typeArguments": [
											{
												"type": "reference",
												"name": "HTMLFormElement"
											}
										]
									}
								]
							}
						]
					},
					"defaultValue": " React.forwardRef<HTMLFormElement, Attributes<HTMLFormElement, Props>>((props, ref) => {\n  return (\n    <Base { ...props } ref={ ref } tag=\"form\" />\n  );\n})"
				}
			],
			"groups": [
				{
					"title": "Interfaces",
					"kind": 256,
					"children": [
						635
					]
				},
				{
					"title": "Variables",
					"kind": 32,
					"children": [
						660
					]
				}
			],
			"sources": [
				{
					"fileName": "src/Form/Form.tsx",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 662,
			"name": "\"Grid/Grid\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "/Users/harry/Projects/personal/preshape/src/Grid/Grid.tsx",
			"children": [
				{
					"id": 663,
					"name": "GridProps",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"children": [
						{
							"id": 679,
							"name": "absolute",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Quick way of absolutely position to common places"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 58,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "fullscreen"
									},
									{
										"type": "stringLiteral",
										"value": "top"
									},
									{
										"type": "stringLiteral",
										"value": "top-left"
									},
									{
										"type": "stringLiteral",
										"value": "top-right"
									},
									{
										"type": "stringLiteral",
										"value": "bottom"
									},
									{
										"type": "stringLiteral",
										"value": "bottom-left"
									},
									{
										"type": "stringLiteral",
										"value": "bottom-right"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.absolute",
								"id": 3
							}
						},
						{
							"id": 664,
							"name": "alignChildren",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/Grid/Grid.tsx",
									"line": 8,
									"character": 15
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "start"
									},
									{
										"type": "stringLiteral",
										"value": "middle"
									},
									{
										"type": "stringLiteral",
										"value": "end"
									}
								]
							},
							"overwrites": {
								"type": "reference",
								"name": "FlexProps.alignChildren",
								"id": 175
							}
						},
						{
							"id": 671,
							"name": "alignChildrenHorizontal",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Horizontal alignment of children flex items."
							},
							"sources": [
								{
									"fileName": "src/Flex/Flex.tsx",
									"line": 13,
									"character": 25
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "start"
									},
									{
										"type": "stringLiteral",
										"value": "middle"
									},
									{
										"type": "stringLiteral",
										"value": "end"
									},
									{
										"type": "stringLiteral",
										"value": "around"
									},
									{
										"type": "stringLiteral",
										"value": "between"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "FlexProps.alignChildrenHorizontal",
								"id": 176
							}
						},
						{
							"id": 672,
							"name": "alignChildrenVertical",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Vertical alignment of children flex items."
							},
							"sources": [
								{
									"fileName": "src/Flex/Flex.tsx",
									"line": 15,
									"character": 23
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "start"
									},
									{
										"type": "stringLiteral",
										"value": "middle"
									},
									{
										"type": "stringLiteral",
										"value": "end"
									},
									{
										"type": "stringLiteral",
										"value": "around"
									},
									{
										"type": "stringLiteral",
										"value": "between"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "FlexProps.alignChildrenVertical",
								"id": 177
							}
						},
						{
							"id": 673,
							"name": "alignSelf",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Flex item alignment property (changes with parent direction)."
							},
							"sources": [
								{
									"fileName": "src/Flex/Flex.tsx",
									"line": 17,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "start"
									},
									{
										"type": "stringLiteral",
										"value": "middle"
									},
									{
										"type": "stringLiteral",
										"value": "end"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "FlexProps.alignSelf",
								"id": 178
							}
						},
						{
							"id": 665,
							"name": "autoFitWidthMax",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/Grid/Grid.tsx",
									"line": 9,
									"character": 17
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							}
						},
						{
							"id": 666,
							"name": "autoFitWidthMin",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/Grid/Grid.tsx",
									"line": 10,
									"character": 17
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							}
						},
						{
							"id": 680,
							"name": "backgroundColor",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Background colour to be applied, shades are taken from the current\ntheme."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 70,
									"character": 17
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeColor",
								"id": 30
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.backgroundColor",
								"id": 4
							}
						},
						{
							"id": 681,
							"name": "borderColor",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Border colour to be applied, shades are taken from the current\ntheme."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 75,
									"character": 13
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeColor",
								"id": 30
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.borderColor",
								"id": 5
							}
						},
						{
							"id": 682,
							"name": "borderRadius",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Adds styling of a border radius to one of the size multiples."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 79,
									"character": 14
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "x1"
									},
									{
										"type": "stringLiteral",
										"value": "x2"
									},
									{
										"type": "stringLiteral",
										"value": "x3"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.borderRadius",
								"id": 6
							}
						},
						{
							"id": 683,
							"name": "borderSize",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Thickness of the border to be applied"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 81,
									"character": 12
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "x1"
									},
									{
										"type": "stringLiteral",
										"value": "x2"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.borderSize",
								"id": 7
							}
						},
						{
							"id": 667,
							"name": "className",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/Grid/Grid.tsx",
									"line": 11,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							}
						},
						{
							"id": 684,
							"name": "clickable",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Adds styling to indicate that the element is clickable"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 83,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.clickable",
								"id": 8
							}
						},
						{
							"id": 668,
							"name": "columnCount",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/Grid/Grid.tsx",
									"line": 12,
									"character": 13
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							}
						},
						{
							"id": 669,
							"name": "columnWidth",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/Grid/Grid.tsx",
									"line": 13,
									"character": 13
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							}
						},
						{
							"id": 685,
							"name": "container",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies relative positioning to contain child elements."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 85,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.container",
								"id": 9
							}
						},
						{
							"id": 674,
							"name": "direction",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Direction on which way to flex items."
							},
							"sources": [
								{
									"fileName": "src/Flex/Flex.tsx",
									"line": 19,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "horizontal"
									},
									{
										"type": "stringLiteral",
										"value": "vertical"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "FlexProps.direction",
								"id": 179
							}
						},
						{
							"id": 686,
							"name": "display",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies display styling"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 87,
									"character": 9
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "block"
									},
									{
										"type": "stringLiteral",
										"value": "inline-block"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.display",
								"id": 10
							}
						},
						{
							"id": 687,
							"name": "fixed",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Quick way of absolutely position to common places"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 89,
									"character": 7
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "fullscreen"
									},
									{
										"type": "stringLiteral",
										"value": "top"
									},
									{
										"type": "stringLiteral",
										"value": "top-left"
									},
									{
										"type": "stringLiteral",
										"value": "top-right"
									},
									{
										"type": "stringLiteral",
										"value": "bottom"
									},
									{
										"type": "stringLiteral",
										"value": "bottom-left"
									},
									{
										"type": "stringLiteral",
										"value": "bottom-right"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.fixed",
								"id": 11
							}
						},
						{
							"id": 670,
							"name": "gap",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/Grid/Grid.tsx",
									"line": 14,
									"character": 5
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeSize",
								"id": 31
							},
							"overwrites": {
								"type": "reference",
								"name": "FlexProps.gap",
								"id": 180
							}
						},
						{
							"id": 675,
							"name": "grow",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Flex item property if it should grow with available space."
							},
							"sources": [
								{
									"fileName": "src/Flex/Flex.tsx",
									"line": 23,
									"character": 6
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "FlexProps.grow",
								"id": 181
							}
						},
						{
							"id": 688,
							"name": "height",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Fixed height applied through inline styling"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 98,
									"character": 8
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.height",
								"id": 12
							}
						},
						{
							"id": 676,
							"name": "initial",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Initial width to flex from for a child item."
							},
							"sources": [
								{
									"fileName": "src/Flex/Flex.tsx",
									"line": 25,
									"character": 9
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "content"
									},
									{
										"type": "stringLiteral",
										"value": "container"
									},
									{
										"type": "stringLiteral",
										"value": "none"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "FlexProps.initial",
								"id": 182
							}
						},
						{
							"id": 689,
							"name": "margin",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Margins applied for the global spacing variables"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 100,
									"character": 8
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeSize",
								"id": 31
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.margin",
								"id": 13
							}
						},
						{
							"id": 690,
							"name": "maxWidth",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Max width applied through inline styling"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 102,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.maxWidth",
								"id": 14
							}
						},
						{
							"id": 691,
							"name": "minHeight",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Max height applied through inline styling"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 104,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.minHeight",
								"id": 15
							}
						},
						{
							"id": 692,
							"name": "minWidth",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Min width applied through inline style"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 106,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.minWidth",
								"id": 16
							}
						},
						{
							"id": 693,
							"name": "overflow",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Overflow"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 108,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "stringLiteral",
										"value": "hidden"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.overflow",
								"id": 17
							}
						},
						{
							"id": 694,
							"name": "padding",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Padding applied for the global spacing variables"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 110,
									"character": 9
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeSize",
								"id": 31
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.padding",
								"id": 18
							}
						},
						{
							"id": 695,
							"name": "paddingHorizontal",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Horizontal padding applied for the global spacing variables"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 112,
									"character": 19
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeSize",
								"id": 31
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.paddingHorizontal",
								"id": 19
							}
						},
						{
							"id": 696,
							"name": "paddingVertical",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Vertical pa?dding applied for the global spacing variables"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 114,
									"character": 17
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeSize",
								"id": 31
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.paddingVertical",
								"id": 20
							}
						},
						{
							"id": 697,
							"name": "scrollable",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies overflow styling to enable/disable scrolling."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 116,
									"character": 12
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.scrollable",
								"id": 21
							}
						},
						{
							"id": 677,
							"name": "shrink",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Flex item property if it should shrink."
							},
							"sources": [
								{
									"fileName": "src/Flex/Flex.tsx",
									"line": 27,
									"character": 8
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "FlexProps.shrink",
								"id": 183
							}
						},
						{
							"id": 698,
							"name": "tag",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Any valid HTML or SVG element tag.",
								"tags": [
									{
										"tag": "reference",
										"text": "false\n"
									}
								]
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 122,
									"character": 5
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeAllElementTags",
								"id": 34
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.tag",
								"id": 22
							}
						},
						{
							"id": 699,
							"name": "textColor",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Text colour to be applied."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 126,
									"character": 11
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeColor",
								"id": 30
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.textColor",
								"id": 23
							}
						},
						{
							"id": 700,
							"name": "theme",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Theme applied to this element and inherited for child elements (until\na descendant theme is applied)."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 131,
									"character": 7
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeTheme",
								"id": 35
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.theme",
								"id": 24
							}
						},
						{
							"id": 701,
							"name": "width",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Fixed width applied through inline styling"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 133,
									"character": 7
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.width",
								"id": 25
							}
						},
						{
							"id": 678,
							"name": "wrap",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Flag to allow flex items to wrap over to new lines"
							},
							"sources": [
								{
									"fileName": "src/Flex/Flex.tsx",
									"line": 29,
									"character": 6
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "FlexProps.wrap",
								"id": 184
							}
						},
						{
							"id": 702,
							"name": "zIndex",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "z-index number for layering elements."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 135,
									"character": 8
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "number"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.zIndex",
								"id": 26
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								679,
								664,
								671,
								672,
								673,
								665,
								666,
								680,
								681,
								682,
								683,
								667,
								684,
								668,
								669,
								685,
								674,
								686,
								687,
								670,
								675,
								688,
								676,
								689,
								690,
								691,
								692,
								693,
								694,
								695,
								696,
								697,
								677,
								698,
								699,
								700,
								701,
								678,
								702
							]
						}
					],
					"sources": [
						{
							"fileName": "src/Grid/Grid.tsx",
							"line": 7,
							"character": 26
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"name": "FlexProps",
							"id": 174
						}
					]
				},
				{
					"id": 703,
					"name": "Grid",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "src/Grid/Grid.tsx",
							"line": 17,
							"character": 10
						}
					],
					"type": {
						"type": "reference",
						"name": "ForwardRefExoticComponent",
						"typeArguments": [
							{
								"type": "intersection",
								"types": [
									{
										"type": "reference",
										"name": "GridProps",
										"id": 663
									},
									{
										"type": "reflection",
										"declaration": {
											"id": 704,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {}
										}
									},
									{
										"type": "reference",
										"name": "RefAttributes",
										"typeArguments": [
											{
												"type": "reference",
												"name": "HTMLElement"
											}
										]
									}
								]
							}
						]
					},
					"defaultValue": " React.forwardRef<HTMLElement, Attributes<HTMLElement, GridProps>>((props, ref) => {\n  const {\n    alignChildren,\n    autoFitWidthMax,\n    autoFitWidthMin,\n    className,\n    columnCount,\n    columnWidth,\n    gap,\n    ...rest\n  } = props;\n\n  const classes = classnames('Grid', {\n    [`Grid--align-${alignChildren}`]: alignChildren,\n    [`Grid--gap-${gap}`]: gap,\n  }, className);\n\n  const style = {\n    gridTemplateColumns:\n      (columnCount && `repeat(${columnCount}, ${columnWidth || 'max-content'})`) ||\n      ((autoFitWidthMin && `repeat(auto-fit, minmax(${autoFitWidthMin}, ${autoFitWidthMax || '1fr'})`) || undefined),\n  };\n\n  return (\n    <Flex { ...rest } className={ classes } ref={ ref } style={ style } />\n  );\n})"
				}
			],
			"groups": [
				{
					"title": "Interfaces",
					"kind": 256,
					"children": [
						663
					]
				},
				{
					"title": "Variables",
					"kind": 32,
					"children": [
						703
					]
				}
			],
			"sources": [
				{
					"fileName": "src/Grid/Grid.tsx",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 705,
			"name": "\"Grid/GridItem\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "/Users/harry/Projects/personal/preshape/src/Grid/GridItem.tsx",
			"children": [
				{
					"id": 706,
					"name": "GridItemProps",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"children": [
						{
							"id": 719,
							"name": "absolute",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Quick way of absolutely position to common places"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 58,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "fullscreen"
									},
									{
										"type": "stringLiteral",
										"value": "top"
									},
									{
										"type": "stringLiteral",
										"value": "top-left"
									},
									{
										"type": "stringLiteral",
										"value": "top-right"
									},
									{
										"type": "stringLiteral",
										"value": "bottom"
									},
									{
										"type": "stringLiteral",
										"value": "bottom-left"
									},
									{
										"type": "stringLiteral",
										"value": "bottom-right"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.absolute",
								"id": 3
							}
						},
						{
							"id": 709,
							"name": "alignChildren",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Short cut child alignment property for both alignChildrenHorizontal and\nalignChildrenVertical."
							},
							"sources": [
								{
									"fileName": "src/Flex/Flex.tsx",
									"line": 11,
									"character": 15
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "start"
									},
									{
										"type": "stringLiteral",
										"value": "middle"
									},
									{
										"type": "stringLiteral",
										"value": "end"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "FlexProps.alignChildren",
								"id": 175
							}
						},
						{
							"id": 710,
							"name": "alignChildrenHorizontal",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Horizontal alignment of children flex items."
							},
							"sources": [
								{
									"fileName": "src/Flex/Flex.tsx",
									"line": 13,
									"character": 25
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "start"
									},
									{
										"type": "stringLiteral",
										"value": "middle"
									},
									{
										"type": "stringLiteral",
										"value": "end"
									},
									{
										"type": "stringLiteral",
										"value": "around"
									},
									{
										"type": "stringLiteral",
										"value": "between"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "FlexProps.alignChildrenHorizontal",
								"id": 176
							}
						},
						{
							"id": 711,
							"name": "alignChildrenVertical",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Vertical alignment of children flex items."
							},
							"sources": [
								{
									"fileName": "src/Flex/Flex.tsx",
									"line": 15,
									"character": 23
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "start"
									},
									{
										"type": "stringLiteral",
										"value": "middle"
									},
									{
										"type": "stringLiteral",
										"value": "end"
									},
									{
										"type": "stringLiteral",
										"value": "around"
									},
									{
										"type": "stringLiteral",
										"value": "between"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "FlexProps.alignChildrenVertical",
								"id": 177
							}
						},
						{
							"id": 712,
							"name": "alignSelf",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Flex item alignment property (changes with parent direction)."
							},
							"sources": [
								{
									"fileName": "src/Flex/Flex.tsx",
									"line": 17,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "start"
									},
									{
										"type": "stringLiteral",
										"value": "middle"
									},
									{
										"type": "stringLiteral",
										"value": "end"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "FlexProps.alignSelf",
								"id": 178
							}
						},
						{
							"id": 720,
							"name": "backgroundColor",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Background colour to be applied, shades are taken from the current\ntheme."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 70,
									"character": 17
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeColor",
								"id": 30
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.backgroundColor",
								"id": 4
							}
						},
						{
							"id": 721,
							"name": "borderColor",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Border colour to be applied, shades are taken from the current\ntheme."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 75,
									"character": 13
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeColor",
								"id": 30
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.borderColor",
								"id": 5
							}
						},
						{
							"id": 722,
							"name": "borderRadius",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Adds styling of a border radius to one of the size multiples."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 79,
									"character": 14
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "x1"
									},
									{
										"type": "stringLiteral",
										"value": "x2"
									},
									{
										"type": "stringLiteral",
										"value": "x3"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.borderRadius",
								"id": 6
							}
						},
						{
							"id": 723,
							"name": "borderSize",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Thickness of the border to be applied"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 81,
									"character": 12
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "x1"
									},
									{
										"type": "stringLiteral",
										"value": "x2"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.borderSize",
								"id": 7
							}
						},
						{
							"id": 724,
							"name": "clickable",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Adds styling to indicate that the element is clickable"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 83,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.clickable",
								"id": 8
							}
						},
						{
							"id": 707,
							"name": "column",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Specifies a specific column this item should be in."
							},
							"sources": [
								{
									"fileName": "src/Grid/GridItem.tsx",
									"line": 7,
									"character": 8
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "number"
									}
								]
							}
						},
						{
							"id": 725,
							"name": "container",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies relative positioning to contain child elements."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 85,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.container",
								"id": 9
							}
						},
						{
							"id": 713,
							"name": "direction",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Direction on which way to flex items."
							},
							"sources": [
								{
									"fileName": "src/Flex/Flex.tsx",
									"line": 19,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "horizontal"
									},
									{
										"type": "stringLiteral",
										"value": "vertical"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "FlexProps.direction",
								"id": 179
							}
						},
						{
							"id": 726,
							"name": "display",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies display styling"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 87,
									"character": 9
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "block"
									},
									{
										"type": "stringLiteral",
										"value": "inline-block"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.display",
								"id": 10
							}
						},
						{
							"id": 727,
							"name": "fixed",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Quick way of absolutely position to common places"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 89,
									"character": 7
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "fullscreen"
									},
									{
										"type": "stringLiteral",
										"value": "top"
									},
									{
										"type": "stringLiteral",
										"value": "top-left"
									},
									{
										"type": "stringLiteral",
										"value": "top-right"
									},
									{
										"type": "stringLiteral",
										"value": "bottom"
									},
									{
										"type": "stringLiteral",
										"value": "bottom-left"
									},
									{
										"type": "stringLiteral",
										"value": "bottom-right"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.fixed",
								"id": 11
							}
						},
						{
							"id": 714,
							"name": "gap",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Spacing applied between child flex items, values are global spacing variables."
							},
							"sources": [
								{
									"fileName": "src/Flex/Flex.tsx",
									"line": 21,
									"character": 5
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeSize",
								"id": 31
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "FlexProps.gap",
								"id": 180
							}
						},
						{
							"id": 715,
							"name": "grow",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Flex item property if it should grow with available space."
							},
							"sources": [
								{
									"fileName": "src/Flex/Flex.tsx",
									"line": 23,
									"character": 6
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "FlexProps.grow",
								"id": 181
							}
						},
						{
							"id": 728,
							"name": "height",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Fixed height applied through inline styling"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 98,
									"character": 8
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.height",
								"id": 12
							}
						},
						{
							"id": 716,
							"name": "initial",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Initial width to flex from for a child item."
							},
							"sources": [
								{
									"fileName": "src/Flex/Flex.tsx",
									"line": 25,
									"character": 9
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "content"
									},
									{
										"type": "stringLiteral",
										"value": "container"
									},
									{
										"type": "stringLiteral",
										"value": "none"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "FlexProps.initial",
								"id": 182
							}
						},
						{
							"id": 729,
							"name": "margin",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Margins applied for the global spacing variables"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 100,
									"character": 8
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeSize",
								"id": 31
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.margin",
								"id": 13
							}
						},
						{
							"id": 730,
							"name": "maxWidth",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Max width applied through inline styling"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 102,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.maxWidth",
								"id": 14
							}
						},
						{
							"id": 731,
							"name": "minHeight",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Max height applied through inline styling"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 104,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.minHeight",
								"id": 15
							}
						},
						{
							"id": 732,
							"name": "minWidth",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Min width applied through inline style"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 106,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.minWidth",
								"id": 16
							}
						},
						{
							"id": 733,
							"name": "overflow",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Overflow"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 108,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "stringLiteral",
										"value": "hidden"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.overflow",
								"id": 17
							}
						},
						{
							"id": 734,
							"name": "padding",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Padding applied for the global spacing variables"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 110,
									"character": 9
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeSize",
								"id": 31
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.padding",
								"id": 18
							}
						},
						{
							"id": 735,
							"name": "paddingHorizontal",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Horizontal padding applied for the global spacing variables"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 112,
									"character": 19
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeSize",
								"id": 31
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.paddingHorizontal",
								"id": 19
							}
						},
						{
							"id": 736,
							"name": "paddingVertical",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Vertical pa?dding applied for the global spacing variables"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 114,
									"character": 17
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeSize",
								"id": 31
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.paddingVertical",
								"id": 20
							}
						},
						{
							"id": 708,
							"name": "row",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Specifies a specific row this item should be in."
							},
							"sources": [
								{
									"fileName": "src/Grid/GridItem.tsx",
									"line": 9,
									"character": 5
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "number"
									}
								]
							}
						},
						{
							"id": 737,
							"name": "scrollable",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies overflow styling to enable/disable scrolling."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 116,
									"character": 12
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.scrollable",
								"id": 21
							}
						},
						{
							"id": 717,
							"name": "shrink",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Flex item property if it should shrink."
							},
							"sources": [
								{
									"fileName": "src/Flex/Flex.tsx",
									"line": 27,
									"character": 8
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "FlexProps.shrink",
								"id": 183
							}
						},
						{
							"id": 738,
							"name": "tag",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Any valid HTML or SVG element tag.",
								"tags": [
									{
										"tag": "reference",
										"text": "false\n"
									}
								]
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 122,
									"character": 5
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeAllElementTags",
								"id": 34
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.tag",
								"id": 22
							}
						},
						{
							"id": 739,
							"name": "textColor",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Text colour to be applied."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 126,
									"character": 11
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeColor",
								"id": 30
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.textColor",
								"id": 23
							}
						},
						{
							"id": 740,
							"name": "theme",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Theme applied to this element and inherited for child elements (until\na descendant theme is applied)."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 131,
									"character": 7
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeTheme",
								"id": 35
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.theme",
								"id": 24
							}
						},
						{
							"id": 741,
							"name": "width",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Fixed width applied through inline styling"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 133,
									"character": 7
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.width",
								"id": 25
							}
						},
						{
							"id": 718,
							"name": "wrap",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Flag to allow flex items to wrap over to new lines"
							},
							"sources": [
								{
									"fileName": "src/Flex/Flex.tsx",
									"line": 29,
									"character": 6
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "FlexProps.wrap",
								"id": 184
							}
						},
						{
							"id": 742,
							"name": "zIndex",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "z-index number for layering elements."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 135,
									"character": 8
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "number"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.zIndex",
								"id": 26
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								719,
								709,
								710,
								711,
								712,
								720,
								721,
								722,
								723,
								724,
								707,
								725,
								713,
								726,
								727,
								714,
								715,
								728,
								716,
								729,
								730,
								731,
								732,
								733,
								734,
								735,
								736,
								708,
								737,
								717,
								738,
								739,
								740,
								741,
								718,
								742
							]
						}
					],
					"sources": [
						{
							"fileName": "src/Grid/GridItem.tsx",
							"line": 5,
							"character": 30
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"name": "FlexProps",
							"id": 174
						}
					]
				},
				{
					"id": 743,
					"name": "GridItem",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "src/Grid/GridItem.tsx",
							"line": 12,
							"character": 14
						}
					],
					"type": {
						"type": "reference",
						"name": "ForwardRefExoticComponent",
						"typeArguments": [
							{
								"type": "intersection",
								"types": [
									{
										"type": "reference",
										"name": "GridItemProps",
										"id": 706
									},
									{
										"type": "reflection",
										"declaration": {
											"id": 744,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {}
										}
									},
									{
										"type": "reference",
										"name": "RefAttributes",
										"typeArguments": [
											{
												"type": "reference",
												"name": "HTMLElement"
											}
										]
									}
								]
							}
						]
					},
					"defaultValue": " React.forwardRef<HTMLElement, Attributes<HTMLElement, GridItemProps>>((props, ref) => {\n  const {\n    column,\n    row,\n    ...rest\n  } = props;\n\n  const style = {\n    gridColumn: column,\n    gridRow: row,\n  };\n\n  return (\n    <Flex { ...rest } className=\"GridItem\" ref={ ref } style={ style } />\n  );\n})"
				}
			],
			"groups": [
				{
					"title": "Interfaces",
					"kind": 256,
					"children": [
						706
					]
				},
				{
					"title": "Variables",
					"kind": 32,
					"children": [
						743
					]
				}
			],
			"sources": [
				{
					"fileName": "src/Grid/GridItem.tsx",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 745,
			"name": "\"Icon/Icon\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "/Users/harry/Projects/personal/preshape/src/Icon/Icon.tsx",
			"children": [
				{
					"id": 746,
					"name": "IconProps",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"children": [
						{
							"id": 750,
							"name": "absolute",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Quick way of absolutely position to common places"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 58,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "fullscreen"
									},
									{
										"type": "stringLiteral",
										"value": "top"
									},
									{
										"type": "stringLiteral",
										"value": "top-left"
									},
									{
										"type": "stringLiteral",
										"value": "top-right"
									},
									{
										"type": "stringLiteral",
										"value": "bottom"
									},
									{
										"type": "stringLiteral",
										"value": "bottom-left"
									},
									{
										"type": "stringLiteral",
										"value": "bottom-right"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.absolute",
								"id": 3
							}
						},
						{
							"id": 751,
							"name": "backgroundColor",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Background colour to be applied, shades are taken from the current\ntheme."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 70,
									"character": 17
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeColor",
								"id": 30
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.backgroundColor",
								"id": 4
							}
						},
						{
							"id": 752,
							"name": "borderColor",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Border colour to be applied, shades are taken from the current\ntheme."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 75,
									"character": 13
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeColor",
								"id": 30
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.borderColor",
								"id": 5
							}
						},
						{
							"id": 753,
							"name": "borderRadius",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Adds styling of a border radius to one of the size multiples."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 79,
									"character": 14
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "x1"
									},
									{
										"type": "stringLiteral",
										"value": "x2"
									},
									{
										"type": "stringLiteral",
										"value": "x3"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.borderRadius",
								"id": 6
							}
						},
						{
							"id": 754,
							"name": "borderSize",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Thickness of the border to be applied"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 81,
									"character": 12
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "x1"
									},
									{
										"type": "stringLiteral",
										"value": "x2"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.borderSize",
								"id": 7
							}
						},
						{
							"id": 755,
							"name": "clickable",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Adds styling to indicate that the element is clickable"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 83,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.clickable",
								"id": 8
							}
						},
						{
							"id": 756,
							"name": "container",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies relative positioning to contain child elements."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 85,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.container",
								"id": 9
							}
						},
						{
							"id": 757,
							"name": "display",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies display styling"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 87,
									"character": 9
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "block"
									},
									{
										"type": "stringLiteral",
										"value": "inline-block"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.display",
								"id": 10
							}
						},
						{
							"id": 758,
							"name": "fixed",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Quick way of absolutely position to common places"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 89,
									"character": 7
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "fullscreen"
									},
									{
										"type": "stringLiteral",
										"value": "top"
									},
									{
										"type": "stringLiteral",
										"value": "top-left"
									},
									{
										"type": "stringLiteral",
										"value": "top-right"
									},
									{
										"type": "stringLiteral",
										"value": "bottom"
									},
									{
										"type": "stringLiteral",
										"value": "bottom-left"
									},
									{
										"type": "stringLiteral",
										"value": "bottom-right"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.fixed",
								"id": 11
							}
						},
						{
							"id": 759,
							"name": "height",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Fixed height applied through inline styling"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 98,
									"character": 8
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.height",
								"id": 12
							}
						},
						{
							"id": 760,
							"name": "margin",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Margins applied for the global spacing variables"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 100,
									"character": 8
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeSize",
								"id": 31
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.margin",
								"id": 13
							}
						},
						{
							"id": 761,
							"name": "maxWidth",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Max width applied through inline styling"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 102,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.maxWidth",
								"id": 14
							}
						},
						{
							"id": 762,
							"name": "minHeight",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Max height applied through inline styling"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 104,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.minHeight",
								"id": 15
							}
						},
						{
							"id": 763,
							"name": "minWidth",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Min width applied through inline style"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 106,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.minWidth",
								"id": 16
							}
						},
						{
							"id": 747,
							"name": "name",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Name of the icon to be displayed"
							},
							"sources": [
								{
									"fileName": "src/Icon/Icon.tsx",
									"line": 205,
									"character": 6
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeIcon",
								"id": 774
							}
						},
						{
							"id": 764,
							"name": "overflow",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Overflow"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 108,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "stringLiteral",
										"value": "hidden"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.overflow",
								"id": 17
							}
						},
						{
							"id": 765,
							"name": "padding",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Padding applied for the global spacing variables"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 110,
									"character": 9
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeSize",
								"id": 31
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.padding",
								"id": 18
							}
						},
						{
							"id": 766,
							"name": "paddingHorizontal",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Horizontal padding applied for the global spacing variables"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 112,
									"character": 19
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeSize",
								"id": 31
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.paddingHorizontal",
								"id": 19
							}
						},
						{
							"id": 767,
							"name": "paddingVertical",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Vertical pa?dding applied for the global spacing variables"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 114,
									"character": 17
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeSize",
								"id": 31
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.paddingVertical",
								"id": 20
							}
						},
						{
							"id": 768,
							"name": "scrollable",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies overflow styling to enable/disable scrolling."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 116,
									"character": 12
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.scrollable",
								"id": 21
							}
						},
						{
							"id": 748,
							"name": "size",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Size to be used for with and height of the icon"
							},
							"sources": [
								{
									"fileName": "src/Icon/Icon.tsx",
									"line": 207,
									"character": 6
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 749,
							"name": "spin",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Spins the Icon, by the given speed reference."
							},
							"sources": [
								{
									"fileName": "src/Icon/Icon.tsx",
									"line": 209,
									"character": 6
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "slow"
									},
									{
										"type": "stringLiteral",
										"value": "base"
									},
									{
										"type": "stringLiteral",
										"value": "fast"
									}
								]
							}
						},
						{
							"id": 769,
							"name": "tag",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Any valid HTML or SVG element tag.",
								"tags": [
									{
										"tag": "reference",
										"text": "false\n"
									}
								]
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 122,
									"character": 5
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeAllElementTags",
								"id": 34
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.tag",
								"id": 22
							}
						},
						{
							"id": 770,
							"name": "textColor",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Text colour to be applied."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 126,
									"character": 11
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeColor",
								"id": 30
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.textColor",
								"id": 23
							}
						},
						{
							"id": 771,
							"name": "theme",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Theme applied to this element and inherited for child elements (until\na descendant theme is applied)."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 131,
									"character": 7
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeTheme",
								"id": 35
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.theme",
								"id": 24
							}
						},
						{
							"id": 772,
							"name": "width",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Fixed width applied through inline styling"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 133,
									"character": 7
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.width",
								"id": 25
							}
						},
						{
							"id": 773,
							"name": "zIndex",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "z-index number for layering elements."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 135,
									"character": 8
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "number"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.zIndex",
								"id": 26
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								750,
								751,
								752,
								753,
								754,
								755,
								756,
								757,
								758,
								759,
								760,
								761,
								762,
								763,
								747,
								764,
								765,
								766,
								767,
								768,
								748,
								749,
								769,
								770,
								771,
								772,
								773
							]
						}
					],
					"sources": [
						{
							"fileName": "src/Icon/Icon.tsx",
							"line": 203,
							"character": 26
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"name": "BaseProps",
							"id": 2
						}
					]
				},
				{
					"id": 774,
					"name": "TypeIcon",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {
						"isExported": true
					},
					"sources": [
						{
							"fileName": "src/Icon/Icon.tsx",
							"line": 6,
							"character": 20
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "stringLiteral",
								"value": "Backward"
							},
							{
								"type": "stringLiteral",
								"value": "Beginning"
							},
							{
								"type": "stringLiteral",
								"value": "Book"
							},
							{
								"type": "stringLiteral",
								"value": "ChevronLeft"
							},
							{
								"type": "stringLiteral",
								"value": "ChevronRight"
							},
							{
								"type": "stringLiteral",
								"value": "Circle"
							},
							{
								"type": "stringLiteral",
								"value": "Code"
							},
							{
								"type": "stringLiteral",
								"value": "Cog"
							},
							{
								"type": "stringLiteral",
								"value": "Copy"
							},
							{
								"type": "stringLiteral",
								"value": "Cross"
							},
							{
								"type": "stringLiteral",
								"value": "Delete"
							},
							{
								"type": "stringLiteral",
								"value": "End"
							},
							{
								"type": "stringLiteral",
								"value": "Error"
							},
							{
								"type": "stringLiteral",
								"value": "ExternalLink"
							},
							{
								"type": "stringLiteral",
								"value": "Eye"
							},
							{
								"type": "stringLiteral",
								"value": "Forward"
							},
							{
								"type": "stringLiteral",
								"value": "Github"
							},
							{
								"type": "stringLiteral",
								"value": "File"
							},
							{
								"type": "stringLiteral",
								"value": "Info"
							},
							{
								"type": "stringLiteral",
								"value": "Letter"
							},
							{
								"type": "stringLiteral",
								"value": "Maximize"
							},
							{
								"type": "stringLiteral",
								"value": "Menu"
							},
							{
								"type": "stringLiteral",
								"value": "Minimize"
							},
							{
								"type": "stringLiteral",
								"value": "Moon"
							},
							{
								"type": "stringLiteral",
								"value": "Pause"
							},
							{
								"type": "stringLiteral",
								"value": "Pencil"
							},
							{
								"type": "stringLiteral",
								"value": "Play"
							},
							{
								"type": "stringLiteral",
								"value": "Progress"
							},
							{
								"type": "stringLiteral",
								"value": "QuestionMark"
							},
							{
								"type": "stringLiteral",
								"value": "Redo"
							},
							{
								"type": "stringLiteral",
								"value": "Refresh"
							},
							{
								"type": "stringLiteral",
								"value": "Save"
							},
							{
								"type": "stringLiteral",
								"value": "Square"
							},
							{
								"type": "stringLiteral",
								"value": "Star"
							},
							{
								"type": "stringLiteral",
								"value": "Sun"
							},
							{
								"type": "stringLiteral",
								"value": "Twitter"
							},
							{
								"type": "stringLiteral",
								"value": "Undo"
							},
							{
								"type": "stringLiteral",
								"value": "Water"
							}
						]
					}
				},
				{
					"id": 814,
					"name": "Icon",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "src/Icon/Icon.tsx",
							"line": 212,
							"character": 10
						}
					],
					"type": {
						"type": "reference",
						"name": "ForwardRefExoticComponent",
						"typeArguments": [
							{
								"type": "intersection",
								"types": [
									{
										"type": "reference",
										"name": "IconProps",
										"id": 746
									},
									{
										"type": "reflection",
										"declaration": {
											"id": 815,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {}
										}
									},
									{
										"type": "reference",
										"name": "RefAttributes",
										"typeArguments": [
											{
												"type": "reference",
												"name": "SVGSVGElement"
											}
										]
									}
								]
							}
						]
					},
					"defaultValue": " React.forwardRef<SVGSVGElement, Attributes<SVGSVGElement, IconProps>>((props, ref) => {\n  const { name, size, spin, ...rest } = props;\n  const classes = classnames('Icon', {\n    [`Icon--spin-${spin}`]: spin,\n  });\n\n  if (!IconPathMap[name]) {\n    return null;\n  }\n\n  return (\n    <Base { ...rest }\n        className={ classes }\n        height={ size }\n        ref={ ref }\n        tag=\"svg\"\n        viewBox=\"0 0 1024 1024\"\n        width={ size }>\n      { IconPathMap[name].map((d, i) => <path d={ d } key={ i } />) }\n    </Base>\n  );\n})"
				},
				{
					"id": 775,
					"name": "IconPathMap",
					"kind": 2097152,
					"kindString": "Object literal",
					"flags": {
						"isConst": true
					},
					"children": [
						{
							"id": 776,
							"name": "Backward",
							"kind": 32,
							"kindString": "Variable",
							"flags": {},
							"sources": [
								{
									"fileName": "src/Icon/Icon.tsx",
									"line": 47,
									"character": 12
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "string"
								}
							},
							"defaultValue": " [\n    'M486.4 174.933c-12.8-8.533-34.133-4.267-46.933 4.267l-384 298.667c-8.533 8.533-12.8 21.333-12.8 34.133s4.267 25.6 17.067 34.133l384 298.667c8.533 4.267 17.067 8.533 25.6 8.533 4.267 0 12.8 0 17.067-4.267 12.8-8.533 25.6-21.333 25.6-38.4v-597.333c0-17.067-8.533-29.867-25.6-38.4zM426.667 725.333l-273.067-213.333 273.067-213.333v426.667z',\n    'M955.733 174.933c-12.8-8.533-34.133-4.267-46.933 4.267l-384 298.667c-8.533 8.533-12.8 21.333-12.8 34.133s4.267 25.6 17.067 34.133l384 298.667c8.533 4.267 17.067 8.533 25.6 8.533 4.267 0 12.8 0 17.067-4.267 12.8-8.533 25.6-21.333 25.6-38.4v-597.333c0-17.067-8.533-29.867-25.6-38.4zM896 725.333l-273.067-213.333 273.067-213.333v426.667z',\n  ]"
						},
						{
							"id": 777,
							"name": "Beginning",
							"kind": 32,
							"kindString": "Variable",
							"flags": {},
							"sources": [
								{
									"fileName": "src/Icon/Icon.tsx",
									"line": 51,
									"character": 13
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "string"
								}
							},
							"defaultValue": " [\n    'M827.733 132.267c-12.8-8.533-34.133-4.267-46.933 4.267l-426.667 341.333c-8.533 8.533-12.8 21.333-12.8 34.133s4.267 25.6 17.067 34.133l426.667 341.333c8.533 4.267 17.067 8.533 25.6 8.533 4.267 0 12.8 0 17.067-4.267 12.8-8.533 25.6-21.333 25.6-38.4v-682.667c0-17.067-8.533-29.867-25.6-38.4zM768 763.733l-315.733-251.733 315.733-251.733v503.467z',\n    'M213.333 170.667c-25.6 0-42.667 17.067-42.667 42.667v597.333c0 25.6 17.067 42.667 42.667 42.667s42.667-17.067 42.667-42.667v-597.333c0-25.6-17.067-42.667-42.667-42.667z',\n  ]"
						},
						{
							"id": 778,
							"name": "Book",
							"kind": 32,
							"kindString": "Variable",
							"flags": {},
							"sources": [
								{
									"fileName": "src/Icon/Icon.tsx",
									"line": 55,
									"character": 8
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "string"
								}
							},
							"defaultValue": " [\n    'M853.333 42.667h-576c-81.067 0-149.333 68.267-149.333 149.333v640c0 81.067 68.267 149.333 149.333 149.333h576c25.6 0 42.667-17.067 42.667-42.667v-853.333c0-25.6-17.067-42.667-42.667-42.667zM277.333 128h533.333v554.667h-533.333c-21.333 0-42.667 4.267-64 17.067v-507.733c0-34.133 29.867-64 64-64zM277.333 896c-34.133 0-64-29.867-64-64s29.867-64 64-64h533.333v128h-533.333z',\n  ]"
						},
						{
							"id": 779,
							"name": "ChevronLeft",
							"kind": 32,
							"kindString": "Variable",
							"flags": {},
							"sources": [
								{
									"fileName": "src/Icon/Icon.tsx",
									"line": 58,
									"character": 15
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "string"
								}
							},
							"defaultValue": " [\n    'M443.733 512l226.133-226.133c17.067-17.067 17.067-42.667 0-59.733s-42.667-17.067-59.733 0l-256 256c-17.067 17.067-17.067 42.667 0 59.733l256 256c8.533 8.533 21.333 12.8 29.867 12.8s21.333-4.267 29.867-12.8c17.067-17.067 17.067-42.667 0-59.733l-226.133-226.133z',\n  ]"
						},
						{
							"id": 780,
							"name": "ChevronRight",
							"kind": 32,
							"kindString": "Variable",
							"flags": {},
							"sources": [
								{
									"fileName": "src/Icon/Icon.tsx",
									"line": 61,
									"character": 16
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "string"
								}
							},
							"defaultValue": " [\n    'M669.867 482.133l-256-256c-17.067-17.067-42.667-17.067-59.733 0s-17.067 42.667 0 59.733l226.133 226.133-226.133 226.133c-17.067 17.067-17.067 42.667 0 59.733 8.533 8.533 17.067 12.8 29.867 12.8s21.333-4.267 29.867-12.8l256-256c17.067-17.067 17.067-42.667 0-59.733z',\n  ]"
						},
						{
							"id": 781,
							"name": "Circle",
							"kind": 32,
							"kindString": "Variable",
							"flags": {},
							"sources": [
								{
									"fileName": "src/Icon/Icon.tsx",
									"line": 64,
									"character": 10
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "string"
								}
							},
							"defaultValue": " [\n    'M512 42.667c-260.267 0-469.333 209.067-469.333 469.333s209.067 469.333 469.333 469.333 469.333-209.067 469.333-469.333-209.067-469.333-469.333-469.333zM512 896c-213.333 0-384-170.667-384-384s170.667-384 384-384c213.333 0 384 170.667 384 384s-170.667 384-384 384z',\n  ]"
						},
						{
							"id": 782,
							"name": "Code",
							"kind": 32,
							"kindString": "Variable",
							"flags": {},
							"sources": [
								{
									"fileName": "src/Icon/Icon.tsx",
									"line": 67,
									"character": 8
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "string"
								}
							},
							"defaultValue": " [\n    'M968.533 482.133l-256-256c-17.067-17.067-42.667-17.067-59.733 0s-17.067 42.667 0 59.733l226.133 226.133-226.133 226.133c-17.067 17.067-17.067 42.667 0 59.733 8.533 8.533 21.333 12.8 29.867 12.8s21.333-4.267 29.867-12.8l256-256c17.067-17.067 17.067-42.667 0-59.733z',\n    'M371.2 226.133c-17.067-17.067-42.667-17.067-59.733 0l-256 256c-17.067 17.067-17.067 42.667 0 59.733l256 256c8.533 8.533 17.067 12.8 29.867 12.8s21.333-4.267 29.867-12.8c17.067-17.067 17.067-42.667 0-59.733l-226.133-226.133 226.133-226.133c17.067-17.067 17.067-42.667 0-59.733z',\n  ]"
						},
						{
							"id": 783,
							"name": "Cog",
							"kind": 32,
							"kindString": "Variable",
							"flags": {},
							"sources": [
								{
									"fileName": "src/Icon/Icon.tsx",
									"line": 71,
									"character": 7
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "string"
								}
							},
							"defaultValue": " [\n    'M512 341.333c-93.867 0-170.667 76.8-170.667 170.667s76.8 170.667 170.667 170.667c93.867 0 170.667-76.8 170.667-170.667s-76.8-170.667-170.667-170.667zM512 597.333c-46.933 0-85.333-38.4-85.333-85.333s38.4-85.333 85.333-85.333c46.933 0 85.333 38.4 85.333 85.333s-38.4 85.333-85.333 85.333z',\n    'M866.133 657.067c4.267-8.533 12.8-17.067 29.867-17.067 72.533 0 128-55.467 128-128s-55.467-128-128-128h-8.533c-8.533 0-17.067-4.267-21.333-12.8 0-4.267 0-4.267-4.267-8.533-4.267-8.533-4.267-21.333 8.533-34.133 51.2-51.2 51.2-132.267 0-179.2v0c0 0 0 0 0 0-25.6-25.6-55.467-38.4-89.6-38.4 0 0 0 0 0 0-34.133 0-68.267 12.8-93.867 38.4-8.533 8.533-21.333 8.533-29.867 4.267-8.533 0-17.067-12.8-17.067-25.6 0-72.533-55.467-128-128-128s-128 55.467-128 128v8.533c0 8.533-4.267 17.067-12.8 21.333-4.267 0-4.267 0-8.533 4.267-8.533 4.267-21.333 0-34.133-8.533-51.2-51.2-132.267-51.2-179.2 0-51.2 51.2-51.2 132.267 4.267 183.467 8.533 8.533 8.533 21.333 4.267 34.133-4.267 8.533-17.067 17.067-29.867 17.067-72.533 0-128 55.467-128 128s55.467 128 128 128h8.533c12.8 0 21.333 8.533 25.6 17.067s4.267 21.333-8.533 34.133c-25.6 25.6-38.4 55.467-38.4 89.6s12.8 64 38.4 89.6c0 0 0 0 0 0 51.2 51.2 132.267 51.2 183.467-4.267 8.533-8.533 21.333-8.533 34.133-4.267s17.067 12.8 17.067 29.867c0 72.533 55.467 128 128 128s128-55.467 128-128v-8.533c0-12.8 8.533-21.333 17.067-25.6s21.333-4.267 34.133 8.533c51.2 51.2 132.267 51.2 179.2 0 51.2-51.2 51.2-132.267-4.267-183.467-4.267-8.533-8.533-21.333-4.267-29.867 0 0 0 0 0 0zM789.333 622.933c-17.067 42.667-8.533 89.6 25.6 128 8.533 8.533 12.8 17.067 12.8 29.867s-4.267 21.333-12.8 29.867c-8.533 8.533-17.067 12.8-29.867 12.8 0 0 0 0 0 0-12.8 0-21.333-4.267-34.133-17.067-34.133-34.133-81.067-42.667-123.733-21.333-42.667 17.067-68.267 59.733-68.267 102.4v8.533c0 25.6-17.067 42.667-42.667 42.667s-42.667-17.067-42.667-42.667c0 0 0-4.267 0-4.267 0-46.933-29.867-85.333-72.533-102.4-12.8-8.533-29.867-8.533-46.933-8.533-29.867 0-59.733 12.8-81.067 34.133-17.067 17.067-42.667 17.067-59.733 0 0 0 0 0 0 0v0c-8.533-8.533-12.8-17.067-12.8-29.867s4.267-21.333 17.067-34.133c34.133-34.133 42.667-81.067 21.333-123.733-17.067-42.667-59.733-68.267-102.4-68.267h-8.533c-25.6 0-42.667-17.067-42.667-42.667s17.067-42.667 42.667-42.667c0 0 4.267 0 4.267 0 46.933 0 85.333-29.867 102.4-72.533s8.533-89.6-25.6-128c-17.067-17.067-17.067-42.667 0-59.733s42.667-17.067 64 4.267c29.867 29.867 76.8 38.4 115.2 25.6 4.267 0 8.533 0 12.8-4.267 42.667-17.067 68.267-59.733 68.267-102.4v-8.533c0-25.6 17.067-42.667 42.667-42.667s42.667 17.067 42.667 46.933c0 46.933 25.6 85.333 68.267 102.4s89.6 8.533 128-25.6c8.533-8.533 17.067-12.8 29.867-12.8v0c12.8 0 21.333 4.267 29.867 12.8 0 0 0 0 0 0 17.067 17.067 17.067 42.667-4.267 64-29.867 29.867-38.4 76.8-25.6 115.2 0 4.267 0 8.533 4.267 12.8 17.067 42.667 59.733 68.267 102.4 68.267h8.533c25.6 0 42.667 17.067 42.667 42.667s-17.067 42.667-46.933 42.667c-42.667-0-85.333 25.6-102.4 68.267z',\n  ]"
						},
						{
							"id": 784,
							"name": "Copy",
							"kind": 32,
							"kindString": "Variable",
							"flags": {},
							"sources": [
								{
									"fileName": "src/Icon/Icon.tsx",
									"line": 75,
									"character": 8
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "string"
								}
							},
							"defaultValue": " [\n    'M853.333 341.333h-384c-72.533 0-128 55.467-128 128v384c0 72.533 55.467 128 128 128h384c72.533 0 128-55.467 128-128v-384c0-72.533-55.467-128-128-128zM896 853.333c0 25.6-17.067 42.667-42.667 42.667h-384c-25.6 0-42.667-17.067-42.667-42.667v-384c0-25.6 17.067-42.667 42.667-42.667h384c25.6 0 42.667 17.067 42.667 42.667v384z',\n    'M213.333 597.333h-42.667c-25.6 0-42.667-17.067-42.667-42.667v-384c0-25.6 17.067-42.667 42.667-42.667h384c25.6 0 42.667 17.067 42.667 42.667v42.667c0 25.6 17.067 42.667 42.667 42.667s42.667-17.067 42.667-42.667v-42.667c0-72.533-55.467-128-128-128h-384c-72.533 0-128 55.467-128 128v384c0 72.533 55.467 128 128 128h42.667c25.6 0 42.667-17.067 42.667-42.667s-17.067-42.667-42.667-42.667z',\n  ]"
						},
						{
							"id": 785,
							"name": "Cross",
							"kind": 32,
							"kindString": "Variable",
							"flags": {},
							"sources": [
								{
									"fileName": "src/Icon/Icon.tsx",
									"line": 79,
									"character": 9
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "string"
								}
							},
							"defaultValue": " [\n    'M571.733 512l226.133-226.133c17.067-17.067 17.067-42.667 0-59.733s-42.667-17.067-59.733 0l-226.133 226.133-226.133-226.133c-17.067-17.067-42.667-17.067-59.733 0s-17.067 42.667 0 59.733l226.133 226.133-226.133 226.133c-17.067 17.067-17.067 42.667 0 59.733 8.533 8.533 17.067 12.8 29.867 12.8s21.333-4.267 29.867-12.8l226.133-226.133 226.133 226.133c8.533 8.533 21.333 12.8 29.867 12.8s21.333-4.267 29.867-12.8c17.067-17.067 17.067-42.667 0-59.733l-226.133-226.133z',\n  ]"
						},
						{
							"id": 786,
							"name": "Delete",
							"kind": 32,
							"kindString": "Variable",
							"flags": {},
							"sources": [
								{
									"fileName": "src/Icon/Icon.tsx",
									"line": 82,
									"character": 10
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "string"
								}
							},
							"defaultValue": " [\n    'M896 213.333h-170.667v-42.667c0-72.533-55.467-128-128-128h-170.667c-72.533 0-128 55.467-128 128v42.667h-170.667c-25.6 0-42.667 17.067-42.667 42.667s17.067 42.667 42.667 42.667h42.667v554.667c0 72.533 55.467 128 128 128h426.667c72.533 0 128-55.467 128-128v-554.667h42.667c25.6 0 42.667-17.067 42.667-42.667s-17.067-42.667-42.667-42.667zM384 170.667c0-25.6 17.067-42.667 42.667-42.667h170.667c25.6 0 42.667 17.067 42.667 42.667v42.667h-256v-42.667zM768 853.333c0 25.6-17.067 42.667-42.667 42.667h-426.667c-25.6 0-42.667-17.067-42.667-42.667v-554.667h512v554.667z',\n    'M426.667 426.667c-25.6 0-42.667 17.067-42.667 42.667v256c0 25.6 17.067 42.667 42.667 42.667s42.667-17.067 42.667-42.667v-256c0-25.6-17.067-42.667-42.667-42.667z',\n    'M597.333 426.667c-25.6 0-42.667 17.067-42.667 42.667v256c0 25.6 17.067 42.667 42.667 42.667s42.667-17.067 42.667-42.667v-256c0-25.6-17.067-42.667-42.667-42.667z',\n  ]"
						},
						{
							"id": 787,
							"name": "End",
							"kind": 32,
							"kindString": "Variable",
							"flags": {},
							"sources": [
								{
									"fileName": "src/Icon/Icon.tsx",
									"line": 87,
									"character": 7
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "string"
								}
							},
							"defaultValue": " [\n    'M238.933 136.533c-12.8-8.533-29.867-12.8-42.667-4.267-17.067 8.533-25.6 21.333-25.6 38.4v682.667c0 17.067 8.533 29.867 25.6 38.4 4.267 4.267 12.8 4.267 17.067 4.267 8.533 0 17.067-4.267 25.6-8.533l426.667-341.333c8.533-8.533 17.067-21.333 17.067-34.133s-4.267-25.6-17.067-34.133l-426.667-341.333zM256 763.733v-503.467l315.733 251.733-315.733 251.733z',\n    'M810.667 170.667c-25.6 0-42.667 17.067-42.667 42.667v597.333c0 25.6 17.067 42.667 42.667 42.667s42.667-17.067 42.667-42.667v-597.333c0-25.6-17.067-42.667-42.667-42.667z',\n  ]"
						},
						{
							"id": 788,
							"name": "Error",
							"kind": 32,
							"kindString": "Variable",
							"flags": {},
							"sources": [
								{
									"fileName": "src/Icon/Icon.tsx",
									"line": 91,
									"character": 9
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "string"
								}
							},
							"defaultValue": " [\n    'M981.333 746.667l-358.4-605.867c-17.067-29.867-46.933-51.2-81.067-59.733s-68.267-4.267-98.133 12.8c-17.067 8.533-34.133 25.6-42.667 42.667 0 0 0 0 0 0l-358.4 610.133c-34.133 59.733-12.8 140.8 46.933 174.933 17.067 12.8 38.4 17.067 59.733 17.067h725.333c34.133 0 68.267-12.8 89.6-38.4 25.6-25.6 38.4-55.467 38.4-89.6-4.267-21.333-8.533-46.933-21.333-64zM904.533 840.533c-8.533 8.533-21.333 12.8-29.867 12.8h-725.333c-8.533 0-12.8 0-21.333-4.267-21.333-12.8-25.6-38.4-17.067-59.733l362.667-601.6c4.267-4.267 8.533-12.8 12.8-12.8 21.333-12.8 46.933-4.267 59.733 12.8l362.667 601.6c4.267 4.267 4.267 12.8 4.267 21.333 4.267 12.8-4.267 21.333-8.533 29.867z',\n    'M512 341.333c-25.6 0-42.667 17.067-42.667 42.667v170.667c0 25.6 17.067 42.667 42.667 42.667s42.667-17.067 42.667-42.667v-170.667c0-25.6-17.067-42.667-42.667-42.667z',\n    'M482.133 695.467c-8.533 8.533-12.8 17.067-12.8 29.867s4.267 21.333 12.8 29.867c8.533 8.533 17.067 12.8 29.867 12.8s21.333-4.267 29.867-12.8c8.533-8.533 12.8-21.333 12.8-29.867s-4.267-21.333-12.8-29.867c-17.067-17.067-42.667-17.067-59.733 0z',\n  ]"
						},
						{
							"id": 789,
							"name": "ExternalLink",
							"kind": 32,
							"kindString": "Variable",
							"flags": {},
							"sources": [
								{
									"fileName": "src/Icon/Icon.tsx",
									"line": 96,
									"character": 16
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "string"
								}
							},
							"defaultValue": " [\n    'M768 512c-25.6 0-42.667 17.067-42.667 42.667v256c0 25.6-17.067 42.667-42.667 42.667h-469.333c-25.6 0-42.667-17.067-42.667-42.667v-469.333c0-25.6 17.067-42.667 42.667-42.667h256c25.6 0 42.667-17.067 42.667-42.667s-17.067-42.667-42.667-42.667h-256c-72.533 0-128 55.467-128 128v469.333c0 72.533 55.467 128 128 128h469.333c72.533 0 128-55.467 128-128v-256c0-25.6-17.067-42.667-42.667-42.667z',\n    'M934.4 110.933c-4.267-8.533-12.8-17.067-21.333-21.333-4.267-4.267-12.8-4.267-17.067-4.267h-256c-25.6 0-42.667 17.067-42.667 42.667s17.067 42.667 42.667 42.667h153.6l-396.8 396.8c-17.067 17.067-17.067 42.667 0 59.733 8.533 8.533 17.067 12.8 29.867 12.8s21.333-4.267 29.867-12.8l396.8-396.8v153.6c0 25.6 17.067 42.667 42.667 42.667s42.667-17.067 42.667-42.667v-256c0-4.267 0-12.8-4.267-17.067z',\n  ]"
						},
						{
							"id": 790,
							"name": "Eye",
							"kind": 32,
							"kindString": "Variable",
							"flags": {},
							"sources": [
								{
									"fileName": "src/Icon/Icon.tsx",
									"line": 100,
									"character": 7
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "string"
								}
							},
							"defaultValue": " [\n    'M1019.733 494.933c-8.533-17.067-187.733-366.933-507.733-366.933s-499.2 349.867-507.733 366.933c-4.267 12.8-4.267 25.6 0 38.4 8.533 12.8 187.733 362.667 507.733 362.667s499.2-349.867 507.733-366.933c4.267-8.533 4.267-25.6 0-34.133zM512 810.667c-230.4 0-379.733-230.4-422.4-298.667 38.4-68.267 192-298.667 422.4-298.667s379.733 230.4 422.4 298.667c-42.667 68.267-192 298.667-422.4 298.667z',\n    'M512 341.333c-93.867 0-170.667 76.8-170.667 170.667s76.8 170.667 170.667 170.667c93.867 0 170.667-76.8 170.667-170.667s-76.8-170.667-170.667-170.667zM512 597.333c-46.933 0-85.333-38.4-85.333-85.333s38.4-85.333 85.333-85.333c46.933 0 85.333 38.4 85.333 85.333s-38.4 85.333-85.333 85.333z',\n  ]"
						},
						{
							"id": 793,
							"name": "File",
							"kind": 32,
							"kindString": "Variable",
							"flags": {},
							"sources": [
								{
									"fileName": "src/Icon/Icon.tsx",
									"line": 111,
									"character": 8
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "string"
								}
							},
							"defaultValue": " [\n    'M891.733 366.933c-4.267-4.267-4.267-8.533-8.533-12.8l-298.667-298.667c-4.267-4.267-8.533-8.533-12.8-8.533-4.267-4.267-12.8-4.267-17.067-4.267h-298.667c-72.533 0-128 55.467-128 128v682.667c0 72.533 55.467 128 128 128h512c72.533 0 128-55.467 128-128v-469.333c0-4.267 0-12.8-4.267-17.067zM597.333 187.733l153.6 153.6h-153.6v-153.6zM768 896h-512c-25.6 0-42.667-17.067-42.667-42.667v-682.667c0-25.6 17.067-42.667 42.667-42.667h256v256c0 25.6 17.067 42.667 42.667 42.667h256v426.667c0 25.6-17.067 42.667-42.667 42.667z',\n  ]"
						},
						{
							"id": 791,
							"name": "Forward",
							"kind": 32,
							"kindString": "Variable",
							"flags": {},
							"sources": [
								{
									"fileName": "src/Icon/Icon.tsx",
									"line": 104,
									"character": 11
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "string"
								}
							},
							"defaultValue": " [\n    'M964.267 477.867l-384-298.667c-12.8-8.533-29.867-12.8-46.933-4.267-12.8 8.533-21.333 21.333-21.333 38.4v597.333c0 17.067 8.533 29.867 25.6 38.4 4.267 4.267 12.8 4.267 17.067 4.267 8.533 0 17.067-4.267 25.6-8.533l384-298.667c8.533-8.533 17.067-21.333 17.067-34.133s-4.267-25.6-17.067-34.133zM597.333 725.333v-426.667l273.067 213.333-273.067 213.333z',\n    'M110.933 179.2c-12.8-8.533-29.867-12.8-42.667-4.267-17.067 8.533-25.6 21.333-25.6 38.4v597.333c0 17.067 8.533 29.867 25.6 38.4 4.267 4.267 12.8 4.267 17.067 4.267 8.533 0 17.067-4.267 25.6-8.533l384-298.667c8.533-8.533 17.067-21.333 17.067-34.133s-4.267-25.6-17.067-34.133l-384-298.667zM128 725.333v-426.667l273.067 213.333-273.067 213.333z',\n  ]"
						},
						{
							"id": 792,
							"name": "Github",
							"kind": 32,
							"kindString": "Variable",
							"flags": {},
							"sources": [
								{
									"fileName": "src/Icon/Icon.tsx",
									"line": 108,
									"character": 10
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "string"
								}
							},
							"defaultValue": " [\n    'M960 362.667c0-64-21.333-119.467-59.733-170.667 12.8-55.467 8.533-115.2-12.8-166.4-4.267-12.8-12.8-21.333-25.6-25.6-17.067-4.267-72.533-12.8-187.733 59.733-93.867-21.333-192-21.333-281.6 0-115.2-72.533-170.667-64-187.733-59.733-12.8 4.267-21.333 12.8-25.6 25.6-25.6 55.467-29.867 110.933-12.8 166.4-38.4 51.2-59.733 110.933-59.733 170.667 0 230.4 128 302.933 247.467 328.533-8.533 29.867-12.8 55.467-12.8 81.067v4.267c-89.6 17.067-119.467-17.067-153.6-64-21.333-29.867-46.933-64-93.867-72.533-21.333-4.267-46.933 8.533-51.2 29.867s8.533 46.933 29.867 51.2c12.8 4.267 29.867 21.333 46.933 42.667 38.4 51.2 93.867 119.467 221.867 102.4v72.533c0 25.6 17.067 42.667 42.667 42.667s42.667-17.067 42.667-42.667v-123.733c0 0 0-4.267 0-4.267v-38.4c0-29.867 8.533-55.467 29.867-76.8 12.8-12.8 17.067-29.867 8.533-42.667-4.267-17.067-17.067-25.6-34.133-29.867-123.733-17.067-238.933-55.467-238.933-256 0-51.2 17.067-93.867 51.2-132.267 12.8-12.8 12.8-29.867 8.533-42.667-12.8-38.4-12.8-72.533-4.267-106.667 21.333 4.267 59.733 17.067 110.933 55.467 12.8 8.533 25.6 8.533 38.4 4.267 89.6-25.6 187.733-25.6 277.333 0 12.8 4.267 25.6 0 34.133-4.267 55.467-38.4 93.867-51.2 110.933-55.467 8.533 34.133 8.533 68.267-4.267 102.4-4.267 17.067-4.267 34.133 8.533 42.667 34.133 34.133 51.2 81.067 51.2 132.267 0 200.533-115.2 243.2-238.933 256-17.067 0-29.867 12.8-34.133 29.867s0 34.133 8.533 42.667c21.333 21.333 29.867 51.2 29.867 81.067v166.4c0 25.6 17.067 42.667 42.667 42.667s42.667-17.067 42.667-42.667v-162.133c4.267-29.867 0-55.467-12.8-81.067 102.4-21.333 247.467-89.6 247.467-332.8z',\n  ]"
						},
						{
							"id": 794,
							"name": "Info",
							"kind": 32,
							"kindString": "Variable",
							"flags": {},
							"sources": [
								{
									"fileName": "src/Icon/Icon.tsx",
									"line": 114,
									"character": 8
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "string"
								}
							},
							"defaultValue": " [\n    'M981.333 512c0-129.579-52.565-246.997-137.472-331.861s-202.283-137.472-331.861-137.472-246.997 52.565-331.861 137.472-137.472 202.283-137.472 331.861 52.565 246.997 137.472 331.861 202.283 137.472 331.861 137.472 246.997-52.565 331.861-137.472 137.472-202.283 137.472-331.861zM896 512c0 106.069-42.923 201.984-112.469 271.531s-165.461 112.469-271.531 112.469-201.984-42.923-271.531-112.469-112.469-165.461-112.469-271.531 42.923-201.984 112.469-271.531 165.461-112.469 271.531-112.469 201.984 42.923 271.531 112.469 112.469 165.461 112.469 271.531zM554.667 682.667v-170.667c0-23.552-19.115-42.667-42.667-42.667s-42.667 19.115-42.667 42.667v170.667c0 23.552 19.115 42.667 42.667 42.667s42.667-19.115 42.667-42.667zM512 384c23.552 0 42.667-19.115 42.667-42.667s-19.115-42.667-42.667-42.667-42.667 19.115-42.667 42.667 19.115 42.667 42.667 42.667z',\n  ]"
						},
						{
							"id": 795,
							"name": "Letter",
							"kind": 32,
							"kindString": "Variable",
							"flags": {},
							"sources": [
								{
									"fileName": "src/Icon/Icon.tsx",
									"line": 117,
									"character": 10
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "string"
								}
							},
							"defaultValue": " [\n    'M853.333 128h-682.667c-72.533 0-128 55.467-128 128v512c0 72.533 55.467 128 128 128h682.667c72.533 0 128-55.467 128-128v-512c0-72.533-55.467-128-128-128zM170.667 213.333h682.667c17.067 0 29.867 8.533 38.4 25.6l-379.733 264.533-379.733-264.533c8.533-17.067 21.333-25.6 38.4-25.6zM853.333 810.667h-682.667c-25.6 0-42.667-17.067-42.667-42.667v-430.933l358.4 251.733c8.533 4.267 17.067 8.533 25.6 8.533s17.067-4.267 25.6-8.533l358.4-251.733v430.933c0 25.6-17.067 42.667-42.667 42.667z',\n  ]"
						},
						{
							"id": 796,
							"name": "Maximize",
							"kind": 32,
							"kindString": "Variable",
							"flags": {},
							"sources": [
								{
									"fileName": "src/Icon/Icon.tsx",
									"line": 120,
									"character": 12
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "string"
								}
							},
							"defaultValue": " [\n    'M341.333 853.333h-128c-25.6 0-42.667-17.067-42.667-42.667v-128c0-25.6-17.067-42.667-42.667-42.667s-42.667 17.067-42.667 42.667v128c0 72.533 55.467 128 128 128h128c25.6 0 42.667-17.067 42.667-42.667s-17.067-42.667-42.667-42.667z',\n    'M341.333 85.333h-128c-72.533 0-128 55.467-128 128v128c0 25.6 17.067 42.667 42.667 42.667s42.667-17.067 42.667-42.667v-128c0-25.6 17.067-42.667 42.667-42.667h128c25.6 0 42.667-17.067 42.667-42.667s-17.067-42.667-42.667-42.667z',\n    'M810.667 85.333h-128c-25.6 0-42.667 17.067-42.667 42.667s17.067 42.667 42.667 42.667h128c25.6 0 42.667 17.067 42.667 42.667v128c0 25.6 17.067 42.667 42.667 42.667s42.667-17.067 42.667-42.667v-128c0-72.533-55.467-128-128-128z',\n    'M896 640c-25.6 0-42.667 17.067-42.667 42.667v128c0 25.6-17.067 42.667-42.667 42.667h-128c-25.6 0-42.667 17.067-42.667 42.667s17.067 42.667 42.667 42.667h128c72.533 0 128-55.467 128-128v-128c0-25.6-17.067-42.667-42.667-42.667z',\n  ]"
						},
						{
							"id": 797,
							"name": "Menu",
							"kind": 32,
							"kindString": "Variable",
							"flags": {},
							"sources": [
								{
									"fileName": "src/Icon/Icon.tsx",
									"line": 126,
									"character": 8
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "string"
								}
							},
							"defaultValue": " [\n    'M896 469.333h-768c-25.6 0-42.667 17.067-42.667 42.667s17.067 42.667 42.667 42.667h768c25.6 0 42.667-17.067 42.667-42.667s-17.067-42.667-42.667-42.667z',\n    'M128 298.667h768c25.6 0 42.667-17.067 42.667-42.667s-17.067-42.667-42.667-42.667h-768c-25.6 0-42.667 17.067-42.667 42.667s17.067 42.667 42.667 42.667z',\n    'M896 725.333h-768c-25.6 0-42.667 17.067-42.667 42.667s17.067 42.667 42.667 42.667h768c25.6 0 42.667-17.067 42.667-42.667s-17.067-42.667-42.667-42.667z',\n  ]"
						},
						{
							"id": 798,
							"name": "Minimize",
							"kind": 32,
							"kindString": "Variable",
							"flags": {},
							"sources": [
								{
									"fileName": "src/Icon/Icon.tsx",
									"line": 131,
									"character": 12
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "string"
								}
							},
							"defaultValue": " [\n    'M256 640h-128c-25.6 0-42.667 17.067-42.667 42.667s17.067 42.667 42.667 42.667h128c25.6 0 42.667 17.067 42.667 42.667v128c0 25.6 17.067 42.667 42.667 42.667s42.667-17.067 42.667-42.667v-128c0-72.533-55.467-128-128-128z',\n    'M768 384h128c25.6 0 42.667-17.067 42.667-42.667s-17.067-42.667-42.667-42.667h-128c-25.6 0-42.667-17.067-42.667-42.667v-128c0-25.6-17.067-42.667-42.667-42.667s-42.667 17.067-42.667 42.667v128c0 72.533 55.467 128 128 128z',\n    'M896 640h-128c-72.533 0-128 55.467-128 128v128c0 25.6 17.067 42.667 42.667 42.667s42.667-17.067 42.667-42.667v-128c0-25.6 17.067-42.667 42.667-42.667h128c25.6 0 42.667-17.067 42.667-42.667s-17.067-42.667-42.667-42.667z',\n    'M341.333 85.333c-25.6 0-42.667 17.067-42.667 42.667v128c0 25.6-17.067 42.667-42.667 42.667h-128c-25.6 0-42.667 17.067-42.667 42.667s17.067 42.667 42.667 42.667h128c72.533 0 128-55.467 128-128v-128c0-25.6-17.067-42.667-42.667-42.667z',\n  ]"
						},
						{
							"id": 799,
							"name": "Moon",
							"kind": 32,
							"kindString": "Variable",
							"flags": {},
							"sources": [
								{
									"fileName": "src/Icon/Icon.tsx",
									"line": 137,
									"character": 8
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "string"
								}
							},
							"defaultValue": " [\n    'M917.333 507.733c-12.8-8.533-34.133-8.533-46.933 4.267-89.6 68.267-213.333 68.267-302.933 0-115.2-85.333-140.8-243.2-55.467-358.4 8.533-12.8 12.8-29.867 4.267-46.933-8.533-12.8-25.6-21.333-42.667-21.333-204.8 17.067-366.933 179.2-384 384-21.333 234.667 149.333 443.733 384 465.067 12.8 0 25.6 0 38.4 0 98.133 0 196.267-34.133 273.067-98.133 89.6-72.533 140.8-174.933 153.6-290.133 0-12.8-8.533-29.867-21.333-38.4zM733.867 772.267c-68.267 59.733-157.867 85.333-247.467 76.8-187.733-17.067-324.267-183.467-307.2-371.2 12.8-132.267 102.4-247.467 221.867-290.133-51.2 136.533-4.267 298.667 119.467 392.533 93.867 68.267 213.333 85.333 320 46.933-25.6 55.467-59.733 106.667-106.667 145.067z',\n  ]"
						},
						{
							"id": 800,
							"name": "Pause",
							"kind": 32,
							"kindString": "Variable",
							"flags": {},
							"sources": [
								{
									"fileName": "src/Icon/Icon.tsx",
									"line": 140,
									"character": 9
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "string"
								}
							},
							"defaultValue": " [\n    'M426.667 128h-170.667c-25.6 0-42.667 17.067-42.667 42.667v682.667c0 25.6 17.067 42.667 42.667 42.667h170.667c25.6 0 42.667-17.067 42.667-42.667v-682.667c0-25.6-17.067-42.667-42.667-42.667zM384 810.667h-85.333v-597.333h85.333v597.333z',\n    'M768 128h-170.667c-25.6 0-42.667 17.067-42.667 42.667v682.667c0 25.6 17.067 42.667 42.667 42.667h170.667c25.6 0 42.667-17.067 42.667-42.667v-682.667c0-25.6-17.067-42.667-42.667-42.667zM725.333 810.667h-85.333v-597.333h85.333v597.333z',\n  ]"
						},
						{
							"id": 801,
							"name": "Pencil",
							"kind": 32,
							"kindString": "Variable",
							"flags": {},
							"sources": [
								{
									"fileName": "src/Icon/Icon.tsx",
									"line": 144,
									"character": 10
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "string"
								}
							},
							"defaultValue": " [\n    'M925.867 311.467l-213.333-213.333c-17.067-17.067-42.667-17.067-59.733 0l-554.667 554.667c-8.533 8.533-12.8 17.067-12.8 29.867v213.333c0 25.6 17.067 42.667 42.667 42.667h213.333c12.8 0 21.333-4.267 29.867-12.8l554.667-554.667c17.067-17.067 17.067-42.667 0-59.733zM324.267 853.333h-153.6v-153.6l512-512 153.6 153.6-512 512z',\n  ]"
						},
						{
							"id": 802,
							"name": "Play",
							"kind": 32,
							"kindString": "Variable",
							"flags": {},
							"sources": [
								{
									"fileName": "src/Icon/Icon.tsx",
									"line": 147,
									"character": 8
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "string"
								}
							},
							"defaultValue": " [\n    'M832 477.867l-597.333-384c-12.8-8.533-29.867-8.533-42.667 0-12.8 4.267-21.333 17.067-21.333 34.133v768c0 17.067 8.533 29.867 21.333 38.4 8.533 4.267 12.8 4.267 21.333 4.267s17.067-4.267 21.333-8.533l597.333-384c12.8-8.533 21.333-21.333 21.333-34.133s-8.533-29.867-21.333-34.133zM256 819.2v-614.4l477.867 307.2-477.867 307.2z',\n  ]"
						},
						{
							"id": 803,
							"name": "Progress",
							"kind": 32,
							"kindString": "Variable",
							"flags": {},
							"sources": [
								{
									"fileName": "src/Icon/Icon.tsx",
									"line": 150,
									"character": 12
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "string"
								}
							},
							"defaultValue": " [\n    'M512 42.667c-25.6 0-42.667 17.067-42.667 42.667v170.667c0 25.6 17.067 42.667 42.667 42.667s42.667-17.067 42.667-42.667v-170.667c0-25.6-17.067-42.667-42.667-42.667z',\n    'M512 725.333c-25.6 0-42.667 17.067-42.667 42.667v170.667c0 25.6 17.067 42.667 42.667 42.667s42.667-17.067 42.667-42.667v-170.667c0-25.6-17.067-42.667-42.667-42.667z',\n    'M238.933 179.2c-17.067-17.067-42.667-17.067-59.733 0s-17.067 42.667 0 59.733l119.467 119.467c8.533 8.533 21.333 12.8 29.867 12.8s21.333-4.267 29.867-12.8c17.067-17.067 17.067-42.667 0-59.733l-119.467-119.467z',\n    'M721.067 661.333c-17.067-17.067-42.667-17.067-59.733 0s-17.067 42.667 0 59.733l119.467 119.467c8.533 8.533 21.333 12.8 29.867 12.8s21.333-4.267 29.867-12.8c17.067-17.067 17.067-42.667 0-59.733l-119.467-119.467z',\n    'M298.667 512c0-25.6-17.067-42.667-42.667-42.667h-170.667c-25.6 0-42.667 17.067-42.667 42.667s17.067 42.667 42.667 42.667h170.667c25.6 0 42.667-17.067 42.667-42.667z',\n    'M938.667 469.333h-170.667c-25.6 0-42.667 17.067-42.667 42.667s17.067 42.667 42.667 42.667h170.667c25.6 0 42.667-17.067 42.667-42.667s-17.067-42.667-42.667-42.667z',\n    'M302.933 661.333l-119.467 119.467c-17.067 17.067-17.067 42.667 0 59.733 8.533 8.533 21.333 12.8 29.867 12.8s21.333-4.267 29.867-12.8l119.467-119.467c17.067-17.067 17.067-42.667 0-59.733s-46.933-17.067-59.733 0z',\n    'M691.2 375.467c12.8 0 21.333-4.267 29.867-12.8l119.467-119.467c17.067-17.067 17.067-42.667 0-59.733s-42.667-17.067-59.733 0l-119.467 119.467c-17.067 17.067-17.067 42.667 0 59.733 8.533 8.533 21.333 12.8 29.867 12.8z',\n  ]"
						},
						{
							"id": 804,
							"name": "QuestionMark",
							"kind": 32,
							"kindString": "Variable",
							"flags": {},
							"sources": [
								{
									"fileName": "src/Icon/Icon.tsx",
									"line": 160,
									"character": 16
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "string"
								}
							},
							"defaultValue": " [\n    'M512 42.667c-260.267 0-469.333 209.067-469.333 469.333s209.067 469.333 469.333 469.333 469.333-209.067 469.333-469.333-209.067-469.333-469.333-469.333zM512 896c-213.333 0-384-170.667-384-384s170.667-384 384-384c213.333 0 384 170.667 384 384s-170.667 384-384 384z',\n    'M563.2 264.533c-89.6-29.867-187.733 17.067-217.6 102.4-4.267 25.6 4.267 51.2 29.867 55.467 21.333 8.533 46.933-4.267 55.467-25.6 17.067-42.667 64-68.267 110.933-51.2 34.133 12.8 55.467 42.667 55.467 81.067 0 42.667-72.533 76.8-98.133 89.6-21.333 8.533-34.133 29.867-25.6 55.467 4.267 17.067 21.333 29.867 38.4 29.867 4.267 0 8.533 0 12.8-4.267 17.067-4.267 157.867-55.467 157.867-166.4-4.267-76.8-51.2-140.8-119.467-166.4z',\n    'M482.133 695.467c-8.533 8.533-12.8 17.067-12.8 29.867s4.267 21.333 12.8 29.867c8.533 8.533 17.067 12.8 29.867 12.8s21.333-4.267 29.867-12.8c8.533-8.533 12.8-21.333 12.8-29.867s-4.267-21.333-12.8-29.867c-17.067-17.067-42.667-17.067-59.733 0z',\n  ]"
						},
						{
							"id": 805,
							"name": "Redo",
							"kind": 32,
							"kindString": "Variable",
							"flags": {},
							"sources": [
								{
									"fileName": "src/Icon/Icon.tsx",
									"line": 165,
									"character": 8
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "string"
								}
							},
							"defaultValue": " [\n    'M1024 430.933c0 0 0-4.267 0-4.267v-256c0-25.6-17.067-42.667-42.667-42.667s-42.667 17.067-42.667 42.667v157.867l-123.733-119.467c-42.667-42.667-98.133-81.067-157.867-102.4-226.133-76.8-469.333 42.667-546.133 264.533s38.4 465.067 260.267 546.133c46.933 12.8 93.867 21.333 140.8 21.333 174.933 0 341.333-110.933 401.067-285.867 8.533-21.333-4.267-46.933-25.6-55.467s-46.933 4.267-55.467 25.6c-64 179.2-256 268.8-435.2 209.067-179.2-64-268.8-256-209.067-435.2 64-174.933 260.267-268.8 439.467-204.8 46.933 17.067 93.867 42.667 128 81.067l119.467 110.933h-149.333c-25.6 0-42.667 17.067-42.667 42.667s17.067 42.667 42.667 42.667h256c0 0 0 0 0 0 4.267 0 8.533 0 8.533-4.267 0 0 4.267 0 4.267 0s4.267-4.267 4.267-4.267c4.267 0 8.533-4.267 8.533-8.533 0 0 0 0 0 0s0-4.267 4.267-4.267c0-4.267 4.267-4.267 4.267-8.533 8.533-0 8.533-4.267 8.533-8.533z',\n  ]"
						},
						{
							"id": 806,
							"name": "Refresh",
							"kind": 32,
							"kindString": "Variable",
							"flags": {},
							"sources": [
								{
									"fileName": "src/Icon/Icon.tsx",
									"line": 168,
									"character": 11
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "string"
								}
							},
							"defaultValue": " [\n    'M887.467 601.6c-21.333-8.533-46.933 4.267-55.467 25.6-17.067 46.933-42.667 93.867-81.067 128-59.733 64-149.333 98.133-238.933 98.133 0 0 0 0 0 0-89.6 0-174.933-34.133-243.2-102.4l-119.467-110.933h149.333c25.6 0 42.667-17.067 42.667-42.667s-17.067-42.667-42.667-42.667h-256c0 0 0 0 0 0-4.267 0-8.533 0-8.533 4.267 0 0-4.267 0-4.267 0s-4.267 0-4.267 4.267c-4.267 0-8.533 4.267-8.533 8.533 0 0 0 0 0 0s0 4.267-4.267 4.267c0 4.267-4.267 4.267-4.267 8.533s0 4.267 0 8.533c0 0 0 4.267 0 4.267v256c0 25.6 17.067 42.667 42.667 42.667s42.667-17.067 42.667-42.667v-157.867l123.733 119.467c72.533 81.067 179.2 123.733 294.4 123.733 0 0 0 0 0 0 115.2 0 221.867-42.667 302.933-123.733 42.667-42.667 81.067-98.133 102.4-157.867 4.267-25.6-8.533-51.2-29.867-55.467z',\n    'M1024 430.933c0 0 0-4.267 0-4.267v-256c0-25.6-17.067-42.667-42.667-42.667s-42.667 17.067-42.667 42.667v157.867l-123.733-119.467c-42.667-42.667-98.133-81.067-157.867-102.4-110.933-34.133-226.133-29.867-328.533 21.333-102.4 46.933-179.2 132.267-217.6 243.2-8.533 21.333 4.267 46.933 25.6 51.2 21.333 8.533 46.933-4.267 55.467-25.6 29.867-85.333 93.867-153.6 174.933-196.267 81.067-38.4 174.933-42.667 260.267-12.8 46.933 17.067 93.867 42.667 128 81.067l119.467 115.2h-149.333c-25.6 0-42.667 17.067-42.667 42.667s17.067 42.667 42.667 42.667h256c4.267 0 12.8 0 17.067-4.267 0 0 0 0 0 0 4.267-4.267 8.533-4.267 12.8-8.533 0 0 0 0 0 0s0-4.267 4.267-4.267c0-4.267 4.267-4.267 4.267-8.533 4.267-4.267 4.267-8.533 4.267-12.8z',\n  ]"
						},
						{
							"id": 807,
							"name": "Save",
							"kind": 32,
							"kindString": "Variable",
							"flags": {},
							"sources": [
								{
									"fileName": "src/Icon/Icon.tsx",
									"line": 172,
									"character": 8
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "string"
								}
							},
							"defaultValue": " [\n    'M925.867 311.467l-213.333-213.333c-8.533-8.533-17.067-12.8-29.867-12.8h-469.333c-72.533 0-128 55.467-128 128v597.333c0 72.533 55.467 128 128 128h597.333c72.533 0 128-55.467 128-128v-469.333c0-12.8-4.267-21.333-12.8-29.867zM682.667 853.333h-341.333v-256h341.333v256zM853.333 810.667c0 25.6-17.067 42.667-42.667 42.667h-42.667v-298.667c0-25.6-17.067-42.667-42.667-42.667h-426.667c-25.6 0-42.667 17.067-42.667 42.667v298.667h-42.667c-25.6 0-42.667-17.067-42.667-42.667v-597.333c0-25.6 17.067-42.667 42.667-42.667h42.667v170.667c0 25.6 17.067 42.667 42.667 42.667h341.333c25.6 0 42.667-17.067 42.667-42.667s-17.067-42.667-42.667-42.667h-298.667v-128h324.267l187.733 187.733v452.267z',\n  ]"
						},
						{
							"id": 808,
							"name": "Square",
							"kind": 32,
							"kindString": "Variable",
							"flags": {},
							"sources": [
								{
									"fileName": "src/Icon/Icon.tsx",
									"line": 175,
									"character": 10
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "string"
								}
							},
							"defaultValue": " [\n    'M810.667 85.333h-597.333c-72.533 0-128 55.467-128 128v597.333c0 72.533 55.467 128 128 128h597.333c72.533 0 128-55.467 128-128v-597.333c0-72.533-55.467-128-128-128zM853.333 810.667c0 25.6-17.067 42.667-42.667 42.667h-597.333c-25.6 0-42.667-17.067-42.667-42.667v-597.333c0-25.6 17.067-42.667 42.667-42.667h597.333c25.6 0 42.667 17.067 42.667 42.667v597.333z',\n  ]"
						},
						{
							"id": 809,
							"name": "Star",
							"kind": 32,
							"kindString": "Variable",
							"flags": {},
							"sources": [
								{
									"fileName": "src/Icon/Icon.tsx",
									"line": 178,
									"character": 8
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "string"
								}
							},
							"defaultValue": " [\n    'M981.333 384c-4.267-17.067-17.067-25.6-34.133-29.867l-273.067-38.4-123.733-247.467c-12.8-29.867-64-29.867-76.8 0l-123.733 243.2-268.8 42.667c-17.067 0-29.867 12.8-38.4 29.867-4.267 17.067 0 34.133 12.8 42.667l196.267 192-46.933 273.067c-4.267 17.067 4.267 34.133 17.067 42.667s29.867 12.8 46.933 4.267l243.2-128 243.2 128c8.533 0 12.8 0 21.333 0s17.067-4.267 25.6-8.533c12.8-8.533 21.333-25.6 17.067-42.667l-46.933-273.067 196.267-192c12.8-8.533 17.067-25.6 12.8-38.4zM695.467 571.733c-8.533 12.8-12.8 25.6-12.8 38.4l34.133 209.067-187.733-98.133c-12.8-8.533-25.6-8.533-38.4 0l-187.733 98.133 38.4-209.067c0-12.8-4.267-25.6-12.8-38.4l-153.6-145.067 209.067-29.867c12.8 0 25.6-12.8 34.133-21.333l93.867-192 93.867 187.733c4.267 12.8 17.067 21.333 34.133 21.333l209.067 29.867-153.6 149.333z',\n  ]"
						},
						{
							"id": 810,
							"name": "Sun",
							"kind": 32,
							"kindString": "Variable",
							"flags": {},
							"sources": [
								{
									"fileName": "src/Icon/Icon.tsx",
									"line": 181,
									"character": 7
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "string"
								}
							},
							"defaultValue": " [\n    'M512 256c-140.8 0-256 115.2-256 256s115.2 256 256 256 256-115.2 256-256-115.2-256-256-256zM512 682.667c-93.867 0-170.667-76.8-170.667-170.667s76.8-170.667 170.667-170.667c93.867 0 170.667 76.8 170.667 170.667s-76.8 170.667-170.667 170.667z',\n    'M512 170.667c25.6 0 42.667-17.067 42.667-42.667v-85.333c0-25.6-17.067-42.667-42.667-42.667s-42.667 17.067-42.667 42.667v85.333c0 25.6 17.067 42.667 42.667 42.667z',\n    'M512 853.333c-25.6 0-42.667 17.067-42.667 42.667v85.333c0 25.6 17.067 42.667 42.667 42.667s42.667-17.067 42.667-42.667v-85.333c0-25.6-17.067-42.667-42.667-42.667z',\n    'M209.067 268.8c8.533 8.533 21.333 12.8 29.867 12.8s21.333-4.267 29.867-12.8c17.067-17.067 17.067-42.667 0-59.733l-59.733-59.733c-17.067-17.067-42.667-17.067-59.733 0s-17.067 42.667 0 59.733l59.733 59.733z',\n    'M814.933 755.2c-17.067-17.067-42.667-17.067-59.733 0s-17.067 42.667 0 59.733l59.733 59.733c8.533 8.533 21.333 12.8 29.867 12.8s21.333-4.267 29.867-12.8c17.067-17.067 17.067-42.667 0-59.733l-59.733-59.733z',\n    'M170.667 512c0-25.6-17.067-42.667-42.667-42.667h-85.333c-25.6 0-42.667 17.067-42.667 42.667s17.067 42.667 42.667 42.667h85.333c25.6 0 42.667-17.067 42.667-42.667z',\n    'M981.333 469.333h-85.333c-25.6 0-42.667 17.067-42.667 42.667s17.067 42.667 42.667 42.667h85.333c25.6 0 42.667-17.067 42.667-42.667s-17.067-42.667-42.667-42.667z',\n    'M209.067 755.2l-59.733 59.733c-17.067 17.067-17.067 42.667 0 59.733 8.533 8.533 21.333 12.8 29.867 12.8s21.333-4.267 29.867-12.8l59.733-59.733c17.067-17.067 17.067-42.667 0-59.733s-42.667-17.067-59.733 0z',\n    'M785.067 281.6c12.8 0 21.333-4.267 29.867-12.8l59.733-59.733c17.067-17.067 17.067-42.667 0-59.733s-42.667-17.067-59.733 0l-59.733 59.733c-17.067 17.067-17.067 42.667 0 59.733 4.267 8.533 17.067 12.8 29.867 12.8z',\n  ]"
						},
						{
							"id": 811,
							"name": "Twitter",
							"kind": 32,
							"kindString": "Variable",
							"flags": {},
							"sources": [
								{
									"fileName": "src/Icon/Icon.tsx",
									"line": 192,
									"character": 11
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "string"
								}
							},
							"defaultValue": " [\n    'M1006.933 93.867c-12.8-8.533-34.133-8.533-46.933 0-29.867 21.333-64 38.4-98.133 51.2-85.333-76.8-217.6-81.067-307.2-4.267-55.467 46.933-85.333 110.933-85.333 179.2-123.733-8.533-234.667-72.533-307.2-174.933-8.533-12.8-21.333-17.067-38.4-17.067s-29.867 12.8-34.133 25.6c-4.267 4.267-46.933 106.667-42.667 230.4 4.267 106.667 46.933 243.2 204.8 341.333-64 29.867-136.533 42.667-209.067 42.667-17.067 0-38.4 12.8-42.667 29.867s4.267 38.4 21.333 46.933c106.667 59.733 221.867 89.6 328.533 89.6s209.067-25.6 302.933-81.067c183.467-102.4 285.867-298.667 285.867-533.333 0-8.533 0-12.8 0-21.333 42.667-46.933 72.533-102.4 85.333-162.133 4.267-17.067-4.267-34.133-17.067-42.667zM861.867 256c-8.533 8.533-12.8 25.6-12.8 38.4 4.267 8.533 4.267 17.067 4.267 25.6 0 204.8-89.6 371.2-243.2 460.8-119.467 68.267-260.267 85.333-401.067 51.2 55.467-17.067 106.667-38.4 153.6-72.533 17.067-8.533 21.333-21.333 21.333-38.4s-12.8-29.867-25.6-34.133c-247.467-110.933-238.933-320-213.333-426.667 93.867 93.867 226.133 149.333 366.933 145.067 21.333 0 42.667-21.333 42.667-42.667v-42.667c0-42.667 17.067-85.333 51.2-115.2 59.733-55.467 157.867-46.933 209.067 12.8 12.8 12.8 29.867 17.067 42.667 12.8 8.533-4.267 21.333-4.267 29.867-8.533-8.533 12.8-17.067 21.333-25.6 34.133z',\n  ]"
						},
						{
							"id": 812,
							"name": "Undo",
							"kind": 32,
							"kindString": "Variable",
							"flags": {},
							"sources": [
								{
									"fileName": "src/Icon/Icon.tsx",
									"line": 195,
									"character": 8
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "string"
								}
							},
							"defaultValue": " [\n    'M913.067 371.2c-38.4-106.667-115.2-192-217.6-243.2s-217.6-55.467-324.267-17.067c-59.733 21.333-115.2 55.467-157.867 98.133l-128 119.467v-157.867c0-25.6-17.067-42.667-42.667-42.667s-42.667 17.067-42.667 42.667v256c0 0 0 4.267 0 4.267 0 4.267 0 8.533 0 8.533 0 4.267 4.267 4.267 4.267 8.533 0 0 0 4.267 4.267 4.267 0 0 0 0 0 0 4.267 4.267 4.267 4.267 8.533 4.267 0 0 4.267 4.267 4.267 4.267s4.267 0 4.267 0 8.533 0 8.533 0c0 0 0 0 0 0h256c25.6 0 42.667-17.067 42.667-42.667s-8.533-34.133-34.133-34.133h-149.333l119.467-115.2c34.133-34.133 81.067-64 128-81.067 85.333-29.867 179.2-25.6 260.267 12.8s145.067 106.667 174.933 196.267c29.867 85.333 25.6 179.2-12.8 260.267s-106.667 145.067-196.267 174.933c-179.2 64-371.2-29.867-435.2-209.067-8.533-21.333-34.133-34.133-55.467-25.6s-34.133 34.133-25.6 55.467c64 174.933 230.4 285.867 405.333 285.867 46.933 0 93.867-8.533 140.8-25.6 221.867-76.8 341.333-320 260.267-541.867z',\n  ]"
						},
						{
							"id": 813,
							"name": "Water",
							"kind": 32,
							"kindString": "Variable",
							"flags": {},
							"sources": [
								{
									"fileName": "src/Icon/Icon.tsx",
									"line": 198,
									"character": 9
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "string"
								}
							},
							"defaultValue": " [\n    'M785.067 324.267l-243.2-238.933c-8.533-8.533-17.067-12.8-29.867-12.8v0c-12.8 0-21.333 4.267-29.867 12.8l-238.933 238.933c0 0 0 0 0 0-76.8 72.533-115.2 170.667-115.2 273.067s38.4 200.533 110.933 273.067c72.533 72.533 170.667 110.933 273.067 110.933 0 0 0 0 0 0 102.4 0 200.533-38.4 273.067-110.933 149.333-149.333 149.333-392.533 0-546.133zM725.333 810.667c-59.733 55.467-132.267 85.333-213.333 85.333 0 0 0 0 0 0-81.067 0-153.6-29.867-209.067-85.333-59.733-59.733-89.6-132.267-89.6-213.333s29.867-153.6 85.333-209.067c0 0 0 0 0 0l209.067-213.333 213.333 213.333c119.467 115.2 119.467 302.933 4.267 422.4z',\n  ]"
						}
					],
					"groups": [
						{
							"title": "Variables",
							"kind": 32,
							"children": [
								776,
								777,
								778,
								779,
								780,
								781,
								782,
								783,
								784,
								785,
								786,
								787,
								788,
								789,
								790,
								793,
								791,
								792,
								794,
								795,
								796,
								797,
								798,
								799,
								800,
								801,
								802,
								803,
								804,
								805,
								806,
								807,
								808,
								809,
								810,
								811,
								812,
								813
							]
						}
					],
					"sources": [
						{
							"fileName": "src/Icon/Icon.tsx",
							"line": 46,
							"character": 17
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "object"
					}
				}
			],
			"groups": [
				{
					"title": "Interfaces",
					"kind": 256,
					"children": [
						746
					]
				},
				{
					"title": "Type aliases",
					"kind": 4194304,
					"children": [
						774
					]
				},
				{
					"title": "Variables",
					"kind": 32,
					"children": [
						814
					]
				},
				{
					"title": "Object literals",
					"kind": 2097152,
					"children": [
						775
					]
				}
			],
			"sources": [
				{
					"fileName": "src/Icon/Icon.tsx",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 816,
			"name": "\"Image/Image\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "/Users/harry/Projects/personal/preshape/src/Image/Image.tsx",
			"children": [
				{
					"id": 817,
					"name": "ImageProps",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"children": [
						{
							"id": 818,
							"name": "absolute",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Quick way of absolutely position to common places"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 58,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "fullscreen"
									},
									{
										"type": "stringLiteral",
										"value": "top"
									},
									{
										"type": "stringLiteral",
										"value": "top-left"
									},
									{
										"type": "stringLiteral",
										"value": "top-right"
									},
									{
										"type": "stringLiteral",
										"value": "bottom"
									},
									{
										"type": "stringLiteral",
										"value": "bottom-left"
									},
									{
										"type": "stringLiteral",
										"value": "bottom-right"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.absolute",
								"id": 3
							}
						},
						{
							"id": 819,
							"name": "backgroundColor",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Background colour to be applied, shades are taken from the current\ntheme."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 70,
									"character": 17
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeColor",
								"id": 30
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.backgroundColor",
								"id": 4
							}
						},
						{
							"id": 820,
							"name": "borderColor",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Border colour to be applied, shades are taken from the current\ntheme."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 75,
									"character": 13
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeColor",
								"id": 30
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.borderColor",
								"id": 5
							}
						},
						{
							"id": 821,
							"name": "borderRadius",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Adds styling of a border radius to one of the size multiples."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 79,
									"character": 14
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "x1"
									},
									{
										"type": "stringLiteral",
										"value": "x2"
									},
									{
										"type": "stringLiteral",
										"value": "x3"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.borderRadius",
								"id": 6
							}
						},
						{
							"id": 822,
							"name": "borderSize",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Thickness of the border to be applied"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 81,
									"character": 12
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "x1"
									},
									{
										"type": "stringLiteral",
										"value": "x2"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.borderSize",
								"id": 7
							}
						},
						{
							"id": 823,
							"name": "clickable",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Adds styling to indicate that the element is clickable"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 83,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.clickable",
								"id": 8
							}
						},
						{
							"id": 824,
							"name": "container",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies relative positioning to contain child elements."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 85,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.container",
								"id": 9
							}
						},
						{
							"id": 825,
							"name": "display",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies display styling"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 87,
									"character": 9
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "block"
									},
									{
										"type": "stringLiteral",
										"value": "inline-block"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.display",
								"id": 10
							}
						},
						{
							"id": 826,
							"name": "fixed",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Quick way of absolutely position to common places"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 89,
									"character": 7
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "fullscreen"
									},
									{
										"type": "stringLiteral",
										"value": "top"
									},
									{
										"type": "stringLiteral",
										"value": "top-left"
									},
									{
										"type": "stringLiteral",
										"value": "top-right"
									},
									{
										"type": "stringLiteral",
										"value": "bottom"
									},
									{
										"type": "stringLiteral",
										"value": "bottom-left"
									},
									{
										"type": "stringLiteral",
										"value": "bottom-right"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.fixed",
								"id": 11
							}
						},
						{
							"id": 827,
							"name": "height",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Fixed height applied through inline styling"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 98,
									"character": 8
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.height",
								"id": 12
							}
						},
						{
							"id": 828,
							"name": "margin",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Margins applied for the global spacing variables"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 100,
									"character": 8
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeSize",
								"id": 31
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.margin",
								"id": 13
							}
						},
						{
							"id": 829,
							"name": "maxWidth",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Max width applied through inline styling"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 102,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.maxWidth",
								"id": 14
							}
						},
						{
							"id": 830,
							"name": "minHeight",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Max height applied through inline styling"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 104,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.minHeight",
								"id": 15
							}
						},
						{
							"id": 831,
							"name": "minWidth",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Min width applied through inline style"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 106,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.minWidth",
								"id": 16
							}
						},
						{
							"id": 832,
							"name": "overflow",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Overflow"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 108,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "stringLiteral",
										"value": "hidden"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.overflow",
								"id": 17
							}
						},
						{
							"id": 833,
							"name": "padding",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Padding applied for the global spacing variables"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 110,
									"character": 9
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeSize",
								"id": 31
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.padding",
								"id": 18
							}
						},
						{
							"id": 834,
							"name": "paddingHorizontal",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Horizontal padding applied for the global spacing variables"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 112,
									"character": 19
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeSize",
								"id": 31
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.paddingHorizontal",
								"id": 19
							}
						},
						{
							"id": 835,
							"name": "paddingVertical",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Vertical pa?dding applied for the global spacing variables"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 114,
									"character": 17
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeSize",
								"id": 31
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.paddingVertical",
								"id": 20
							}
						},
						{
							"id": 836,
							"name": "scrollable",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies overflow styling to enable/disable scrolling."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 116,
									"character": 12
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.scrollable",
								"id": 21
							}
						},
						{
							"id": 837,
							"name": "tag",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Any valid HTML or SVG element tag.",
								"tags": [
									{
										"tag": "reference",
										"text": "false\n"
									}
								]
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 122,
									"character": 5
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeAllElementTags",
								"id": 34
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.tag",
								"id": 22
							}
						},
						{
							"id": 838,
							"name": "textColor",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Text colour to be applied."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 126,
									"character": 11
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeColor",
								"id": 30
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.textColor",
								"id": 23
							}
						},
						{
							"id": 839,
							"name": "theme",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Theme applied to this element and inherited for child elements (until\na descendant theme is applied)."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 131,
									"character": 7
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeTheme",
								"id": 35
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.theme",
								"id": 24
							}
						},
						{
							"id": 840,
							"name": "width",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Fixed width applied through inline styling"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 133,
									"character": 7
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.width",
								"id": 25
							}
						},
						{
							"id": 841,
							"name": "zIndex",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "z-index number for layering elements."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 135,
									"character": 8
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "number"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.zIndex",
								"id": 26
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								818,
								819,
								820,
								821,
								822,
								823,
								824,
								825,
								826,
								827,
								828,
								829,
								830,
								831,
								832,
								833,
								834,
								835,
								836,
								837,
								838,
								839,
								840,
								841
							]
						}
					],
					"sources": [
						{
							"fileName": "src/Image/Image.tsx",
							"line": 5,
							"character": 27
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"name": "BaseProps",
							"id": 2
						}
					]
				},
				{
					"id": 842,
					"name": "Image",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "src/Image/Image.tsx",
							"line": 7,
							"character": 11
						}
					],
					"type": {
						"type": "reference",
						"name": "ForwardRefExoticComponent",
						"typeArguments": [
							{
								"type": "intersection",
								"types": [
									{
										"type": "reference",
										"name": "ImageProps",
										"id": 817
									},
									{
										"type": "reflection",
										"declaration": {
											"id": 843,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {}
										}
									},
									{
										"type": "reference",
										"name": "RefAttributes",
										"typeArguments": [
											{
												"type": "reference",
												"name": "HTMLImageElement"
											}
										]
									}
								]
							}
						]
					},
					"defaultValue": " React.forwardRef<HTMLImageElement, Attributes<HTMLImageElement, ImageProps>>((props, ref) => {\n  return (\n    <Base { ...props }\n        className=\"Image\"\n        ref={ ref }\n        tag=\"img\" />\n  );\n})"
				}
			],
			"groups": [
				{
					"title": "Interfaces",
					"kind": 256,
					"children": [
						817
					]
				},
				{
					"title": "Variables",
					"kind": 32,
					"children": [
						842
					]
				}
			],
			"sources": [
				{
					"fileName": "src/Image/Image.tsx",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 885,
			"name": "\"Input/Input\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "/Users/harry/Projects/personal/preshape/src/Input/Input.tsx",
			"children": [
				{
					"id": 886,
					"name": "InputProps",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"children": [
						{
							"id": 902,
							"name": "absolute",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Quick way of absolutely position to common places"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 58,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "fullscreen"
									},
									{
										"type": "stringLiteral",
										"value": "top"
									},
									{
										"type": "stringLiteral",
										"value": "top-left"
									},
									{
										"type": "stringLiteral",
										"value": "top-right"
									},
									{
										"type": "stringLiteral",
										"value": "bottom"
									},
									{
										"type": "stringLiteral",
										"value": "bottom-left"
									},
									{
										"type": "stringLiteral",
										"value": "bottom-right"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.absolute",
								"id": 3
							}
						},
						{
							"id": 888,
							"name": "align",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Text alignment"
							},
							"sources": [
								{
									"fileName": "src/Text/Text.tsx",
									"line": 32,
									"character": 7
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "start"
									},
									{
										"type": "stringLiteral",
										"value": "middle"
									},
									{
										"type": "stringLiteral",
										"value": "end"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TextProps.align",
								"id": 266
							}
						},
						{
							"id": 903,
							"name": "backgroundColor",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Background colour to be applied, shades are taken from the current\ntheme."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 70,
									"character": 17
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeColor",
								"id": 30
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.backgroundColor",
								"id": 4
							}
						},
						{
							"id": 904,
							"name": "borderColor",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Border colour to be applied, shades are taken from the current\ntheme."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 75,
									"character": 13
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeColor",
								"id": 30
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.borderColor",
								"id": 5
							}
						},
						{
							"id": 905,
							"name": "borderRadius",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Adds styling of a border radius to one of the size multiples."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 79,
									"character": 14
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "x1"
									},
									{
										"type": "stringLiteral",
										"value": "x2"
									},
									{
										"type": "stringLiteral",
										"value": "x3"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.borderRadius",
								"id": 6
							}
						},
						{
							"id": 906,
							"name": "borderSize",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Thickness of the border to be applied"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 81,
									"character": 12
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "x1"
									},
									{
										"type": "stringLiteral",
										"value": "x2"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.borderSize",
								"id": 7
							}
						},
						{
							"id": 889,
							"name": "breakOn",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "How the block of text should break onto new lines."
							},
							"sources": [
								{
									"fileName": "src/Text/Text.tsx",
									"line": 34,
									"character": 9
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "all"
									},
									{
										"type": "stringLiteral",
										"value": "none"
									},
									{
										"type": "stringLiteral",
										"value": "word"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TextProps.breakOn",
								"id": 267
							}
						},
						{
							"id": 907,
							"name": "clickable",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Adds styling to indicate that the element is clickable"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 83,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.clickable",
								"id": 8
							}
						},
						{
							"id": 908,
							"name": "container",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies relative positioning to contain child elements."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 85,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.container",
								"id": 9
							}
						},
						{
							"id": 909,
							"name": "display",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies display styling"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 87,
									"character": 9
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "block"
									},
									{
										"type": "stringLiteral",
										"value": "inline-block"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.display",
								"id": 10
							}
						},
						{
							"id": 890,
							"name": "ellipsis",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Replaces the overflow of text with the ellipsis character"
							},
							"sources": [
								{
									"fileName": "src/Text/Text.tsx",
									"line": 36,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TextProps.ellipsis",
								"id": 268
							}
						},
						{
							"id": 891,
							"name": "emphasis",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies emphasis styling"
							},
							"sources": [
								{
									"fileName": "src/Text/Text.tsx",
									"line": 38,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TextProps.emphasis",
								"id": 269
							}
						},
						{
							"id": 910,
							"name": "fixed",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Quick way of absolutely position to common places"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 89,
									"character": 7
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "fullscreen"
									},
									{
										"type": "stringLiteral",
										"value": "top"
									},
									{
										"type": "stringLiteral",
										"value": "top-left"
									},
									{
										"type": "stringLiteral",
										"value": "top-right"
									},
									{
										"type": "stringLiteral",
										"value": "bottom"
									},
									{
										"type": "stringLiteral",
										"value": "bottom-left"
									},
									{
										"type": "stringLiteral",
										"value": "bottom-right"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.fixed",
								"id": 11
							}
						},
						{
							"id": 892,
							"name": "heading",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies a heading font family style"
							},
							"sources": [
								{
									"fileName": "src/Text/Text.tsx",
									"line": 40,
									"character": 9
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TextProps.heading",
								"id": 270
							}
						},
						{
							"id": 911,
							"name": "height",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Fixed height applied through inline styling"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 98,
									"character": 8
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.height",
								"id": 12
							}
						},
						{
							"id": 893,
							"name": "inline",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Text default to block display, this will apply inline display."
							},
							"sources": [
								{
									"fileName": "src/Text/Text.tsx",
									"line": 42,
									"character": 8
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TextProps.inline",
								"id": 271
							}
						},
						{
							"id": 887,
							"name": "label",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "A label that gives describes what the input is for"
							},
							"sources": [
								{
									"fileName": "src/Input/Input.tsx",
									"line": 9,
									"character": 7
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							}
						},
						{
							"id": 912,
							"name": "margin",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Margins applied for the global spacing variables"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 100,
									"character": 8
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeSize",
								"id": 31
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.margin",
								"id": 13
							}
						},
						{
							"id": 913,
							"name": "maxWidth",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Max width applied through inline styling"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 102,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.maxWidth",
								"id": 14
							}
						},
						{
							"id": 914,
							"name": "minHeight",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Max height applied through inline styling"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 104,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.minHeight",
								"id": 15
							}
						},
						{
							"id": 915,
							"name": "minWidth",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Min width applied through inline style"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 106,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.minWidth",
								"id": 16
							}
						},
						{
							"id": 894,
							"name": "monospace",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies a monospace font family style"
							},
							"sources": [
								{
									"fileName": "src/Text/Text.tsx",
									"line": 44,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TextProps.monospace",
								"id": 272
							}
						},
						{
							"id": 916,
							"name": "overflow",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Overflow"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 108,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "stringLiteral",
										"value": "hidden"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.overflow",
								"id": 17
							}
						},
						{
							"id": 917,
							"name": "padding",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Padding applied for the global spacing variables"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 110,
									"character": 9
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeSize",
								"id": 31
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.padding",
								"id": 18
							}
						},
						{
							"id": 918,
							"name": "paddingHorizontal",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Horizontal padding applied for the global spacing variables"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 112,
									"character": 19
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeSize",
								"id": 31
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.paddingHorizontal",
								"id": 19
							}
						},
						{
							"id": 919,
							"name": "paddingVertical",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Vertical pa?dding applied for the global spacing variables"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 114,
									"character": 17
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeSize",
								"id": 31
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.paddingVertical",
								"id": 20
							}
						},
						{
							"id": 920,
							"name": "scrollable",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies overflow styling to enable/disable scrolling."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 116,
									"character": 12
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.scrollable",
								"id": 21
							}
						},
						{
							"id": 895,
							"name": "size",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Size of the text"
							},
							"sources": [
								{
									"fileName": "src/Text/Text.tsx",
									"line": 46,
									"character": 6
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeTextSize",
								"id": 304
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TextProps.size",
								"id": 273
							}
						},
						{
							"id": 896,
							"name": "strong",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies strong weight styling"
							},
							"sources": [
								{
									"fileName": "src/Text/Text.tsx",
									"line": 48,
									"character": 8
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TextProps.strong",
								"id": 274
							}
						},
						{
							"id": 897,
							"name": "subscript",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies subscript baseline styling"
							},
							"sources": [
								{
									"fileName": "src/Text/Text.tsx",
									"line": 50,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TextProps.subscript",
								"id": 275
							}
						},
						{
							"id": 898,
							"name": "superscript",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies superscript baseline styling"
							},
							"sources": [
								{
									"fileName": "src/Text/Text.tsx",
									"line": 52,
									"character": 13
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TextProps.superscript",
								"id": 276
							}
						},
						{
							"id": 921,
							"name": "tag",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Any valid HTML or SVG element tag.",
								"tags": [
									{
										"tag": "reference",
										"text": "false\n"
									}
								]
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 122,
									"character": 5
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeAllElementTags",
								"id": 34
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.tag",
								"id": 22
							}
						},
						{
							"id": 922,
							"name": "textColor",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Text colour to be applied."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 126,
									"character": 11
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeColor",
								"id": 30
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.textColor",
								"id": 23
							}
						},
						{
							"id": 923,
							"name": "theme",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Theme applied to this element and inherited for child elements (until\na descendant theme is applied)."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 131,
									"character": 7
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeTheme",
								"id": 35
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.theme",
								"id": 24
							}
						},
						{
							"id": 899,
							"name": "titlecase",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies title casing styling"
							},
							"sources": [
								{
									"fileName": "src/Text/Text.tsx",
									"line": 54,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TextProps.titlecase",
								"id": 277
							}
						},
						{
							"id": 900,
							"name": "uppercase",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies uppercasing styling"
							},
							"sources": [
								{
									"fileName": "src/Text/Text.tsx",
									"line": 56,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TextProps.uppercase",
								"id": 278
							}
						},
						{
							"id": 901,
							"name": "weak",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies weak weight styling"
							},
							"sources": [
								{
									"fileName": "src/Text/Text.tsx",
									"line": 58,
									"character": 6
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TextProps.weak",
								"id": 279
							}
						},
						{
							"id": 924,
							"name": "width",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Fixed width applied through inline styling"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 133,
									"character": 7
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.width",
								"id": 25
							}
						},
						{
							"id": 925,
							"name": "zIndex",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "z-index number for layering elements."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 135,
									"character": 8
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "number"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.zIndex",
								"id": 26
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								902,
								888,
								903,
								904,
								905,
								906,
								889,
								907,
								908,
								909,
								890,
								891,
								910,
								892,
								911,
								893,
								887,
								912,
								913,
								914,
								915,
								894,
								916,
								917,
								918,
								919,
								920,
								895,
								896,
								897,
								898,
								921,
								922,
								923,
								899,
								900,
								901,
								924,
								925
							]
						}
					],
					"sources": [
						{
							"fileName": "src/Input/Input.tsx",
							"line": 7,
							"character": 27
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"name": "TextProps",
							"id": 265
						}
					]
				},
				{
					"id": 926,
					"name": "Input",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "src/Input/Input.tsx",
							"line": 12,
							"character": 11
						}
					],
					"type": {
						"type": "reference",
						"name": "ForwardRefExoticComponent",
						"typeArguments": [
							{
								"type": "intersection",
								"types": [
									{
										"type": "reference",
										"name": "InputProps",
										"id": 886
									},
									{
										"type": "reflection",
										"declaration": {
											"id": 927,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {}
										}
									},
									{
										"type": "reference",
										"name": "RefAttributes",
										"typeArguments": [
											{
												"type": "reference",
												"name": "HTMLInputElement"
											}
										]
									}
								]
							}
						]
					},
					"defaultValue": " React.forwardRef<HTMLInputElement, Attributes<HTMLInputElement, InputProps>>((props, ref) => {\n  const {\n    disabled,\n    label,\n    margin,\n    padding,\n    paddingHorizontal = 'x3',\n    paddingVertical = 'x2',\n    ...rest\n  } = props;\n\n  return (\n    <InputLabel\n        disabled={ disabled }\n        label={ label }\n        margin={ margin }\n        paddingHorizontal={ padding || paddingHorizontal }\n        paddingVertical={ padding || paddingVertical }>\n      <Text { ...rest }\n          className=\"Input\"\n          disabled={ disabled }\n          paddingHorizontal={ padding || paddingHorizontal }\n          paddingVertical={ padding || paddingVertical }\n          ref={ ref }\n          size=\"x1\"\n          strong\n          tag=\"input\" />\n    </InputLabel>\n  );\n})"
				}
			],
			"groups": [
				{
					"title": "Interfaces",
					"kind": 256,
					"children": [
						886
					]
				},
				{
					"title": "Variables",
					"kind": 32,
					"children": [
						926
					]
				}
			],
			"sources": [
				{
					"fileName": "src/Input/Input.tsx",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 844,
			"name": "\"InputLabel/InputLabel\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "/Users/harry/Projects/personal/preshape/src/InputLabel/InputLabel.tsx",
			"children": [
				{
					"id": 845,
					"name": "InputLabelProps",
					"kind": 256,
					"kindString": "Interface",
					"flags": {},
					"children": [
						{
							"id": 861,
							"name": "absolute",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Quick way of absolutely position to common places"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 58,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "fullscreen"
									},
									{
										"type": "stringLiteral",
										"value": "top"
									},
									{
										"type": "stringLiteral",
										"value": "top-left"
									},
									{
										"type": "stringLiteral",
										"value": "top-right"
									},
									{
										"type": "stringLiteral",
										"value": "bottom"
									},
									{
										"type": "stringLiteral",
										"value": "bottom-left"
									},
									{
										"type": "stringLiteral",
										"value": "bottom-right"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.absolute",
								"id": 3
							}
						},
						{
							"id": 851,
							"name": "alignChildren",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Short cut child alignment property for both alignChildrenHorizontal and\nalignChildrenVertical."
							},
							"sources": [
								{
									"fileName": "src/Flex/Flex.tsx",
									"line": 11,
									"character": 15
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "start"
									},
									{
										"type": "stringLiteral",
										"value": "middle"
									},
									{
										"type": "stringLiteral",
										"value": "end"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "FlexProps.alignChildren",
								"id": 175
							}
						},
						{
							"id": 852,
							"name": "alignChildrenHorizontal",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Horizontal alignment of children flex items."
							},
							"sources": [
								{
									"fileName": "src/Flex/Flex.tsx",
									"line": 13,
									"character": 25
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "start"
									},
									{
										"type": "stringLiteral",
										"value": "middle"
									},
									{
										"type": "stringLiteral",
										"value": "end"
									},
									{
										"type": "stringLiteral",
										"value": "around"
									},
									{
										"type": "stringLiteral",
										"value": "between"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "FlexProps.alignChildrenHorizontal",
								"id": 176
							}
						},
						{
							"id": 853,
							"name": "alignChildrenVertical",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Vertical alignment of children flex items."
							},
							"sources": [
								{
									"fileName": "src/Flex/Flex.tsx",
									"line": 15,
									"character": 23
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "start"
									},
									{
										"type": "stringLiteral",
										"value": "middle"
									},
									{
										"type": "stringLiteral",
										"value": "end"
									},
									{
										"type": "stringLiteral",
										"value": "around"
									},
									{
										"type": "stringLiteral",
										"value": "between"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "FlexProps.alignChildrenVertical",
								"id": 177
							}
						},
						{
							"id": 854,
							"name": "alignSelf",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Flex item alignment property (changes with parent direction)."
							},
							"sources": [
								{
									"fileName": "src/Flex/Flex.tsx",
									"line": 17,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "start"
									},
									{
										"type": "stringLiteral",
										"value": "middle"
									},
									{
										"type": "stringLiteral",
										"value": "end"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "FlexProps.alignSelf",
								"id": 178
							}
						},
						{
							"id": 862,
							"name": "backgroundColor",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Background colour to be applied, shades are taken from the current\ntheme."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 70,
									"character": 17
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeColor",
								"id": 30
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.backgroundColor",
								"id": 4
							}
						},
						{
							"id": 863,
							"name": "borderColor",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Border colour to be applied, shades are taken from the current\ntheme."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 75,
									"character": 13
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeColor",
								"id": 30
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.borderColor",
								"id": 5
							}
						},
						{
							"id": 864,
							"name": "borderRadius",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Adds styling of a border radius to one of the size multiples."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 79,
									"character": 14
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "x1"
									},
									{
										"type": "stringLiteral",
										"value": "x2"
									},
									{
										"type": "stringLiteral",
										"value": "x3"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.borderRadius",
								"id": 6
							}
						},
						{
							"id": 865,
							"name": "borderSize",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Thickness of the border to be applied"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 81,
									"character": 12
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "x1"
									},
									{
										"type": "stringLiteral",
										"value": "x2"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.borderSize",
								"id": 7
							}
						},
						{
							"id": 846,
							"name": "children",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "src/InputLabel/InputLabel.tsx",
									"line": 8,
									"character": 10
								}
							],
							"type": {
								"type": "reference",
								"name": "React.ReactNode"
							}
						},
						{
							"id": 866,
							"name": "clickable",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Adds styling to indicate that the element is clickable"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 83,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.clickable",
								"id": 8
							}
						},
						{
							"id": 867,
							"name": "container",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies relative positioning to contain child elements."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 85,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.container",
								"id": 9
							}
						},
						{
							"id": 855,
							"name": "direction",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Direction on which way to flex items."
							},
							"sources": [
								{
									"fileName": "src/Flex/Flex.tsx",
									"line": 19,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "horizontal"
									},
									{
										"type": "stringLiteral",
										"value": "vertical"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "FlexProps.direction",
								"id": 179
							}
						},
						{
							"id": 847,
							"name": "disabled",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/InputLabel/InputLabel.tsx",
									"line": 9,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							}
						},
						{
							"id": 868,
							"name": "display",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies display styling"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 87,
									"character": 9
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "block"
									},
									{
										"type": "stringLiteral",
										"value": "inline-block"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.display",
								"id": 10
							}
						},
						{
							"id": 869,
							"name": "fixed",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Quick way of absolutely position to common places"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 89,
									"character": 7
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "fullscreen"
									},
									{
										"type": "stringLiteral",
										"value": "top"
									},
									{
										"type": "stringLiteral",
										"value": "top-left"
									},
									{
										"type": "stringLiteral",
										"value": "top-right"
									},
									{
										"type": "stringLiteral",
										"value": "bottom"
									},
									{
										"type": "stringLiteral",
										"value": "bottom-left"
									},
									{
										"type": "stringLiteral",
										"value": "bottom-right"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.fixed",
								"id": 11
							}
						},
						{
							"id": 856,
							"name": "gap",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Spacing applied between child flex items, values are global spacing variables."
							},
							"sources": [
								{
									"fileName": "src/Flex/Flex.tsx",
									"line": 21,
									"character": 5
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeSize",
								"id": 31
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "FlexProps.gap",
								"id": 180
							}
						},
						{
							"id": 857,
							"name": "grow",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Flex item property if it should grow with available space."
							},
							"sources": [
								{
									"fileName": "src/Flex/Flex.tsx",
									"line": 23,
									"character": 6
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "FlexProps.grow",
								"id": 181
							}
						},
						{
							"id": 870,
							"name": "height",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Fixed height applied through inline styling"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 98,
									"character": 8
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.height",
								"id": 12
							}
						},
						{
							"id": 858,
							"name": "initial",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Initial width to flex from for a child item."
							},
							"sources": [
								{
									"fileName": "src/Flex/Flex.tsx",
									"line": 25,
									"character": 9
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "content"
									},
									{
										"type": "stringLiteral",
										"value": "container"
									},
									{
										"type": "stringLiteral",
										"value": "none"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "FlexProps.initial",
								"id": 182
							}
						},
						{
							"id": 848,
							"name": "label",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/InputLabel/InputLabel.tsx",
									"line": 10,
									"character": 7
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							}
						},
						{
							"id": 871,
							"name": "margin",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Margins applied for the global spacing variables"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 100,
									"character": 8
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeSize",
								"id": 31
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.margin",
								"id": 13
							}
						},
						{
							"id": 872,
							"name": "maxWidth",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Max width applied through inline styling"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 102,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.maxWidth",
								"id": 14
							}
						},
						{
							"id": 873,
							"name": "minHeight",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Max height applied through inline styling"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 104,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.minHeight",
								"id": 15
							}
						},
						{
							"id": 874,
							"name": "minWidth",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Min width applied through inline style"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 106,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.minWidth",
								"id": 16
							}
						},
						{
							"id": 875,
							"name": "overflow",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Overflow"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 108,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "stringLiteral",
										"value": "hidden"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.overflow",
								"id": 17
							}
						},
						{
							"id": 876,
							"name": "padding",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Padding applied for the global spacing variables"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 110,
									"character": 9
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeSize",
								"id": 31
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.padding",
								"id": 18
							}
						},
						{
							"id": 849,
							"name": "paddingHorizontal",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/InputLabel/InputLabel.tsx",
									"line": 11,
									"character": 19
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeSize",
								"id": 31
							},
							"overwrites": {
								"type": "reference",
								"name": "BaseProps.paddingHorizontal",
								"id": 19
							}
						},
						{
							"id": 850,
							"name": "paddingVertical",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/InputLabel/InputLabel.tsx",
									"line": 12,
									"character": 17
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeSize",
								"id": 31
							},
							"overwrites": {
								"type": "reference",
								"name": "BaseProps.paddingVertical",
								"id": 20
							}
						},
						{
							"id": 877,
							"name": "scrollable",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies overflow styling to enable/disable scrolling."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 116,
									"character": 12
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.scrollable",
								"id": 21
							}
						},
						{
							"id": 859,
							"name": "shrink",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Flex item property if it should shrink."
							},
							"sources": [
								{
									"fileName": "src/Flex/Flex.tsx",
									"line": 27,
									"character": 8
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "FlexProps.shrink",
								"id": 183
							}
						},
						{
							"id": 878,
							"name": "tag",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Any valid HTML or SVG element tag.",
								"tags": [
									{
										"tag": "reference",
										"text": "false\n"
									}
								]
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 122,
									"character": 5
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeAllElementTags",
								"id": 34
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.tag",
								"id": 22
							}
						},
						{
							"id": 879,
							"name": "textColor",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Text colour to be applied."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 126,
									"character": 11
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeColor",
								"id": 30
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.textColor",
								"id": 23
							}
						},
						{
							"id": 880,
							"name": "theme",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Theme applied to this element and inherited for child elements (until\na descendant theme is applied)."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 131,
									"character": 7
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeTheme",
								"id": 35
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.theme",
								"id": 24
							}
						},
						{
							"id": 881,
							"name": "width",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Fixed width applied through inline styling"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 133,
									"character": 7
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.width",
								"id": 25
							}
						},
						{
							"id": 860,
							"name": "wrap",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Flag to allow flex items to wrap over to new lines"
							},
							"sources": [
								{
									"fileName": "src/Flex/Flex.tsx",
									"line": 29,
									"character": 6
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "FlexProps.wrap",
								"id": 184
							}
						},
						{
							"id": 882,
							"name": "zIndex",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "z-index number for layering elements."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 135,
									"character": 8
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "number"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.zIndex",
								"id": 26
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								861,
								851,
								852,
								853,
								854,
								862,
								863,
								864,
								865,
								846,
								866,
								867,
								855,
								847,
								868,
								869,
								856,
								857,
								870,
								858,
								848,
								871,
								872,
								873,
								874,
								875,
								876,
								849,
								850,
								877,
								859,
								878,
								879,
								880,
								881,
								860,
								882
							]
						}
					],
					"sources": [
						{
							"fileName": "src/InputLabel/InputLabel.tsx",
							"line": 7,
							"character": 25
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"name": "FlexProps",
							"id": 174
						}
					]
				},
				{
					"id": 883,
					"name": "InputLabel",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "src/InputLabel/InputLabel.tsx",
							"line": 15,
							"character": 16
						}
					],
					"type": {
						"type": "reference",
						"name": "ForwardRefExoticComponent",
						"typeArguments": [
							{
								"type": "intersection",
								"types": [
									{
										"type": "reference",
										"name": "InputLabelProps",
										"id": 845
									},
									{
										"type": "reflection",
										"declaration": {
											"id": 884,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {}
										}
									},
									{
										"type": "reference",
										"name": "RefAttributes",
										"typeArguments": [
											{
												"type": "reference",
												"name": "HTMLLabelElement"
											}
										]
									}
								]
							}
						]
					},
					"defaultValue": " React.forwardRef<HTMLLabelElement, Attributes<HTMLLabelElement, InputLabelProps>>((props, ref) => {\n  const {\n    children,\n    disabled,\n    label,\n    paddingHorizontal,\n    paddingVertical,\n    ...rest\n  } = props;\n\n  return (\n    <Flex { ...rest }\n        className=\"InputLabel\"\n        direction=\"vertical\"\n        disabled={ disabled }\n        ref={ ref }\n        tag=\"label\">\n      { label && (\n        <Text\n            ellipsis\n            paddingHorizontal={ paddingHorizontal }\n            paddingVertical={ paddingVertical }\n            size=\"x1\"\n            strong>\n          { label }\n        </Text>\n      ) }\n\n      { children }\n    </Flex>\n  );\n})"
				}
			],
			"groups": [
				{
					"title": "Interfaces",
					"kind": 256,
					"children": [
						845
					]
				},
				{
					"title": "Variables",
					"kind": 32,
					"children": [
						883
					]
				}
			],
			"sources": [
				{
					"fileName": "src/InputLabel/InputLabel.tsx",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 928,
			"name": "\"Label/Label\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "/Users/harry/Projects/personal/preshape/src/Label/Label.tsx",
			"children": [
				{
					"id": 929,
					"name": "LabelProps",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"children": [
						{
							"id": 944,
							"name": "absolute",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Quick way of absolutely position to common places"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 58,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "fullscreen"
									},
									{
										"type": "stringLiteral",
										"value": "top"
									},
									{
										"type": "stringLiteral",
										"value": "top-left"
									},
									{
										"type": "stringLiteral",
										"value": "top-right"
									},
									{
										"type": "stringLiteral",
										"value": "bottom"
									},
									{
										"type": "stringLiteral",
										"value": "bottom-left"
									},
									{
										"type": "stringLiteral",
										"value": "bottom-right"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.absolute",
								"id": 3
							}
						},
						{
							"id": 930,
							"name": "align",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Text alignment"
							},
							"sources": [
								{
									"fileName": "src/Text/Text.tsx",
									"line": 32,
									"character": 7
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "start"
									},
									{
										"type": "stringLiteral",
										"value": "middle"
									},
									{
										"type": "stringLiteral",
										"value": "end"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TextProps.align",
								"id": 266
							}
						},
						{
							"id": 945,
							"name": "backgroundColor",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Background colour to be applied, shades are taken from the current\ntheme."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 70,
									"character": 17
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeColor",
								"id": 30
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.backgroundColor",
								"id": 4
							}
						},
						{
							"id": 946,
							"name": "borderColor",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Border colour to be applied, shades are taken from the current\ntheme."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 75,
									"character": 13
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeColor",
								"id": 30
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.borderColor",
								"id": 5
							}
						},
						{
							"id": 947,
							"name": "borderRadius",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Adds styling of a border radius to one of the size multiples."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 79,
									"character": 14
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "x1"
									},
									{
										"type": "stringLiteral",
										"value": "x2"
									},
									{
										"type": "stringLiteral",
										"value": "x3"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.borderRadius",
								"id": 6
							}
						},
						{
							"id": 948,
							"name": "borderSize",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Thickness of the border to be applied"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 81,
									"character": 12
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "x1"
									},
									{
										"type": "stringLiteral",
										"value": "x2"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.borderSize",
								"id": 7
							}
						},
						{
							"id": 931,
							"name": "breakOn",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "How the block of text should break onto new lines."
							},
							"sources": [
								{
									"fileName": "src/Text/Text.tsx",
									"line": 34,
									"character": 9
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "all"
									},
									{
										"type": "stringLiteral",
										"value": "none"
									},
									{
										"type": "stringLiteral",
										"value": "word"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TextProps.breakOn",
								"id": 267
							}
						},
						{
							"id": 949,
							"name": "clickable",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Adds styling to indicate that the element is clickable"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 83,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.clickable",
								"id": 8
							}
						},
						{
							"id": 950,
							"name": "container",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies relative positioning to contain child elements."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 85,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.container",
								"id": 9
							}
						},
						{
							"id": 951,
							"name": "display",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies display styling"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 87,
									"character": 9
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "block"
									},
									{
										"type": "stringLiteral",
										"value": "inline-block"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.display",
								"id": 10
							}
						},
						{
							"id": 932,
							"name": "ellipsis",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Replaces the overflow of text with the ellipsis character"
							},
							"sources": [
								{
									"fileName": "src/Text/Text.tsx",
									"line": 36,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TextProps.ellipsis",
								"id": 268
							}
						},
						{
							"id": 933,
							"name": "emphasis",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies emphasis styling"
							},
							"sources": [
								{
									"fileName": "src/Text/Text.tsx",
									"line": 38,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TextProps.emphasis",
								"id": 269
							}
						},
						{
							"id": 952,
							"name": "fixed",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Quick way of absolutely position to common places"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 89,
									"character": 7
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "fullscreen"
									},
									{
										"type": "stringLiteral",
										"value": "top"
									},
									{
										"type": "stringLiteral",
										"value": "top-left"
									},
									{
										"type": "stringLiteral",
										"value": "top-right"
									},
									{
										"type": "stringLiteral",
										"value": "bottom"
									},
									{
										"type": "stringLiteral",
										"value": "bottom-left"
									},
									{
										"type": "stringLiteral",
										"value": "bottom-right"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.fixed",
								"id": 11
							}
						},
						{
							"id": 934,
							"name": "heading",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies a heading font family style"
							},
							"sources": [
								{
									"fileName": "src/Text/Text.tsx",
									"line": 40,
									"character": 9
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TextProps.heading",
								"id": 270
							}
						},
						{
							"id": 953,
							"name": "height",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Fixed height applied through inline styling"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 98,
									"character": 8
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.height",
								"id": 12
							}
						},
						{
							"id": 935,
							"name": "inline",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Text default to block display, this will apply inline display."
							},
							"sources": [
								{
									"fileName": "src/Text/Text.tsx",
									"line": 42,
									"character": 8
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TextProps.inline",
								"id": 271
							}
						},
						{
							"id": 954,
							"name": "margin",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Margins applied for the global spacing variables"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 100,
									"character": 8
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeSize",
								"id": 31
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.margin",
								"id": 13
							}
						},
						{
							"id": 955,
							"name": "maxWidth",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Max width applied through inline styling"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 102,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.maxWidth",
								"id": 14
							}
						},
						{
							"id": 956,
							"name": "minHeight",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Max height applied through inline styling"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 104,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.minHeight",
								"id": 15
							}
						},
						{
							"id": 957,
							"name": "minWidth",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Min width applied through inline style"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 106,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.minWidth",
								"id": 16
							}
						},
						{
							"id": 936,
							"name": "monospace",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies a monospace font family style"
							},
							"sources": [
								{
									"fileName": "src/Text/Text.tsx",
									"line": 44,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TextProps.monospace",
								"id": 272
							}
						},
						{
							"id": 958,
							"name": "overflow",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Overflow"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 108,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "stringLiteral",
										"value": "hidden"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.overflow",
								"id": 17
							}
						},
						{
							"id": 959,
							"name": "padding",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Padding applied for the global spacing variables"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 110,
									"character": 9
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeSize",
								"id": 31
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.padding",
								"id": 18
							}
						},
						{
							"id": 960,
							"name": "paddingHorizontal",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Horizontal padding applied for the global spacing variables"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 112,
									"character": 19
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeSize",
								"id": 31
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.paddingHorizontal",
								"id": 19
							}
						},
						{
							"id": 961,
							"name": "paddingVertical",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Vertical pa?dding applied for the global spacing variables"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 114,
									"character": 17
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeSize",
								"id": 31
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.paddingVertical",
								"id": 20
							}
						},
						{
							"id": 962,
							"name": "scrollable",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies overflow styling to enable/disable scrolling."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 116,
									"character": 12
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.scrollable",
								"id": 21
							}
						},
						{
							"id": 937,
							"name": "size",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Size of the text"
							},
							"sources": [
								{
									"fileName": "src/Text/Text.tsx",
									"line": 46,
									"character": 6
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeTextSize",
								"id": 304
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TextProps.size",
								"id": 273
							}
						},
						{
							"id": 938,
							"name": "strong",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies strong weight styling"
							},
							"sources": [
								{
									"fileName": "src/Text/Text.tsx",
									"line": 48,
									"character": 8
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TextProps.strong",
								"id": 274
							}
						},
						{
							"id": 939,
							"name": "subscript",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies subscript baseline styling"
							},
							"sources": [
								{
									"fileName": "src/Text/Text.tsx",
									"line": 50,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TextProps.subscript",
								"id": 275
							}
						},
						{
							"id": 940,
							"name": "superscript",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies superscript baseline styling"
							},
							"sources": [
								{
									"fileName": "src/Text/Text.tsx",
									"line": 52,
									"character": 13
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TextProps.superscript",
								"id": 276
							}
						},
						{
							"id": 963,
							"name": "tag",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Any valid HTML or SVG element tag.",
								"tags": [
									{
										"tag": "reference",
										"text": "false\n"
									}
								]
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 122,
									"character": 5
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeAllElementTags",
								"id": 34
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.tag",
								"id": 22
							}
						},
						{
							"id": 964,
							"name": "textColor",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Text colour to be applied."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 126,
									"character": 11
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeColor",
								"id": 30
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.textColor",
								"id": 23
							}
						},
						{
							"id": 965,
							"name": "theme",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Theme applied to this element and inherited for child elements (until\na descendant theme is applied)."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 131,
									"character": 7
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeTheme",
								"id": 35
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.theme",
								"id": 24
							}
						},
						{
							"id": 941,
							"name": "titlecase",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies title casing styling"
							},
							"sources": [
								{
									"fileName": "src/Text/Text.tsx",
									"line": 54,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TextProps.titlecase",
								"id": 277
							}
						},
						{
							"id": 942,
							"name": "uppercase",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies uppercasing styling"
							},
							"sources": [
								{
									"fileName": "src/Text/Text.tsx",
									"line": 56,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TextProps.uppercase",
								"id": 278
							}
						},
						{
							"id": 943,
							"name": "weak",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies weak weight styling"
							},
							"sources": [
								{
									"fileName": "src/Text/Text.tsx",
									"line": 58,
									"character": 6
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TextProps.weak",
								"id": 279
							}
						},
						{
							"id": 966,
							"name": "width",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Fixed width applied through inline styling"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 133,
									"character": 7
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.width",
								"id": 25
							}
						},
						{
							"id": 967,
							"name": "zIndex",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "z-index number for layering elements."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 135,
									"character": 8
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "number"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.zIndex",
								"id": 26
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								944,
								930,
								945,
								946,
								947,
								948,
								931,
								949,
								950,
								951,
								932,
								933,
								952,
								934,
								953,
								935,
								954,
								955,
								956,
								957,
								936,
								958,
								959,
								960,
								961,
								962,
								937,
								938,
								939,
								940,
								963,
								964,
								965,
								941,
								942,
								943,
								966,
								967
							]
						}
					],
					"sources": [
						{
							"fileName": "src/Label/Label.tsx",
							"line": 6,
							"character": 27
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"name": "TextProps",
							"id": 265
						}
					]
				},
				{
					"id": 968,
					"name": "Label",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "src/Label/Label.tsx",
							"line": 8,
							"character": 11
						}
					],
					"type": {
						"type": "reference",
						"name": "ForwardRefExoticComponent",
						"typeArguments": [
							{
								"type": "intersection",
								"types": [
									{
										"type": "reference",
										"name": "LabelProps",
										"id": 929
									},
									{
										"type": "reflection",
										"declaration": {
											"id": 969,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {}
										}
									},
									{
										"type": "reference",
										"name": "RefAttributes",
										"typeArguments": [
											{
												"type": "reference",
												"name": "HTMLDivElement"
											}
										]
									}
								]
							}
						]
					},
					"defaultValue": " React.forwardRef<HTMLDivElement, Attributes<HTMLDivElement, LabelProps>>((props, ref) => {\n  const {\n    backgroundColor = 'text-shade-1',\n    textColor = 'background-shade-1',\n    ...rest\n  } = props;\n\n  return (\n    <Text { ...rest }\n        backgroundColor={ backgroundColor }\n        className=\"Label\"\n        ref={ ref }\n        size=\"x1\"\n        strong\n        tag=\"div\"\n        textColor={ textColor } />\n  );\n})"
				}
			],
			"groups": [
				{
					"title": "Interfaces",
					"kind": 256,
					"children": [
						929
					]
				},
				{
					"title": "Variables",
					"kind": 32,
					"children": [
						968
					]
				}
			],
			"sources": [
				{
					"fileName": "src/Label/Label.tsx",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 970,
			"name": "\"Label/Labels\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "/Users/harry/Projects/personal/preshape/src/Label/Labels.tsx",
			"children": [
				{
					"id": 971,
					"name": "LabelsProps",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"children": [
						{
							"id": 972,
							"name": "absolute",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Quick way of absolutely position to common places"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 58,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "fullscreen"
									},
									{
										"type": "stringLiteral",
										"value": "top"
									},
									{
										"type": "stringLiteral",
										"value": "top-left"
									},
									{
										"type": "stringLiteral",
										"value": "top-right"
									},
									{
										"type": "stringLiteral",
										"value": "bottom"
									},
									{
										"type": "stringLiteral",
										"value": "bottom-left"
									},
									{
										"type": "stringLiteral",
										"value": "bottom-right"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.absolute",
								"id": 3
							}
						},
						{
							"id": 973,
							"name": "backgroundColor",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Background colour to be applied, shades are taken from the current\ntheme."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 70,
									"character": 17
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeColor",
								"id": 30
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.backgroundColor",
								"id": 4
							}
						},
						{
							"id": 974,
							"name": "borderColor",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Border colour to be applied, shades are taken from the current\ntheme."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 75,
									"character": 13
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeColor",
								"id": 30
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.borderColor",
								"id": 5
							}
						},
						{
							"id": 975,
							"name": "borderRadius",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Adds styling of a border radius to one of the size multiples."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 79,
									"character": 14
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "x1"
									},
									{
										"type": "stringLiteral",
										"value": "x2"
									},
									{
										"type": "stringLiteral",
										"value": "x3"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.borderRadius",
								"id": 6
							}
						},
						{
							"id": 976,
							"name": "borderSize",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Thickness of the border to be applied"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 81,
									"character": 12
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "x1"
									},
									{
										"type": "stringLiteral",
										"value": "x2"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.borderSize",
								"id": 7
							}
						},
						{
							"id": 977,
							"name": "clickable",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Adds styling to indicate that the element is clickable"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 83,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.clickable",
								"id": 8
							}
						},
						{
							"id": 978,
							"name": "container",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies relative positioning to contain child elements."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 85,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.container",
								"id": 9
							}
						},
						{
							"id": 979,
							"name": "display",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies display styling"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 87,
									"character": 9
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "block"
									},
									{
										"type": "stringLiteral",
										"value": "inline-block"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.display",
								"id": 10
							}
						},
						{
							"id": 980,
							"name": "fixed",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Quick way of absolutely position to common places"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 89,
									"character": 7
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "fullscreen"
									},
									{
										"type": "stringLiteral",
										"value": "top"
									},
									{
										"type": "stringLiteral",
										"value": "top-left"
									},
									{
										"type": "stringLiteral",
										"value": "top-right"
									},
									{
										"type": "stringLiteral",
										"value": "bottom"
									},
									{
										"type": "stringLiteral",
										"value": "bottom-left"
									},
									{
										"type": "stringLiteral",
										"value": "bottom-right"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.fixed",
								"id": 11
							}
						},
						{
							"id": 981,
							"name": "height",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Fixed height applied through inline styling"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 98,
									"character": 8
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.height",
								"id": 12
							}
						},
						{
							"id": 982,
							"name": "margin",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Margins applied for the global spacing variables"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 100,
									"character": 8
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeSize",
								"id": 31
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.margin",
								"id": 13
							}
						},
						{
							"id": 983,
							"name": "maxWidth",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Max width applied through inline styling"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 102,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.maxWidth",
								"id": 14
							}
						},
						{
							"id": 984,
							"name": "minHeight",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Max height applied through inline styling"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 104,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.minHeight",
								"id": 15
							}
						},
						{
							"id": 985,
							"name": "minWidth",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Min width applied through inline style"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 106,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.minWidth",
								"id": 16
							}
						},
						{
							"id": 986,
							"name": "overflow",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Overflow"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 108,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "stringLiteral",
										"value": "hidden"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.overflow",
								"id": 17
							}
						},
						{
							"id": 987,
							"name": "padding",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Padding applied for the global spacing variables"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 110,
									"character": 9
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeSize",
								"id": 31
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.padding",
								"id": 18
							}
						},
						{
							"id": 988,
							"name": "paddingHorizontal",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Horizontal padding applied for the global spacing variables"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 112,
									"character": 19
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeSize",
								"id": 31
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.paddingHorizontal",
								"id": 19
							}
						},
						{
							"id": 989,
							"name": "paddingVertical",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Vertical pa?dding applied for the global spacing variables"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 114,
									"character": 17
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeSize",
								"id": 31
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.paddingVertical",
								"id": 20
							}
						},
						{
							"id": 990,
							"name": "scrollable",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies overflow styling to enable/disable scrolling."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 116,
									"character": 12
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.scrollable",
								"id": 21
							}
						},
						{
							"id": 991,
							"name": "tag",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Any valid HTML or SVG element tag.",
								"tags": [
									{
										"tag": "reference",
										"text": "false\n"
									}
								]
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 122,
									"character": 5
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeAllElementTags",
								"id": 34
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.tag",
								"id": 22
							}
						},
						{
							"id": 992,
							"name": "textColor",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Text colour to be applied."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 126,
									"character": 11
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeColor",
								"id": 30
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.textColor",
								"id": 23
							}
						},
						{
							"id": 993,
							"name": "theme",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Theme applied to this element and inherited for child elements (until\na descendant theme is applied)."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 131,
									"character": 7
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeTheme",
								"id": 35
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.theme",
								"id": 24
							}
						},
						{
							"id": 994,
							"name": "width",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Fixed width applied through inline styling"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 133,
									"character": 7
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.width",
								"id": 25
							}
						},
						{
							"id": 995,
							"name": "zIndex",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "z-index number for layering elements."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 135,
									"character": 8
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "number"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.zIndex",
								"id": 26
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								972,
								973,
								974,
								975,
								976,
								977,
								978,
								979,
								980,
								981,
								982,
								983,
								984,
								985,
								986,
								987,
								988,
								989,
								990,
								991,
								992,
								993,
								994,
								995
							]
						}
					],
					"sources": [
						{
							"fileName": "src/Label/Labels.tsx",
							"line": 4,
							"character": 28
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"name": "BaseProps",
							"id": 2
						}
					]
				},
				{
					"id": 996,
					"name": "Labels",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "src/Label/Labels.tsx",
							"line": 6,
							"character": 12
						}
					],
					"type": {
						"type": "reference",
						"name": "ForwardRefExoticComponent",
						"typeArguments": [
							{
								"type": "intersection",
								"types": [
									{
										"type": "reference",
										"name": "LabelsProps",
										"id": 971
									},
									{
										"type": "reflection",
										"declaration": {
											"id": 997,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {}
										}
									},
									{
										"type": "reference",
										"name": "RefAttributes",
										"typeArguments": [
											{
												"type": "reference",
												"name": "HTMLElement"
											}
										]
									}
								]
							}
						]
					},
					"defaultValue": " React.forwardRef<HTMLElement, Attributes<HTMLElement, LabelsProps>>((props, ref) => {\n  return (\n    <Base { ...props }\n        className=\"Labels\"\n        ref={ ref } />\n  );\n})"
				}
			],
			"groups": [
				{
					"title": "Interfaces",
					"kind": 256,
					"children": [
						971
					]
				},
				{
					"title": "Variables",
					"kind": 32,
					"children": [
						996
					]
				}
			],
			"sources": [
				{
					"fileName": "src/Label/Labels.tsx",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 998,
			"name": "\"Link/Link\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "/Users/harry/Projects/personal/preshape/src/Link/Link.tsx",
			"children": [
				{
					"id": 999,
					"name": "LinkProps",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"children": [
						{
							"id": 1020,
							"name": "absolute",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Quick way of absolutely position to common places"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 58,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "fullscreen"
									},
									{
										"type": "stringLiteral",
										"value": "top"
									},
									{
										"type": "stringLiteral",
										"value": "top-left"
									},
									{
										"type": "stringLiteral",
										"value": "top-right"
									},
									{
										"type": "stringLiteral",
										"value": "bottom"
									},
									{
										"type": "stringLiteral",
										"value": "bottom-left"
									},
									{
										"type": "stringLiteral",
										"value": "bottom-right"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.absolute",
								"id": 3
							}
						},
						{
							"id": 1000,
							"name": "active",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Retained active state, indicated with styling"
							},
							"sources": [
								{
									"fileName": "src/Link/Link.tsx",
									"line": 13,
									"character": 8
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							}
						},
						{
							"id": 1006,
							"name": "align",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Text alignment"
							},
							"sources": [
								{
									"fileName": "src/Text/Text.tsx",
									"line": 32,
									"character": 7
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "start"
									},
									{
										"type": "stringLiteral",
										"value": "middle"
									},
									{
										"type": "stringLiteral",
										"value": "end"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TextProps.align",
								"id": 266
							}
						},
						{
							"id": 1021,
							"name": "backgroundColor",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Background colour to be applied, shades are taken from the current\ntheme."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 70,
									"character": 17
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeColor",
								"id": 30
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.backgroundColor",
								"id": 4
							}
						},
						{
							"id": 1022,
							"name": "borderColor",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Border colour to be applied, shades are taken from the current\ntheme."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 75,
									"character": 13
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeColor",
								"id": 30
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.borderColor",
								"id": 5
							}
						},
						{
							"id": 1023,
							"name": "borderRadius",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Adds styling of a border radius to one of the size multiples."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 79,
									"character": 14
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "x1"
									},
									{
										"type": "stringLiteral",
										"value": "x2"
									},
									{
										"type": "stringLiteral",
										"value": "x3"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.borderRadius",
								"id": 6
							}
						},
						{
							"id": 1024,
							"name": "borderSize",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Thickness of the border to be applied"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 81,
									"character": 12
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "x1"
									},
									{
										"type": "stringLiteral",
										"value": "x2"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.borderSize",
								"id": 7
							}
						},
						{
							"id": 1007,
							"name": "breakOn",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "How the block of text should break onto new lines."
							},
							"sources": [
								{
									"fileName": "src/Text/Text.tsx",
									"line": 34,
									"character": 9
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "all"
									},
									{
										"type": "stringLiteral",
										"value": "none"
									},
									{
										"type": "stringLiteral",
										"value": "word"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TextProps.breakOn",
								"id": 267
							}
						},
						{
							"id": 1025,
							"name": "clickable",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Adds styling to indicate that the element is clickable"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 83,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.clickable",
								"id": 8
							}
						},
						{
							"id": 1026,
							"name": "container",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies relative positioning to contain child elements."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 85,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.container",
								"id": 9
							}
						},
						{
							"id": 1027,
							"name": "display",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies display styling"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 87,
									"character": 9
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "block"
									},
									{
										"type": "stringLiteral",
										"value": "inline-block"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.display",
								"id": 10
							}
						},
						{
							"id": 1008,
							"name": "ellipsis",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Replaces the overflow of text with the ellipsis character"
							},
							"sources": [
								{
									"fileName": "src/Text/Text.tsx",
									"line": 36,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TextProps.ellipsis",
								"id": 268
							}
						},
						{
							"id": 1009,
							"name": "emphasis",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies emphasis styling"
							},
							"sources": [
								{
									"fileName": "src/Text/Text.tsx",
									"line": 38,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TextProps.emphasis",
								"id": 269
							}
						},
						{
							"id": 1028,
							"name": "fixed",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Quick way of absolutely position to common places"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 89,
									"character": 7
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "fullscreen"
									},
									{
										"type": "stringLiteral",
										"value": "top"
									},
									{
										"type": "stringLiteral",
										"value": "top-left"
									},
									{
										"type": "stringLiteral",
										"value": "top-right"
									},
									{
										"type": "stringLiteral",
										"value": "bottom"
									},
									{
										"type": "stringLiteral",
										"value": "bottom-left"
									},
									{
										"type": "stringLiteral",
										"value": "bottom-right"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.fixed",
								"id": 11
							}
						},
						{
							"id": 1010,
							"name": "heading",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies a heading font family style"
							},
							"sources": [
								{
									"fileName": "src/Text/Text.tsx",
									"line": 40,
									"character": 9
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TextProps.heading",
								"id": 270
							}
						},
						{
							"id": 1029,
							"name": "height",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Fixed height applied through inline styling"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 98,
									"character": 8
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.height",
								"id": 12
							}
						},
						{
							"id": 1011,
							"name": "inline",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Text default to block display, this will apply inline display."
							},
							"sources": [
								{
									"fileName": "src/Text/Text.tsx",
									"line": 42,
									"character": 8
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TextProps.inline",
								"id": 271
							}
						},
						{
							"id": 1030,
							"name": "margin",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Margins applied for the global spacing variables"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 100,
									"character": 8
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeSize",
								"id": 31
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.margin",
								"id": 13
							}
						},
						{
							"id": 1031,
							"name": "maxWidth",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Max width applied through inline styling"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 102,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.maxWidth",
								"id": 14
							}
						},
						{
							"id": 1032,
							"name": "minHeight",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Max height applied through inline styling"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 104,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.minHeight",
								"id": 15
							}
						},
						{
							"id": 1033,
							"name": "minWidth",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Min width applied through inline style"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 106,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.minWidth",
								"id": 16
							}
						},
						{
							"id": 1012,
							"name": "monospace",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies a monospace font family style"
							},
							"sources": [
								{
									"fileName": "src/Text/Text.tsx",
									"line": 44,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TextProps.monospace",
								"id": 272
							}
						},
						{
							"id": 1001,
							"name": "navigate",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {},
							"sources": [
								{
									"fileName": "src/Link/Link.tsx",
									"line": 15,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "reflection",
										"declaration": {
											"id": 1002,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"signatures": [
												{
													"id": 1003,
													"name": "__call",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								]
							}
						},
						{
							"id": 1034,
							"name": "overflow",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Overflow"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 108,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "stringLiteral",
										"value": "hidden"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.overflow",
								"id": 17
							}
						},
						{
							"id": 1035,
							"name": "padding",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Padding applied for the global spacing variables"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 110,
									"character": 9
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeSize",
								"id": 31
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.padding",
								"id": 18
							}
						},
						{
							"id": 1036,
							"name": "paddingHorizontal",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Horizontal padding applied for the global spacing variables"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 112,
									"character": 19
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeSize",
								"id": 31
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.paddingHorizontal",
								"id": 19
							}
						},
						{
							"id": 1037,
							"name": "paddingVertical",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Vertical pa?dding applied for the global spacing variables"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 114,
									"character": 17
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeSize",
								"id": 31
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.paddingVertical",
								"id": 20
							}
						},
						{
							"id": 1038,
							"name": "scrollable",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies overflow styling to enable/disable scrolling."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 116,
									"character": 12
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.scrollable",
								"id": 21
							}
						},
						{
							"id": 1013,
							"name": "size",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Size of the text"
							},
							"sources": [
								{
									"fileName": "src/Text/Text.tsx",
									"line": 46,
									"character": 6
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeTextSize",
								"id": 304
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TextProps.size",
								"id": 273
							}
						},
						{
							"id": 1014,
							"name": "strong",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies strong weight styling"
							},
							"sources": [
								{
									"fileName": "src/Text/Text.tsx",
									"line": 48,
									"character": 8
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TextProps.strong",
								"id": 274
							}
						},
						{
							"id": 1015,
							"name": "subscript",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies subscript baseline styling"
							},
							"sources": [
								{
									"fileName": "src/Text/Text.tsx",
									"line": 50,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TextProps.subscript",
								"id": 275
							}
						},
						{
							"id": 1016,
							"name": "superscript",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies superscript baseline styling"
							},
							"sources": [
								{
									"fileName": "src/Text/Text.tsx",
									"line": 52,
									"character": 13
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TextProps.superscript",
								"id": 276
							}
						},
						{
							"id": 1039,
							"name": "tag",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Any valid HTML or SVG element tag.",
								"tags": [
									{
										"tag": "reference",
										"text": "false\n"
									}
								]
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 122,
									"character": 5
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeAllElementTags",
								"id": 34
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.tag",
								"id": 22
							}
						},
						{
							"id": 1040,
							"name": "textColor",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Text colour to be applied."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 126,
									"character": 11
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeColor",
								"id": 30
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.textColor",
								"id": 23
							}
						},
						{
							"id": 1041,
							"name": "theme",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Theme applied to this element and inherited for child elements (until\na descendant theme is applied)."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 131,
									"character": 7
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeTheme",
								"id": 35
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.theme",
								"id": 24
							}
						},
						{
							"id": 1017,
							"name": "titlecase",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies title casing styling"
							},
							"sources": [
								{
									"fileName": "src/Text/Text.tsx",
									"line": 54,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TextProps.titlecase",
								"id": 277
							}
						},
						{
							"id": 1004,
							"name": "to",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "React Router \"to\" prop, when applied the Component given to Text\nis that of a RouterLink (from React Router DOM). Otherwise an\nanchor tag is used."
							},
							"sources": [
								{
									"fileName": "src/Link/Link.tsx",
									"line": 21,
									"character": 4
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							}
						},
						{
							"id": 1005,
							"name": "underline",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies and underlines style, perfect for within a block of text"
							},
							"sources": [
								{
									"fileName": "src/Link/Link.tsx",
									"line": 23,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							}
						},
						{
							"id": 1018,
							"name": "uppercase",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies uppercasing styling"
							},
							"sources": [
								{
									"fileName": "src/Text/Text.tsx",
									"line": 56,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TextProps.uppercase",
								"id": 278
							}
						},
						{
							"id": 1019,
							"name": "weak",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies weak weight styling"
							},
							"sources": [
								{
									"fileName": "src/Text/Text.tsx",
									"line": 58,
									"character": 6
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TextProps.weak",
								"id": 279
							}
						},
						{
							"id": 1042,
							"name": "width",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Fixed width applied through inline styling"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 133,
									"character": 7
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.width",
								"id": 25
							}
						},
						{
							"id": 1043,
							"name": "zIndex",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "z-index number for layering elements."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 135,
									"character": 8
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "number"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.zIndex",
								"id": 26
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								1020,
								1000,
								1006,
								1021,
								1022,
								1023,
								1024,
								1007,
								1025,
								1026,
								1027,
								1008,
								1009,
								1028,
								1010,
								1029,
								1011,
								1030,
								1031,
								1032,
								1033,
								1012,
								1001,
								1034,
								1035,
								1036,
								1037,
								1038,
								1013,
								1014,
								1015,
								1016,
								1039,
								1040,
								1041,
								1017,
								1004,
								1005,
								1018,
								1019,
								1042,
								1043
							]
						}
					],
					"sources": [
						{
							"fileName": "src/Link/Link.tsx",
							"line": 11,
							"character": 26
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"name": "TextProps",
							"id": 265
						}
					]
				},
				{
					"id": 1047,
					"name": "Link",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "src/Link/Link.tsx",
							"line": 26,
							"character": 10
						}
					],
					"type": {
						"type": "reference",
						"name": "ForwardRefExoticComponent",
						"typeArguments": [
							{
								"type": "intersection",
								"types": [
									{
										"type": "reference",
										"name": "LinkProps",
										"id": 999
									},
									{
										"type": "reflection",
										"declaration": {
											"id": 1048,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {}
										}
									},
									{
										"type": "reference",
										"name": "RefAttributes",
										"typeArguments": [
											{
												"type": "reference",
												"name": "HTMLAnchorElement"
											}
										]
									}
								]
							}
						]
					},
					"defaultValue": " React.forwardRef<HTMLAnchorElement, Attributes<HTMLAnchorElement, LinkProps>>((props, ref) => {\n  const { active, navigate, target, to, underline, ...rest } = props;\n  const classes = classnames('Link', {\n    'Link--active': active,\n    'Link--underline': underline,\n  });\n\n  if (to) {\n    return (\n      <RouterLink { ...props }\n          component={ Link }\n          to={ to } />\n    );\n  }\n\n  if (navigate) {\n    rest.onClick = (event: React.MouseEvent<HTMLAnchorElement>) => {\n      if (props.onClick) {\n        props.onClick(event);\n      }\n\n      // https://github.com/ReactTraining/react-router/blob/master/packages/react-router-dom/modules/Link.js\n      if (\n        !event.defaultPrevented && // onClick prevented default\n        event.button === 0 && // ignore everything but left clicks\n        (!target || target === '_self') && // let browser handle \"target=_blank\" etc.\n        !isModifiedEvent(event) // ignore clicks with modifier keys\n      ) {\n        event.preventDefault();\n        navigate();\n      }\n    };\n  }\n\n  return (\n    <Text { ...rest }\n        className={ classes }\n        ref={ ref }\n        tag=\"a\"\n        target={ target } />\n  );\n})"
				},
				{
					"id": 1044,
					"name": "isModifiedEvent",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isConst": true
					},
					"signatures": [
						{
							"id": 1045,
							"name": "isModifiedEvent",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 1046,
									"name": "event",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "MouseEvent"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						}
					],
					"sources": [
						{
							"fileName": "src/Link/Link.tsx",
							"line": 8,
							"character": 21
						}
					]
				}
			],
			"groups": [
				{
					"title": "Interfaces",
					"kind": 256,
					"children": [
						999
					]
				},
				{
					"title": "Variables",
					"kind": 32,
					"children": [
						1047
					]
				},
				{
					"title": "Functions",
					"kind": 64,
					"children": [
						1044
					]
				}
			],
			"sources": [
				{
					"fileName": "src/Link/Link.tsx",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 1049,
			"name": "\"List/List\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "/Users/harry/Projects/personal/preshape/src/List/List.tsx",
			"children": [
				{
					"id": 1050,
					"name": "ListProps",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"children": [
						{
							"id": 1061,
							"name": "absolute",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Quick way of absolutely position to common places"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 58,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "fullscreen"
									},
									{
										"type": "stringLiteral",
										"value": "top"
									},
									{
										"type": "stringLiteral",
										"value": "top-left"
									},
									{
										"type": "stringLiteral",
										"value": "top-right"
									},
									{
										"type": "stringLiteral",
										"value": "bottom"
									},
									{
										"type": "stringLiteral",
										"value": "bottom-left"
									},
									{
										"type": "stringLiteral",
										"value": "bottom-right"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.absolute",
								"id": 3
							}
						},
						{
							"id": 1052,
							"name": "alignChildren",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Short cut child alignment property for both alignChildrenHorizontal and\nalignChildrenVertical."
							},
							"sources": [
								{
									"fileName": "src/Flex/Flex.tsx",
									"line": 11,
									"character": 15
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "start"
									},
									{
										"type": "stringLiteral",
										"value": "middle"
									},
									{
										"type": "stringLiteral",
										"value": "end"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "FlexProps.alignChildren",
								"id": 175
							}
						},
						{
							"id": 1053,
							"name": "alignChildrenHorizontal",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Horizontal alignment of children flex items."
							},
							"sources": [
								{
									"fileName": "src/Flex/Flex.tsx",
									"line": 13,
									"character": 25
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "start"
									},
									{
										"type": "stringLiteral",
										"value": "middle"
									},
									{
										"type": "stringLiteral",
										"value": "end"
									},
									{
										"type": "stringLiteral",
										"value": "around"
									},
									{
										"type": "stringLiteral",
										"value": "between"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "FlexProps.alignChildrenHorizontal",
								"id": 176
							}
						},
						{
							"id": 1054,
							"name": "alignChildrenVertical",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Vertical alignment of children flex items."
							},
							"sources": [
								{
									"fileName": "src/Flex/Flex.tsx",
									"line": 15,
									"character": 23
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "start"
									},
									{
										"type": "stringLiteral",
										"value": "middle"
									},
									{
										"type": "stringLiteral",
										"value": "end"
									},
									{
										"type": "stringLiteral",
										"value": "around"
									},
									{
										"type": "stringLiteral",
										"value": "between"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "FlexProps.alignChildrenVertical",
								"id": 177
							}
						},
						{
							"id": 1055,
							"name": "alignSelf",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Flex item alignment property (changes with parent direction)."
							},
							"sources": [
								{
									"fileName": "src/Flex/Flex.tsx",
									"line": 17,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "start"
									},
									{
										"type": "stringLiteral",
										"value": "middle"
									},
									{
										"type": "stringLiteral",
										"value": "end"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "FlexProps.alignSelf",
								"id": 178
							}
						},
						{
							"id": 1062,
							"name": "backgroundColor",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Background colour to be applied, shades are taken from the current\ntheme."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 70,
									"character": 17
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeColor",
								"id": 30
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.backgroundColor",
								"id": 4
							}
						},
						{
							"id": 1063,
							"name": "borderColor",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Border colour to be applied, shades are taken from the current\ntheme."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 75,
									"character": 13
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeColor",
								"id": 30
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.borderColor",
								"id": 5
							}
						},
						{
							"id": 1064,
							"name": "borderRadius",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Adds styling of a border radius to one of the size multiples."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 79,
									"character": 14
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "x1"
									},
									{
										"type": "stringLiteral",
										"value": "x2"
									},
									{
										"type": "stringLiteral",
										"value": "x3"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.borderRadius",
								"id": 6
							}
						},
						{
							"id": 1065,
							"name": "borderSize",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Thickness of the border to be applied"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 81,
									"character": 12
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "x1"
									},
									{
										"type": "stringLiteral",
										"value": "x2"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.borderSize",
								"id": 7
							}
						},
						{
							"id": 1066,
							"name": "clickable",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Adds styling to indicate that the element is clickable"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 83,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.clickable",
								"id": 8
							}
						},
						{
							"id": 1067,
							"name": "container",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies relative positioning to contain child elements."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 85,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.container",
								"id": 9
							}
						},
						{
							"id": 1056,
							"name": "direction",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Direction on which way to flex items."
							},
							"sources": [
								{
									"fileName": "src/Flex/Flex.tsx",
									"line": 19,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "horizontal"
									},
									{
										"type": "stringLiteral",
										"value": "vertical"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "FlexProps.direction",
								"id": 179
							}
						},
						{
							"id": 1068,
							"name": "display",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies display styling"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 87,
									"character": 9
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "block"
									},
									{
										"type": "stringLiteral",
										"value": "inline-block"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.display",
								"id": 10
							}
						},
						{
							"id": 1069,
							"name": "fixed",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Quick way of absolutely position to common places"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 89,
									"character": 7
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "fullscreen"
									},
									{
										"type": "stringLiteral",
										"value": "top"
									},
									{
										"type": "stringLiteral",
										"value": "top-left"
									},
									{
										"type": "stringLiteral",
										"value": "top-right"
									},
									{
										"type": "stringLiteral",
										"value": "bottom"
									},
									{
										"type": "stringLiteral",
										"value": "bottom-left"
									},
									{
										"type": "stringLiteral",
										"value": "bottom-right"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.fixed",
								"id": 11
							}
						},
						{
							"id": 1051,
							"name": "gap",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Spacing applied between child ListItems, values are global spacing variables.",
								"tags": [
									{
										"tag": "default",
										"text": "\"x1\"\n"
									}
								]
							},
							"sources": [
								{
									"fileName": "src/List/List.tsx",
									"line": 13,
									"character": 5
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeSize",
								"id": 31
							},
							"overwrites": {
								"type": "reference",
								"name": "FlexProps.gap",
								"id": 180
							}
						},
						{
							"id": 1057,
							"name": "grow",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Flex item property if it should grow with available space."
							},
							"sources": [
								{
									"fileName": "src/Flex/Flex.tsx",
									"line": 23,
									"character": 6
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "FlexProps.grow",
								"id": 181
							}
						},
						{
							"id": 1070,
							"name": "height",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Fixed height applied through inline styling"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 98,
									"character": 8
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.height",
								"id": 12
							}
						},
						{
							"id": 1058,
							"name": "initial",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Initial width to flex from for a child item."
							},
							"sources": [
								{
									"fileName": "src/Flex/Flex.tsx",
									"line": 25,
									"character": 9
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "content"
									},
									{
										"type": "stringLiteral",
										"value": "container"
									},
									{
										"type": "stringLiteral",
										"value": "none"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "FlexProps.initial",
								"id": 182
							}
						},
						{
							"id": 1071,
							"name": "margin",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Margins applied for the global spacing variables"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 100,
									"character": 8
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeSize",
								"id": 31
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.margin",
								"id": 13
							}
						},
						{
							"id": 1072,
							"name": "maxWidth",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Max width applied through inline styling"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 102,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.maxWidth",
								"id": 14
							}
						},
						{
							"id": 1073,
							"name": "minHeight",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Max height applied through inline styling"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 104,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.minHeight",
								"id": 15
							}
						},
						{
							"id": 1074,
							"name": "minWidth",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Min width applied through inline style"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 106,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.minWidth",
								"id": 16
							}
						},
						{
							"id": 1075,
							"name": "overflow",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Overflow"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 108,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "stringLiteral",
										"value": "hidden"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.overflow",
								"id": 17
							}
						},
						{
							"id": 1076,
							"name": "padding",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Padding applied for the global spacing variables"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 110,
									"character": 9
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeSize",
								"id": 31
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.padding",
								"id": 18
							}
						},
						{
							"id": 1077,
							"name": "paddingHorizontal",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Horizontal padding applied for the global spacing variables"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 112,
									"character": 19
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeSize",
								"id": 31
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.paddingHorizontal",
								"id": 19
							}
						},
						{
							"id": 1078,
							"name": "paddingVertical",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Vertical pa?dding applied for the global spacing variables"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 114,
									"character": 17
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeSize",
								"id": 31
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.paddingVertical",
								"id": 20
							}
						},
						{
							"id": 1079,
							"name": "scrollable",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies overflow styling to enable/disable scrolling."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 116,
									"character": 12
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.scrollable",
								"id": 21
							}
						},
						{
							"id": 1059,
							"name": "shrink",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Flex item property if it should shrink."
							},
							"sources": [
								{
									"fileName": "src/Flex/Flex.tsx",
									"line": 27,
									"character": 8
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "FlexProps.shrink",
								"id": 183
							}
						},
						{
							"id": 1080,
							"name": "tag",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Any valid HTML or SVG element tag.",
								"tags": [
									{
										"tag": "reference",
										"text": "false\n"
									}
								]
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 122,
									"character": 5
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeAllElementTags",
								"id": 34
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.tag",
								"id": 22
							}
						},
						{
							"id": 1081,
							"name": "textColor",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Text colour to be applied."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 126,
									"character": 11
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeColor",
								"id": 30
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.textColor",
								"id": 23
							}
						},
						{
							"id": 1082,
							"name": "theme",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Theme applied to this element and inherited for child elements (until\na descendant theme is applied)."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 131,
									"character": 7
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeTheme",
								"id": 35
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.theme",
								"id": 24
							}
						},
						{
							"id": 1083,
							"name": "width",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Fixed width applied through inline styling"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 133,
									"character": 7
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.width",
								"id": 25
							}
						},
						{
							"id": 1060,
							"name": "wrap",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Flag to allow flex items to wrap over to new lines"
							},
							"sources": [
								{
									"fileName": "src/Flex/Flex.tsx",
									"line": 29,
									"character": 6
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "FlexProps.wrap",
								"id": 184
							}
						},
						{
							"id": 1084,
							"name": "zIndex",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "z-index number for layering elements."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 135,
									"character": 8
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "number"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.zIndex",
								"id": 26
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								1061,
								1052,
								1053,
								1054,
								1055,
								1062,
								1063,
								1064,
								1065,
								1066,
								1067,
								1056,
								1068,
								1069,
								1051,
								1057,
								1070,
								1058,
								1071,
								1072,
								1073,
								1074,
								1075,
								1076,
								1077,
								1078,
								1079,
								1059,
								1080,
								1081,
								1082,
								1083,
								1060,
								1084
							]
						}
					],
					"sources": [
						{
							"fileName": "src/List/List.tsx",
							"line": 7,
							"character": 26
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"name": "FlexProps",
							"id": 174
						}
					],
					"extendedBy": [
						{
							"type": "reference",
							"name": "ThemeSwitcherProps",
							"id": 1672
						}
					]
				},
				{
					"id": 1085,
					"name": "List",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "src/List/List.tsx",
							"line": 16,
							"character": 10
						}
					],
					"type": {
						"type": "reference",
						"name": "ForwardRefExoticComponent",
						"typeArguments": [
							{
								"type": "intersection",
								"types": [
									{
										"type": "reference",
										"name": "ListProps",
										"id": 1050
									},
									{
										"type": "reflection",
										"declaration": {
											"id": 1086,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {}
										}
									},
									{
										"type": "reference",
										"name": "RefAttributes",
										"typeArguments": [
											{
												"type": "reference",
												"name": "HTMLUListElement"
											}
										]
									}
								]
							}
						]
					},
					"defaultValue": " React.forwardRef<HTMLUListElement, Attributes<HTMLUListElement, ListProps>>((props, ref) => {\n  const { gap = 'x1', ...rest } = props;\n  const classes = classnames('List', `List--${gap}`);\n\n  return (\n    <Flex { ...rest }\n        alignChildrenVertical=\"middle\"\n        className={ classes }\n        direction=\"horizontal\"\n        gap={ gap }\n        ref={ ref }\n        tag=\"ul\"\n        wrap />\n  );\n})"
				}
			],
			"groups": [
				{
					"title": "Interfaces",
					"kind": 256,
					"children": [
						1050
					]
				},
				{
					"title": "Variables",
					"kind": 32,
					"children": [
						1085
					]
				}
			],
			"sources": [
				{
					"fileName": "src/List/List.tsx",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 1087,
			"name": "\"List/ListItem\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "/Users/harry/Projects/personal/preshape/src/List/ListItem.tsx",
			"children": [
				{
					"id": 1088,
					"name": "ListItemProps",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"children": [
						{
							"id": 1100,
							"name": "absolute",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Quick way of absolutely position to common places"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 58,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "fullscreen"
									},
									{
										"type": "stringLiteral",
										"value": "top"
									},
									{
										"type": "stringLiteral",
										"value": "top-left"
									},
									{
										"type": "stringLiteral",
										"value": "top-right"
									},
									{
										"type": "stringLiteral",
										"value": "bottom"
									},
									{
										"type": "stringLiteral",
										"value": "bottom-left"
									},
									{
										"type": "stringLiteral",
										"value": "bottom-right"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.absolute",
								"id": 3
							}
						},
						{
							"id": 1090,
							"name": "alignChildren",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Short cut child alignment property for both alignChildrenHorizontal and\nalignChildrenVertical."
							},
							"sources": [
								{
									"fileName": "src/Flex/Flex.tsx",
									"line": 11,
									"character": 15
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "start"
									},
									{
										"type": "stringLiteral",
										"value": "middle"
									},
									{
										"type": "stringLiteral",
										"value": "end"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "FlexProps.alignChildren",
								"id": 175
							}
						},
						{
							"id": 1091,
							"name": "alignChildrenHorizontal",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Horizontal alignment of children flex items."
							},
							"sources": [
								{
									"fileName": "src/Flex/Flex.tsx",
									"line": 13,
									"character": 25
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "start"
									},
									{
										"type": "stringLiteral",
										"value": "middle"
									},
									{
										"type": "stringLiteral",
										"value": "end"
									},
									{
										"type": "stringLiteral",
										"value": "around"
									},
									{
										"type": "stringLiteral",
										"value": "between"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "FlexProps.alignChildrenHorizontal",
								"id": 176
							}
						},
						{
							"id": 1092,
							"name": "alignChildrenVertical",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Vertical alignment of children flex items."
							},
							"sources": [
								{
									"fileName": "src/Flex/Flex.tsx",
									"line": 15,
									"character": 23
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "start"
									},
									{
										"type": "stringLiteral",
										"value": "middle"
									},
									{
										"type": "stringLiteral",
										"value": "end"
									},
									{
										"type": "stringLiteral",
										"value": "around"
									},
									{
										"type": "stringLiteral",
										"value": "between"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "FlexProps.alignChildrenVertical",
								"id": 177
							}
						},
						{
							"id": 1093,
							"name": "alignSelf",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Flex item alignment property (changes with parent direction)."
							},
							"sources": [
								{
									"fileName": "src/Flex/Flex.tsx",
									"line": 17,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "start"
									},
									{
										"type": "stringLiteral",
										"value": "middle"
									},
									{
										"type": "stringLiteral",
										"value": "end"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "FlexProps.alignSelf",
								"id": 178
							}
						},
						{
							"id": 1101,
							"name": "backgroundColor",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Background colour to be applied, shades are taken from the current\ntheme."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 70,
									"character": 17
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeColor",
								"id": 30
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.backgroundColor",
								"id": 4
							}
						},
						{
							"id": 1102,
							"name": "borderColor",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Border colour to be applied, shades are taken from the current\ntheme."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 75,
									"character": 13
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeColor",
								"id": 30
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.borderColor",
								"id": 5
							}
						},
						{
							"id": 1103,
							"name": "borderRadius",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Adds styling of a border radius to one of the size multiples."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 79,
									"character": 14
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "x1"
									},
									{
										"type": "stringLiteral",
										"value": "x2"
									},
									{
										"type": "stringLiteral",
										"value": "x3"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.borderRadius",
								"id": 6
							}
						},
						{
							"id": 1104,
							"name": "borderSize",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Thickness of the border to be applied"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 81,
									"character": 12
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "x1"
									},
									{
										"type": "stringLiteral",
										"value": "x2"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.borderSize",
								"id": 7
							}
						},
						{
							"id": 1105,
							"name": "clickable",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Adds styling to indicate that the element is clickable"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 83,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.clickable",
								"id": 8
							}
						},
						{
							"id": 1106,
							"name": "container",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies relative positioning to contain child elements."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 85,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.container",
								"id": 9
							}
						},
						{
							"id": 1094,
							"name": "direction",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Direction on which way to flex items."
							},
							"sources": [
								{
									"fileName": "src/Flex/Flex.tsx",
									"line": 19,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "horizontal"
									},
									{
										"type": "stringLiteral",
										"value": "vertical"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "FlexProps.direction",
								"id": 179
							}
						},
						{
							"id": 1107,
							"name": "display",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies display styling"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 87,
									"character": 9
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "block"
									},
									{
										"type": "stringLiteral",
										"value": "inline-block"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.display",
								"id": 10
							}
						},
						{
							"id": 1108,
							"name": "fixed",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Quick way of absolutely position to common places"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 89,
									"character": 7
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "fullscreen"
									},
									{
										"type": "stringLiteral",
										"value": "top"
									},
									{
										"type": "stringLiteral",
										"value": "top-left"
									},
									{
										"type": "stringLiteral",
										"value": "top-right"
									},
									{
										"type": "stringLiteral",
										"value": "bottom"
									},
									{
										"type": "stringLiteral",
										"value": "bottom-left"
									},
									{
										"type": "stringLiteral",
										"value": "bottom-right"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.fixed",
								"id": 11
							}
						},
						{
							"id": 1095,
							"name": "gap",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Spacing applied between child flex items, values are global spacing variables."
							},
							"sources": [
								{
									"fileName": "src/Flex/Flex.tsx",
									"line": 21,
									"character": 5
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeSize",
								"id": 31
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "FlexProps.gap",
								"id": 180
							}
						},
						{
							"id": 1096,
							"name": "grow",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Flex item property if it should grow with available space."
							},
							"sources": [
								{
									"fileName": "src/Flex/Flex.tsx",
									"line": 23,
									"character": 6
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "FlexProps.grow",
								"id": 181
							}
						},
						{
							"id": 1109,
							"name": "height",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Fixed height applied through inline styling"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 98,
									"character": 8
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.height",
								"id": 12
							}
						},
						{
							"id": 1097,
							"name": "initial",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Initial width to flex from for a child item."
							},
							"sources": [
								{
									"fileName": "src/Flex/Flex.tsx",
									"line": 25,
									"character": 9
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "content"
									},
									{
										"type": "stringLiteral",
										"value": "container"
									},
									{
										"type": "stringLiteral",
										"value": "none"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "FlexProps.initial",
								"id": 182
							}
						},
						{
							"id": 1110,
							"name": "margin",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Margins applied for the global spacing variables"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 100,
									"character": 8
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeSize",
								"id": 31
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.margin",
								"id": 13
							}
						},
						{
							"id": 1111,
							"name": "maxWidth",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Max width applied through inline styling"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 102,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.maxWidth",
								"id": 14
							}
						},
						{
							"id": 1112,
							"name": "minHeight",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Max height applied through inline styling"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 104,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.minHeight",
								"id": 15
							}
						},
						{
							"id": 1113,
							"name": "minWidth",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Min width applied through inline style"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 106,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.minWidth",
								"id": 16
							}
						},
						{
							"id": 1114,
							"name": "overflow",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Overflow"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 108,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "stringLiteral",
										"value": "hidden"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.overflow",
								"id": 17
							}
						},
						{
							"id": 1115,
							"name": "padding",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Padding applied for the global spacing variables"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 110,
									"character": 9
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeSize",
								"id": 31
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.padding",
								"id": 18
							}
						},
						{
							"id": 1116,
							"name": "paddingHorizontal",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Horizontal padding applied for the global spacing variables"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 112,
									"character": 19
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeSize",
								"id": 31
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.paddingHorizontal",
								"id": 19
							}
						},
						{
							"id": 1117,
							"name": "paddingVertical",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Vertical pa?dding applied for the global spacing variables"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 114,
									"character": 17
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeSize",
								"id": 31
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.paddingVertical",
								"id": 20
							}
						},
						{
							"id": 1118,
							"name": "scrollable",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies overflow styling to enable/disable scrolling."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 116,
									"character": 12
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.scrollable",
								"id": 21
							}
						},
						{
							"id": 1089,
							"name": "separator",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Seperating string.",
								"tags": [
									{
										"tag": "default",
										"text": "\"/\"\n"
									}
								]
							},
							"sources": [
								{
									"fileName": "src/List/ListItem.tsx",
									"line": 11,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							}
						},
						{
							"id": 1098,
							"name": "shrink",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Flex item property if it should shrink."
							},
							"sources": [
								{
									"fileName": "src/Flex/Flex.tsx",
									"line": 27,
									"character": 8
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "FlexProps.shrink",
								"id": 183
							}
						},
						{
							"id": 1119,
							"name": "tag",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Any valid HTML or SVG element tag.",
								"tags": [
									{
										"tag": "reference",
										"text": "false\n"
									}
								]
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 122,
									"character": 5
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeAllElementTags",
								"id": 34
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.tag",
								"id": 22
							}
						},
						{
							"id": 1120,
							"name": "textColor",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Text colour to be applied."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 126,
									"character": 11
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeColor",
								"id": 30
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.textColor",
								"id": 23
							}
						},
						{
							"id": 1121,
							"name": "theme",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Theme applied to this element and inherited for child elements (until\na descendant theme is applied)."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 131,
									"character": 7
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeTheme",
								"id": 35
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.theme",
								"id": 24
							}
						},
						{
							"id": 1122,
							"name": "width",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Fixed width applied through inline styling"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 133,
									"character": 7
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.width",
								"id": 25
							}
						},
						{
							"id": 1099,
							"name": "wrap",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Flag to allow flex items to wrap over to new lines"
							},
							"sources": [
								{
									"fileName": "src/Flex/Flex.tsx",
									"line": 29,
									"character": 6
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "FlexProps.wrap",
								"id": 184
							}
						},
						{
							"id": 1123,
							"name": "zIndex",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "z-index number for layering elements."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 135,
									"character": 8
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "number"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.zIndex",
								"id": 26
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								1100,
								1090,
								1091,
								1092,
								1093,
								1101,
								1102,
								1103,
								1104,
								1105,
								1106,
								1094,
								1107,
								1108,
								1095,
								1096,
								1109,
								1097,
								1110,
								1111,
								1112,
								1113,
								1114,
								1115,
								1116,
								1117,
								1118,
								1089,
								1098,
								1119,
								1120,
								1121,
								1122,
								1099,
								1123
							]
						}
					],
					"sources": [
						{
							"fileName": "src/List/ListItem.tsx",
							"line": 5,
							"character": 30
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"name": "FlexProps",
							"id": 174
						}
					]
				},
				{
					"id": 1124,
					"name": "ListItem",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "src/List/ListItem.tsx",
							"line": 14,
							"character": 14
						}
					],
					"type": {
						"type": "reference",
						"name": "ForwardRefExoticComponent",
						"typeArguments": [
							{
								"type": "intersection",
								"types": [
									{
										"type": "reference",
										"name": "ListItemProps",
										"id": 1088
									},
									{
										"type": "reflection",
										"declaration": {
											"id": 1125,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {}
										}
									},
									{
										"type": "reference",
										"name": "RefAttributes",
										"typeArguments": [
											{
												"type": "reference",
												"name": "HTMLLIElement"
											}
										]
									}
								]
							}
						]
					},
					"defaultValue": " React.forwardRef<HTMLLIElement, Attributes<HTMLLIElement, ListItemProps>>((props, ref) => {\n  const { children, separator = '/', ...rest } = props;\n\n  return (\n    <Flex { ...rest }\n        alignChildrenVertical=\"middle\"\n        className=\"ListItem\"\n        data-separator={ separator }\n        direction=\"horizontal\"\n        ref={ ref }\n        tag=\"li\">\n      <Flex>{ children }</Flex>\n    </Flex>\n  );\n})"
				}
			],
			"groups": [
				{
					"title": "Interfaces",
					"kind": 256,
					"children": [
						1088
					]
				},
				{
					"title": "Variables",
					"kind": 32,
					"children": [
						1124
					]
				}
			],
			"sources": [
				{
					"fileName": "src/List/ListItem.tsx",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 1126,
			"name": "\"Placement/Placement\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "/Users/harry/Projects/personal/preshape/src/Placement/Placement.tsx",
			"children": [
				{
					"id": 1127,
					"name": "PlacementProps",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"children": [
						{
							"id": 1130,
							"name": "absolute",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Quick way of absolutely position to common places"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 58,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "fullscreen"
									},
									{
										"type": "stringLiteral",
										"value": "top"
									},
									{
										"type": "stringLiteral",
										"value": "top-left"
									},
									{
										"type": "stringLiteral",
										"value": "top-right"
									},
									{
										"type": "stringLiteral",
										"value": "bottom"
									},
									{
										"type": "stringLiteral",
										"value": "bottom-left"
									},
									{
										"type": "stringLiteral",
										"value": "bottom-right"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.absolute",
								"id": 3
							}
						},
						{
							"id": 1131,
							"name": "backgroundColor",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Background colour to be applied, shades are taken from the current\ntheme."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 70,
									"character": 17
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeColor",
								"id": 30
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.backgroundColor",
								"id": 4
							}
						},
						{
							"id": 1132,
							"name": "borderColor",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Border colour to be applied, shades are taken from the current\ntheme."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 75,
									"character": 13
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeColor",
								"id": 30
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.borderColor",
								"id": 5
							}
						},
						{
							"id": 1133,
							"name": "borderRadius",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Adds styling of a border radius to one of the size multiples."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 79,
									"character": 14
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "x1"
									},
									{
										"type": "stringLiteral",
										"value": "x2"
									},
									{
										"type": "stringLiteral",
										"value": "x3"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.borderRadius",
								"id": 6
							}
						},
						{
							"id": 1134,
							"name": "borderSize",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Thickness of the border to be applied"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 81,
									"character": 12
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "x1"
									},
									{
										"type": "stringLiteral",
										"value": "x2"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.borderSize",
								"id": 7
							}
						},
						{
							"id": 1135,
							"name": "clickable",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Adds styling to indicate that the element is clickable"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 83,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.clickable",
								"id": 8
							}
						},
						{
							"id": 1136,
							"name": "container",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies relative positioning to contain child elements."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 85,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.container",
								"id": 9
							}
						},
						{
							"id": 1137,
							"name": "display",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies display styling"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 87,
									"character": 9
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "block"
									},
									{
										"type": "stringLiteral",
										"value": "inline-block"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.display",
								"id": 10
							}
						},
						{
							"id": 1138,
							"name": "fixed",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Quick way of absolutely position to common places"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 89,
									"character": 7
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "fullscreen"
									},
									{
										"type": "stringLiteral",
										"value": "top"
									},
									{
										"type": "stringLiteral",
										"value": "top-left"
									},
									{
										"type": "stringLiteral",
										"value": "top-right"
									},
									{
										"type": "stringLiteral",
										"value": "bottom"
									},
									{
										"type": "stringLiteral",
										"value": "bottom-left"
									},
									{
										"type": "stringLiteral",
										"value": "bottom-right"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.fixed",
								"id": 11
							}
						},
						{
							"id": 1139,
							"name": "height",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Fixed height applied through inline styling"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 98,
									"character": 8
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.height",
								"id": 12
							}
						},
						{
							"id": 1140,
							"name": "margin",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Margins applied for the global spacing variables"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 100,
									"character": 8
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeSize",
								"id": 31
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.margin",
								"id": 13
							}
						},
						{
							"id": 1141,
							"name": "maxWidth",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Max width applied through inline styling"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 102,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.maxWidth",
								"id": 14
							}
						},
						{
							"id": 1142,
							"name": "minHeight",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Max height applied through inline styling"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 104,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.minHeight",
								"id": 15
							}
						},
						{
							"id": 1143,
							"name": "minWidth",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Min width applied through inline style"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 106,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.minWidth",
								"id": 16
							}
						},
						{
							"id": 1128,
							"name": "options",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/Placement/Placement.tsx",
									"line": 14,
									"character": 9
								}
							],
							"type": {
								"type": "reference",
								"name": "PopperProps"
							}
						},
						{
							"id": 1144,
							"name": "overflow",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Overflow"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 108,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "stringLiteral",
										"value": "hidden"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.overflow",
								"id": 17
							}
						},
						{
							"id": 1145,
							"name": "padding",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Padding applied for the global spacing variables"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 110,
									"character": 9
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeSize",
								"id": 31
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.padding",
								"id": 18
							}
						},
						{
							"id": 1146,
							"name": "paddingHorizontal",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Horizontal padding applied for the global spacing variables"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 112,
									"character": 19
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeSize",
								"id": 31
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.paddingHorizontal",
								"id": 19
							}
						},
						{
							"id": 1147,
							"name": "paddingVertical",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Vertical pa?dding applied for the global spacing variables"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 114,
									"character": 17
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeSize",
								"id": 31
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.paddingVertical",
								"id": 20
							}
						},
						{
							"id": 1129,
							"name": "placement",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/Placement/Placement.tsx",
									"line": 15,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "bottom"
									},
									{
										"type": "stringLiteral",
										"value": "left"
									},
									{
										"type": "stringLiteral",
										"value": "right"
									},
									{
										"type": "stringLiteral",
										"value": "top"
									}
								]
							}
						},
						{
							"id": 1148,
							"name": "scrollable",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies overflow styling to enable/disable scrolling."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 116,
									"character": 12
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.scrollable",
								"id": 21
							}
						},
						{
							"id": 1149,
							"name": "tag",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Any valid HTML or SVG element tag.",
								"tags": [
									{
										"tag": "reference",
										"text": "false\n"
									}
								]
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 122,
									"character": 5
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeAllElementTags",
								"id": 34
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.tag",
								"id": 22
							}
						},
						{
							"id": 1150,
							"name": "textColor",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Text colour to be applied."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 126,
									"character": 11
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeColor",
								"id": 30
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.textColor",
								"id": 23
							}
						},
						{
							"id": 1151,
							"name": "theme",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Theme applied to this element and inherited for child elements (until\na descendant theme is applied)."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 131,
									"character": 7
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeTheme",
								"id": 35
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.theme",
								"id": 24
							}
						},
						{
							"id": 1152,
							"name": "width",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Fixed width applied through inline styling"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 133,
									"character": 7
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.width",
								"id": 25
							}
						},
						{
							"id": 1153,
							"name": "zIndex",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "z-index number for layering elements."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 135,
									"character": 8
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "number"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.zIndex",
								"id": 26
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								1130,
								1131,
								1132,
								1133,
								1134,
								1135,
								1136,
								1137,
								1138,
								1139,
								1140,
								1141,
								1142,
								1143,
								1128,
								1144,
								1145,
								1146,
								1147,
								1129,
								1148,
								1149,
								1150,
								1151,
								1152,
								1153
							]
						}
					],
					"sources": [
						{
							"fileName": "src/Placement/Placement.tsx",
							"line": 13,
							"character": 31
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"name": "BaseProps",
							"id": 2
						}
					]
				},
				{
					"id": 1154,
					"name": "PlacementArrowPropsContext",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "src/Placement/Placement.tsx",
							"line": 8,
							"character": 39
						}
					],
					"type": {
						"type": "reference",
						"name": "Context",
						"typeArguments": [
							{
								"type": "reference",
								"name": "PopperArrowProps"
							}
						]
					},
					"defaultValue": " React.createContext<PopperArrowProps>({\n  ref: () => {},\n  style: {},\n})"
				},
				{
					"id": 1155,
					"name": "Placement",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"signatures": [
						{
							"id": 1156,
							"name": "Placement",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 1157,
									"name": "props",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intersection",
										"types": [
											{
												"type": "reference",
												"name": "PlacementProps",
												"id": 1127
											},
											{
												"type": "reflection",
												"declaration": {
													"id": 1158,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"children": [
														{
															"id": 1159,
															"name": "children",
															"kind": 32,
															"kindString": "Variable",
															"flags": {
																"isOptional": true
															},
															"sources": [
																{
																	"fileName": "node_modules/@types/react/index.d.ts",
																	"line": 773,
																	"character": 46
																}
															],
															"type": {
																"type": "reference",
																"name": "ReactNode"
															}
														}
													],
													"groups": [
														{
															"title": "Variables",
															"kind": 32,
															"children": [
																1159
															]
														}
													]
												}
											}
										]
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "ReactPortal"
							}
						}
					],
					"sources": [
						{
							"fileName": "src/Placement/Placement.tsx",
							"line": 18,
							"character": 15
						}
					]
				}
			],
			"groups": [
				{
					"title": "Interfaces",
					"kind": 256,
					"children": [
						1127
					]
				},
				{
					"title": "Variables",
					"kind": 32,
					"children": [
						1154
					]
				},
				{
					"title": "Functions",
					"kind": 64,
					"children": [
						1155
					]
				}
			],
			"sources": [
				{
					"fileName": "src/Placement/Placement.tsx",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 1160,
			"name": "\"Placement/PlacementArrow\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "/Users/harry/Projects/personal/preshape/src/Placement/PlacementArrow.tsx",
			"children": [
				{
					"id": 1161,
					"name": "PlacementArrowProps",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"children": [
						{
							"id": 1162,
							"name": "absolute",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Quick way of absolutely position to common places"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 58,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "fullscreen"
									},
									{
										"type": "stringLiteral",
										"value": "top"
									},
									{
										"type": "stringLiteral",
										"value": "top-left"
									},
									{
										"type": "stringLiteral",
										"value": "top-right"
									},
									{
										"type": "stringLiteral",
										"value": "bottom"
									},
									{
										"type": "stringLiteral",
										"value": "bottom-left"
									},
									{
										"type": "stringLiteral",
										"value": "bottom-right"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.absolute",
								"id": 3
							}
						},
						{
							"id": 1163,
							"name": "backgroundColor",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Background colour to be applied, shades are taken from the current\ntheme."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 70,
									"character": 17
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeColor",
								"id": 30
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.backgroundColor",
								"id": 4
							}
						},
						{
							"id": 1164,
							"name": "borderColor",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Border colour to be applied, shades are taken from the current\ntheme."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 75,
									"character": 13
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeColor",
								"id": 30
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.borderColor",
								"id": 5
							}
						},
						{
							"id": 1165,
							"name": "borderRadius",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Adds styling of a border radius to one of the size multiples."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 79,
									"character": 14
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "x1"
									},
									{
										"type": "stringLiteral",
										"value": "x2"
									},
									{
										"type": "stringLiteral",
										"value": "x3"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.borderRadius",
								"id": 6
							}
						},
						{
							"id": 1166,
							"name": "borderSize",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Thickness of the border to be applied"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 81,
									"character": 12
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "x1"
									},
									{
										"type": "stringLiteral",
										"value": "x2"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.borderSize",
								"id": 7
							}
						},
						{
							"id": 1167,
							"name": "clickable",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Adds styling to indicate that the element is clickable"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 83,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.clickable",
								"id": 8
							}
						},
						{
							"id": 1168,
							"name": "container",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies relative positioning to contain child elements."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 85,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.container",
								"id": 9
							}
						},
						{
							"id": 1169,
							"name": "display",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies display styling"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 87,
									"character": 9
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "block"
									},
									{
										"type": "stringLiteral",
										"value": "inline-block"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.display",
								"id": 10
							}
						},
						{
							"id": 1170,
							"name": "fixed",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Quick way of absolutely position to common places"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 89,
									"character": 7
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "fullscreen"
									},
									{
										"type": "stringLiteral",
										"value": "top"
									},
									{
										"type": "stringLiteral",
										"value": "top-left"
									},
									{
										"type": "stringLiteral",
										"value": "top-right"
									},
									{
										"type": "stringLiteral",
										"value": "bottom"
									},
									{
										"type": "stringLiteral",
										"value": "bottom-left"
									},
									{
										"type": "stringLiteral",
										"value": "bottom-right"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.fixed",
								"id": 11
							}
						},
						{
							"id": 1171,
							"name": "height",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Fixed height applied through inline styling"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 98,
									"character": 8
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.height",
								"id": 12
							}
						},
						{
							"id": 1172,
							"name": "margin",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Margins applied for the global spacing variables"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 100,
									"character": 8
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeSize",
								"id": 31
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.margin",
								"id": 13
							}
						},
						{
							"id": 1173,
							"name": "maxWidth",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Max width applied through inline styling"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 102,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.maxWidth",
								"id": 14
							}
						},
						{
							"id": 1174,
							"name": "minHeight",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Max height applied through inline styling"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 104,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.minHeight",
								"id": 15
							}
						},
						{
							"id": 1175,
							"name": "minWidth",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Min width applied through inline style"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 106,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.minWidth",
								"id": 16
							}
						},
						{
							"id": 1176,
							"name": "overflow",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Overflow"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 108,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "stringLiteral",
										"value": "hidden"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.overflow",
								"id": 17
							}
						},
						{
							"id": 1177,
							"name": "padding",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Padding applied for the global spacing variables"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 110,
									"character": 9
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeSize",
								"id": 31
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.padding",
								"id": 18
							}
						},
						{
							"id": 1178,
							"name": "paddingHorizontal",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Horizontal padding applied for the global spacing variables"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 112,
									"character": 19
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeSize",
								"id": 31
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.paddingHorizontal",
								"id": 19
							}
						},
						{
							"id": 1179,
							"name": "paddingVertical",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Vertical pa?dding applied for the global spacing variables"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 114,
									"character": 17
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeSize",
								"id": 31
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.paddingVertical",
								"id": 20
							}
						},
						{
							"id": 1180,
							"name": "scrollable",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies overflow styling to enable/disable scrolling."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 116,
									"character": 12
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.scrollable",
								"id": 21
							}
						},
						{
							"id": 1181,
							"name": "tag",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Any valid HTML or SVG element tag.",
								"tags": [
									{
										"tag": "reference",
										"text": "false\n"
									}
								]
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 122,
									"character": 5
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeAllElementTags",
								"id": 34
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.tag",
								"id": 22
							}
						},
						{
							"id": 1182,
							"name": "textColor",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Text colour to be applied."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 126,
									"character": 11
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeColor",
								"id": 30
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.textColor",
								"id": 23
							}
						},
						{
							"id": 1183,
							"name": "theme",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Theme applied to this element and inherited for child elements (until\na descendant theme is applied)."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 131,
									"character": 7
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeTheme",
								"id": 35
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.theme",
								"id": 24
							}
						},
						{
							"id": 1184,
							"name": "width",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Fixed width applied through inline styling"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 133,
									"character": 7
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.width",
								"id": 25
							}
						},
						{
							"id": 1185,
							"name": "zIndex",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "z-index number for layering elements."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 135,
									"character": 8
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "number"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.zIndex",
								"id": 26
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								1162,
								1163,
								1164,
								1165,
								1166,
								1167,
								1168,
								1169,
								1170,
								1171,
								1172,
								1173,
								1174,
								1175,
								1176,
								1177,
								1178,
								1179,
								1180,
								1181,
								1182,
								1183,
								1184,
								1185
							]
						}
					],
					"sources": [
						{
							"fileName": "src/Placement/PlacementArrow.tsx",
							"line": 5,
							"character": 36
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"name": "BaseProps",
							"id": 2
						}
					]
				},
				{
					"id": 1186,
					"name": "PlacementArrow",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"signatures": [
						{
							"id": 1187,
							"name": "PlacementArrow",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 1188,
									"name": "props",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intersection",
										"types": [
											{
												"type": "reference",
												"name": "PlacementArrowProps",
												"id": 1161
											},
											{
												"type": "reflection",
												"declaration": {
													"id": 1189,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"children": [
														{
															"id": 1190,
															"name": "children",
															"kind": 32,
															"kindString": "Variable",
															"flags": {
																"isOptional": true
															},
															"sources": [
																{
																	"fileName": "node_modules/@types/react/index.d.ts",
																	"line": 773,
																	"character": 46
																}
															],
															"type": {
																"type": "reference",
																"name": "ReactNode"
															}
														}
													],
													"groups": [
														{
															"title": "Variables",
															"kind": 32,
															"children": [
																1190
															]
														}
													]
												}
											}
										]
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Element"
							}
						}
					],
					"sources": [
						{
							"fileName": "src/Placement/PlacementArrow.tsx",
							"line": 7,
							"character": 20
						}
					]
				}
			],
			"groups": [
				{
					"title": "Interfaces",
					"kind": 256,
					"children": [
						1161
					]
				},
				{
					"title": "Functions",
					"kind": 64,
					"children": [
						1186
					]
				}
			],
			"sources": [
				{
					"fileName": "src/Placement/PlacementArrow.tsx",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 1191,
			"name": "\"Placement/PlacementContent\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "/Users/harry/Projects/personal/preshape/src/Placement/PlacementContent.tsx",
			"children": [
				{
					"id": 1192,
					"name": "PlacementContentProps",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"children": [
						{
							"id": 1203,
							"name": "absolute",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Quick way of absolutely position to common places"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 58,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "fullscreen"
									},
									{
										"type": "stringLiteral",
										"value": "top"
									},
									{
										"type": "stringLiteral",
										"value": "top-left"
									},
									{
										"type": "stringLiteral",
										"value": "top-right"
									},
									{
										"type": "stringLiteral",
										"value": "bottom"
									},
									{
										"type": "stringLiteral",
										"value": "bottom-left"
									},
									{
										"type": "stringLiteral",
										"value": "bottom-right"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.absolute",
								"id": 3
							}
						},
						{
							"id": 1193,
							"name": "alignChildren",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Short cut child alignment property for both alignChildrenHorizontal and\nalignChildrenVertical."
							},
							"sources": [
								{
									"fileName": "src/Flex/Flex.tsx",
									"line": 11,
									"character": 15
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "start"
									},
									{
										"type": "stringLiteral",
										"value": "middle"
									},
									{
										"type": "stringLiteral",
										"value": "end"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "FlexProps.alignChildren",
								"id": 175
							}
						},
						{
							"id": 1194,
							"name": "alignChildrenHorizontal",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Horizontal alignment of children flex items."
							},
							"sources": [
								{
									"fileName": "src/Flex/Flex.tsx",
									"line": 13,
									"character": 25
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "start"
									},
									{
										"type": "stringLiteral",
										"value": "middle"
									},
									{
										"type": "stringLiteral",
										"value": "end"
									},
									{
										"type": "stringLiteral",
										"value": "around"
									},
									{
										"type": "stringLiteral",
										"value": "between"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "FlexProps.alignChildrenHorizontal",
								"id": 176
							}
						},
						{
							"id": 1195,
							"name": "alignChildrenVertical",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Vertical alignment of children flex items."
							},
							"sources": [
								{
									"fileName": "src/Flex/Flex.tsx",
									"line": 15,
									"character": 23
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "start"
									},
									{
										"type": "stringLiteral",
										"value": "middle"
									},
									{
										"type": "stringLiteral",
										"value": "end"
									},
									{
										"type": "stringLiteral",
										"value": "around"
									},
									{
										"type": "stringLiteral",
										"value": "between"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "FlexProps.alignChildrenVertical",
								"id": 177
							}
						},
						{
							"id": 1196,
							"name": "alignSelf",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Flex item alignment property (changes with parent direction)."
							},
							"sources": [
								{
									"fileName": "src/Flex/Flex.tsx",
									"line": 17,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "start"
									},
									{
										"type": "stringLiteral",
										"value": "middle"
									},
									{
										"type": "stringLiteral",
										"value": "end"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "FlexProps.alignSelf",
								"id": 178
							}
						},
						{
							"id": 1204,
							"name": "backgroundColor",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Background colour to be applied, shades are taken from the current\ntheme."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 70,
									"character": 17
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeColor",
								"id": 30
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.backgroundColor",
								"id": 4
							}
						},
						{
							"id": 1205,
							"name": "borderColor",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Border colour to be applied, shades are taken from the current\ntheme."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 75,
									"character": 13
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeColor",
								"id": 30
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.borderColor",
								"id": 5
							}
						},
						{
							"id": 1206,
							"name": "borderRadius",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Adds styling of a border radius to one of the size multiples."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 79,
									"character": 14
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "x1"
									},
									{
										"type": "stringLiteral",
										"value": "x2"
									},
									{
										"type": "stringLiteral",
										"value": "x3"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.borderRadius",
								"id": 6
							}
						},
						{
							"id": 1207,
							"name": "borderSize",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Thickness of the border to be applied"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 81,
									"character": 12
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "x1"
									},
									{
										"type": "stringLiteral",
										"value": "x2"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.borderSize",
								"id": 7
							}
						},
						{
							"id": 1208,
							"name": "clickable",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Adds styling to indicate that the element is clickable"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 83,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.clickable",
								"id": 8
							}
						},
						{
							"id": 1209,
							"name": "container",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies relative positioning to contain child elements."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 85,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.container",
								"id": 9
							}
						},
						{
							"id": 1197,
							"name": "direction",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Direction on which way to flex items."
							},
							"sources": [
								{
									"fileName": "src/Flex/Flex.tsx",
									"line": 19,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "horizontal"
									},
									{
										"type": "stringLiteral",
										"value": "vertical"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "FlexProps.direction",
								"id": 179
							}
						},
						{
							"id": 1210,
							"name": "display",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies display styling"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 87,
									"character": 9
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "block"
									},
									{
										"type": "stringLiteral",
										"value": "inline-block"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.display",
								"id": 10
							}
						},
						{
							"id": 1211,
							"name": "fixed",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Quick way of absolutely position to common places"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 89,
									"character": 7
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "fullscreen"
									},
									{
										"type": "stringLiteral",
										"value": "top"
									},
									{
										"type": "stringLiteral",
										"value": "top-left"
									},
									{
										"type": "stringLiteral",
										"value": "top-right"
									},
									{
										"type": "stringLiteral",
										"value": "bottom"
									},
									{
										"type": "stringLiteral",
										"value": "bottom-left"
									},
									{
										"type": "stringLiteral",
										"value": "bottom-right"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.fixed",
								"id": 11
							}
						},
						{
							"id": 1198,
							"name": "gap",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Spacing applied between child flex items, values are global spacing variables."
							},
							"sources": [
								{
									"fileName": "src/Flex/Flex.tsx",
									"line": 21,
									"character": 5
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeSize",
								"id": 31
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "FlexProps.gap",
								"id": 180
							}
						},
						{
							"id": 1199,
							"name": "grow",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Flex item property if it should grow with available space."
							},
							"sources": [
								{
									"fileName": "src/Flex/Flex.tsx",
									"line": 23,
									"character": 6
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "FlexProps.grow",
								"id": 181
							}
						},
						{
							"id": 1212,
							"name": "height",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Fixed height applied through inline styling"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 98,
									"character": 8
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.height",
								"id": 12
							}
						},
						{
							"id": 1200,
							"name": "initial",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Initial width to flex from for a child item."
							},
							"sources": [
								{
									"fileName": "src/Flex/Flex.tsx",
									"line": 25,
									"character": 9
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "content"
									},
									{
										"type": "stringLiteral",
										"value": "container"
									},
									{
										"type": "stringLiteral",
										"value": "none"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "FlexProps.initial",
								"id": 182
							}
						},
						{
							"id": 1213,
							"name": "margin",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Margins applied for the global spacing variables"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 100,
									"character": 8
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeSize",
								"id": 31
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.margin",
								"id": 13
							}
						},
						{
							"id": 1214,
							"name": "maxWidth",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Max width applied through inline styling"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 102,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.maxWidth",
								"id": 14
							}
						},
						{
							"id": 1215,
							"name": "minHeight",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Max height applied through inline styling"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 104,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.minHeight",
								"id": 15
							}
						},
						{
							"id": 1216,
							"name": "minWidth",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Min width applied through inline style"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 106,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.minWidth",
								"id": 16
							}
						},
						{
							"id": 1217,
							"name": "overflow",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Overflow"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 108,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "stringLiteral",
										"value": "hidden"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.overflow",
								"id": 17
							}
						},
						{
							"id": 1218,
							"name": "padding",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Padding applied for the global spacing variables"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 110,
									"character": 9
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeSize",
								"id": 31
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.padding",
								"id": 18
							}
						},
						{
							"id": 1219,
							"name": "paddingHorizontal",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Horizontal padding applied for the global spacing variables"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 112,
									"character": 19
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeSize",
								"id": 31
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.paddingHorizontal",
								"id": 19
							}
						},
						{
							"id": 1220,
							"name": "paddingVertical",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Vertical pa?dding applied for the global spacing variables"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 114,
									"character": 17
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeSize",
								"id": 31
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.paddingVertical",
								"id": 20
							}
						},
						{
							"id": 1221,
							"name": "scrollable",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies overflow styling to enable/disable scrolling."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 116,
									"character": 12
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.scrollable",
								"id": 21
							}
						},
						{
							"id": 1201,
							"name": "shrink",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Flex item property if it should shrink."
							},
							"sources": [
								{
									"fileName": "src/Flex/Flex.tsx",
									"line": 27,
									"character": 8
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "FlexProps.shrink",
								"id": 183
							}
						},
						{
							"id": 1222,
							"name": "tag",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Any valid HTML or SVG element tag.",
								"tags": [
									{
										"tag": "reference",
										"text": "false\n"
									}
								]
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 122,
									"character": 5
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeAllElementTags",
								"id": 34
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.tag",
								"id": 22
							}
						},
						{
							"id": 1223,
							"name": "textColor",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Text colour to be applied."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 126,
									"character": 11
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeColor",
								"id": 30
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.textColor",
								"id": 23
							}
						},
						{
							"id": 1224,
							"name": "theme",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Theme applied to this element and inherited for child elements (until\na descendant theme is applied)."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 131,
									"character": 7
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeTheme",
								"id": 35
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.theme",
								"id": 24
							}
						},
						{
							"id": 1225,
							"name": "width",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Fixed width applied through inline styling"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 133,
									"character": 7
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.width",
								"id": 25
							}
						},
						{
							"id": 1202,
							"name": "wrap",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Flag to allow flex items to wrap over to new lines"
							},
							"sources": [
								{
									"fileName": "src/Flex/Flex.tsx",
									"line": 29,
									"character": 6
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "FlexProps.wrap",
								"id": 184
							}
						},
						{
							"id": 1226,
							"name": "zIndex",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "z-index number for layering elements."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 135,
									"character": 8
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "number"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.zIndex",
								"id": 26
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								1203,
								1193,
								1194,
								1195,
								1196,
								1204,
								1205,
								1206,
								1207,
								1208,
								1209,
								1197,
								1210,
								1211,
								1198,
								1199,
								1212,
								1200,
								1213,
								1214,
								1215,
								1216,
								1217,
								1218,
								1219,
								1220,
								1221,
								1201,
								1222,
								1223,
								1224,
								1225,
								1202,
								1226
							]
						}
					],
					"sources": [
						{
							"fileName": "src/Placement/PlacementContent.tsx",
							"line": 5,
							"character": 38
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"name": "FlexProps",
							"id": 174
						}
					]
				},
				{
					"id": 1227,
					"name": "PlacementContent",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "src/Placement/PlacementContent.tsx",
							"line": 9,
							"character": 22
						}
					],
					"type": {
						"type": "reference",
						"name": "ForwardRefExoticComponent",
						"typeArguments": [
							{
								"type": "intersection",
								"types": [
									{
										"type": "reference",
										"name": "PlacementContentProps",
										"id": 1192
									},
									{
										"type": "reflection",
										"declaration": {
											"id": 1228,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {}
										}
									},
									{
										"type": "reference",
										"name": "RefAttributes",
										"typeArguments": [
											{
												"type": "reference",
												"name": "HTMLElement"
											}
										]
									}
								]
							}
						]
					},
					"defaultValue": " React.forwardRef<HTMLElement, Attributes<HTMLElement, PlacementContentProps>>((props, ref) => {\n  const { children, ...rest } = props;\n\n  return (\n    <Flex { ...rest } container>\n      { children }\n    </Flex>\n  );\n})"
				}
			],
			"groups": [
				{
					"title": "Interfaces",
					"kind": 256,
					"children": [
						1192
					]
				},
				{
					"title": "Variables",
					"kind": 32,
					"children": [
						1227
					]
				}
			],
			"sources": [
				{
					"fileName": "src/Placement/PlacementContent.tsx",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 1229,
			"name": "\"Placement/PlacementManager\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "/Users/harry/Projects/personal/preshape/src/Placement/PlacementManager.tsx",
			"children": [
				{
					"id": 1230,
					"name": "PlacementManagerProps",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"children": [
						{
							"id": 1233,
							"name": "children",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/react/index.d.ts",
									"line": 773,
									"character": 46
								}
							],
							"type": {
								"type": "reference",
								"name": "ReactNode"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "__type.children",
								"id": 1159
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								1233
							]
						}
					],
					"sources": [
						{
							"fileName": "src/Placement/PlacementManager.tsx",
							"line": 3,
							"character": 38
						}
					],
					"extendedTypes": [
						{
							"type": "reflection",
							"declaration": {
								"id": 1231,
								"name": "__type",
								"kind": 65536,
								"kindString": "Type literal",
								"flags": {},
								"children": [
									{
										"id": 1232,
										"name": "children",
										"kind": 32,
										"kindString": "Variable",
										"flags": {
											"isOptional": true
										},
										"sources": [
											{
												"fileName": "node_modules/@types/react/index.d.ts",
												"line": 773,
												"character": 46
											}
										],
										"type": {
											"type": "reference",
											"name": "ReactNode"
										}
									}
								],
								"groups": [
									{
										"title": "Variables",
										"kind": 32,
										"children": [
											1232
										]
									}
								],
								"sources": [
									{
										"fileName": "src/Placement/PlacementManager.tsx",
										"line": 3,
										"character": 46
									}
								]
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Interfaces",
					"kind": 256,
					"children": [
						1230
					]
				}
			],
			"sources": [
				{
					"fileName": "src/Placement/PlacementManager.tsx",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 1234,
			"name": "\"Placement/PlacementReference\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "/Users/harry/Projects/personal/preshape/src/Placement/PlacementReference.tsx",
			"children": [
				{
					"id": 1235,
					"name": "PlacementReferenceProps",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"children": [
						{
							"id": 1238,
							"name": "children",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/react/index.d.ts",
									"line": 773,
									"character": 46
								}
							],
							"type": {
								"type": "reference",
								"name": "ReactNode"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "__type.children",
								"id": 1159
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								1238
							]
						}
					],
					"sources": [
						{
							"fileName": "src/Placement/PlacementReference.tsx",
							"line": 3,
							"character": 40
						}
					],
					"extendedTypes": [
						{
							"type": "reflection",
							"declaration": {
								"id": 1236,
								"name": "__type",
								"kind": 65536,
								"kindString": "Type literal",
								"flags": {},
								"children": [
									{
										"id": 1237,
										"name": "children",
										"kind": 32,
										"kindString": "Variable",
										"flags": {
											"isOptional": true
										},
										"sources": [
											{
												"fileName": "node_modules/@types/react/index.d.ts",
												"line": 773,
												"character": 46
											}
										],
										"type": {
											"type": "reference",
											"name": "ReactNode"
										}
									}
								],
								"groups": [
									{
										"title": "Variables",
										"kind": 32,
										"children": [
											1237
										]
									}
								],
								"sources": [
									{
										"fileName": "src/Placement/PlacementReference.tsx",
										"line": 3,
										"character": 48
									}
								]
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Interfaces",
					"kind": 256,
					"children": [
						1235
					]
				}
			],
			"sources": [
				{
					"fileName": "src/Placement/PlacementReference.tsx",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 1239,
			"name": "\"Placement/PlacementReferenceElement\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "/Users/harry/Projects/personal/preshape/src/Placement/PlacementReferenceElement.tsx",
			"children": [
				{
					"id": 1245,
					"name": "PlacementReferenceElement",
					"kind": 128,
					"kindString": "Class",
					"flags": {
						"isExported": true
					},
					"children": [
						{
							"id": 1253,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1254,
									"name": "new PlacementReferenceElement",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"parameters": [
										{
											"id": 1255,
											"name": "rect",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Rect",
												"id": 1240
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "PlacementReferenceElement",
										"id": 1245
									}
								}
							],
							"sources": [
								{
									"fileName": "src/Placement/PlacementReferenceElement.tsx",
									"line": 16,
									"character": 4
								}
							]
						},
						{
							"id": 1268,
							"name": "clientHeight",
							"kind": 262144,
							"kindString": "Accessor",
							"flags": {
								"isExported": true
							},
							"getSignature": [
								{
									"id": 1269,
									"name": "__get",
									"kind": 524288,
									"kindString": "Get signature",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"sources": [
								{
									"fileName": "src/Placement/PlacementReferenceElement.tsx",
									"line": 41,
									"character": 18
								}
							]
						},
						{
							"id": 1266,
							"name": "clientWidth",
							"kind": 262144,
							"kindString": "Accessor",
							"flags": {
								"isExported": true
							},
							"getSignature": [
								{
									"id": 1267,
									"name": "__get",
									"kind": 524288,
									"kindString": "Get signature",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"sources": [
								{
									"fileName": "src/Placement/PlacementReferenceElement.tsx",
									"line": 37,
									"character": 17
								}
							]
						},
						{
							"id": 1264,
							"name": "getBoundingClientRect",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1265,
									"name": "getBoundingClientRect",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "ClientRect"
									}
								}
							],
							"sources": [
								{
									"fileName": "src/Placement/PlacementReferenceElement.tsx",
									"line": 33,
									"character": 23
								}
							]
						},
						{
							"id": 1256,
							"name": "update",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1257,
									"name": "update",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 1258,
											"name": "__namedParameters",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"originalName": "__0",
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 1259,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"children": [
														{
															"id": 1260,
															"name": "height",
															"kind": 32,
															"kindString": "Variable",
															"flags": {},
															"sources": [
																{
																	"fileName": "src/Placement/PlacementReferenceElement.tsx",
																	"line": 22,
																	"character": 17
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "number"
															}
														},
														{
															"id": 1261,
															"name": "width",
															"kind": 32,
															"kindString": "Variable",
															"flags": {},
															"sources": [
																{
																	"fileName": "src/Placement/PlacementReferenceElement.tsx",
																	"line": 22,
																	"character": 24
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "number"
															}
														},
														{
															"id": 1262,
															"name": "x",
															"kind": 32,
															"kindString": "Variable",
															"flags": {},
															"sources": [
																{
																	"fileName": "src/Placement/PlacementReferenceElement.tsx",
																	"line": 22,
																	"character": 27
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "number"
															}
														},
														{
															"id": 1263,
															"name": "y",
															"kind": 32,
															"kindString": "Variable",
															"flags": {},
															"sources": [
																{
																	"fileName": "src/Placement/PlacementReferenceElement.tsx",
																	"line": 22,
																	"character": 30
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "number"
															}
														}
													],
													"groups": [
														{
															"title": "Variables",
															"kind": 32,
															"children": [
																1260,
																1261,
																1262,
																1263
															]
														}
													],
													"sources": [
														{
															"fileName": "src/Placement/PlacementReferenceElement.tsx",
															"line": 22,
															"character": 9
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							],
							"sources": [
								{
									"fileName": "src/Placement/PlacementReferenceElement.tsx",
									"line": 22,
									"character": 8
								}
							]
						},
						{
							"id": 1246,
							"name": "clientRect",
							"kind": 2097152,
							"kindString": "Object literal",
							"flags": {
								"isExported": true
							},
							"children": [
								{
									"id": 1250,
									"name": "bottom",
									"kind": 32,
									"kindString": "Variable",
									"flags": {
										"isExported": true
									},
									"sources": [
										{
											"fileName": "src/Placement/PlacementReferenceElement.tsx",
											"line": 13,
											"character": 10
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									},
									"defaultValue": "0"
								},
								{
									"id": 1252,
									"name": "height",
									"kind": 32,
									"kindString": "Variable",
									"flags": {
										"isExported": true
									},
									"sources": [
										{
											"fileName": "src/Placement/PlacementReferenceElement.tsx",
											"line": 15,
											"character": 10
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									},
									"defaultValue": "0"
								},
								{
									"id": 1248,
									"name": "left",
									"kind": 32,
									"kindString": "Variable",
									"flags": {
										"isExported": true
									},
									"sources": [
										{
											"fileName": "src/Placement/PlacementReferenceElement.tsx",
											"line": 11,
											"character": 8
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									},
									"defaultValue": "0"
								},
								{
									"id": 1249,
									"name": "right",
									"kind": 32,
									"kindString": "Variable",
									"flags": {
										"isExported": true
									},
									"sources": [
										{
											"fileName": "src/Placement/PlacementReferenceElement.tsx",
											"line": 12,
											"character": 9
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									},
									"defaultValue": "0"
								},
								{
									"id": 1247,
									"name": "top",
									"kind": 32,
									"kindString": "Variable",
									"flags": {
										"isExported": true
									},
									"sources": [
										{
											"fileName": "src/Placement/PlacementReferenceElement.tsx",
											"line": 10,
											"character": 7
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									},
									"defaultValue": "0"
								},
								{
									"id": 1251,
									"name": "width",
									"kind": 32,
									"kindString": "Variable",
									"flags": {
										"isExported": true
									},
									"sources": [
										{
											"fileName": "src/Placement/PlacementReferenceElement.tsx",
											"line": 14,
											"character": 9
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									},
									"defaultValue": "0"
								}
							],
							"groups": [
								{
									"title": "Variables",
									"kind": 32,
									"children": [
										1250,
										1252,
										1248,
										1249,
										1247,
										1251
									]
								}
							],
							"sources": [
								{
									"fileName": "src/Placement/PlacementReferenceElement.tsx",
									"line": 9,
									"character": 12
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "object"
							}
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								1253
							]
						},
						{
							"title": "Accessors",
							"kind": 262144,
							"children": [
								1268,
								1266
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								1264,
								1256
							]
						},
						{
							"title": "Object literals",
							"kind": 2097152,
							"children": [
								1246
							]
						}
					],
					"sources": [
						{
							"fileName": "src/Placement/PlacementReferenceElement.tsx",
							"line": 8,
							"character": 46
						}
					]
				},
				{
					"id": 1240,
					"name": "Rect",
					"kind": 256,
					"kindString": "Interface",
					"flags": {},
					"children": [
						{
							"id": 1241,
							"name": "height",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "src/Placement/PlacementReferenceElement.tsx",
									"line": 2,
									"character": 8
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 1242,
							"name": "width",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "src/Placement/PlacementReferenceElement.tsx",
									"line": 3,
									"character": 7
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 1243,
							"name": "x",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "src/Placement/PlacementReferenceElement.tsx",
									"line": 4,
									"character": 3
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 1244,
							"name": "y",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "src/Placement/PlacementReferenceElement.tsx",
									"line": 5,
									"character": 3
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								1241,
								1242,
								1243,
								1244
							]
						}
					],
					"sources": [
						{
							"fileName": "src/Placement/PlacementReferenceElement.tsx",
							"line": 1,
							"character": 14
						}
					]
				}
			],
			"groups": [
				{
					"title": "Classes",
					"kind": 128,
					"children": [
						1245
					]
				},
				{
					"title": "Interfaces",
					"kind": 256,
					"children": [
						1240
					]
				}
			],
			"sources": [
				{
					"fileName": "src/Placement/PlacementReferenceElement.tsx",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 1272,
			"name": "\"RadioButton/RadioButton\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "/Users/harry/Projects/personal/preshape/src/RadioButton/RadioButton.tsx",
			"children": [
				{
					"id": 1273,
					"name": "RadioButtonProps",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"children": [
						{
							"id": 1274,
							"name": "label",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "A label that gives describes what the input is for"
							},
							"sources": [
								{
									"fileName": "src/RadioButton/RadioButton.tsx",
									"line": 9,
									"character": 7
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								1274
							]
						}
					],
					"sources": [
						{
							"fileName": "src/RadioButton/RadioButton.tsx",
							"line": 7,
							"character": 33
						}
					]
				},
				{
					"id": 1279,
					"name": "RadioButton",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "src/RadioButton/RadioButton.tsx",
							"line": 20,
							"character": 17
						}
					],
					"type": {
						"type": "reference",
						"name": "ForwardRefExoticComponent",
						"typeArguments": [
							{
								"type": "intersection",
								"types": [
									{
										"type": "reference",
										"name": "RadioButtonProps",
										"id": 1273
									},
									{
										"type": "reflection",
										"declaration": {
											"id": 1280,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {}
										}
									},
									{
										"type": "reference",
										"name": "RefAttributes",
										"typeArguments": [
											{
												"type": "reference",
												"name": "HTMLInputElement"
											}
										]
									}
								]
							}
						]
					},
					"defaultValue": " React.forwardRef<HTMLInputElement, Attributes<HTMLInputElement, RadioButtonProps>>((props, ref) => {\n  const {\n    disabled,\n    label,\n    margin,\n    padding,\n    paddingHorizontal = 'x3',\n    paddingVertical = 'x2',\n    ...rest\n  } = props;\n\n  return (\n    <SelectInputLabel\n        disabled={ disabled }\n        label={ label }\n        margin={ margin }\n        padding={ padding }\n        paddingHorizontal={ paddingHorizontal }\n        paddingVertical={ paddingVertical }>\n      <RadioButtonIndicator { ...rest }\n          disabled={ disabled }\n          ref={ ref } />\n    </SelectInputLabel>\n  );\n})"
				}
			],
			"groups": [
				{
					"title": "Interfaces",
					"kind": 256,
					"children": [
						1273
					]
				},
				{
					"title": "Variables",
					"kind": 32,
					"children": [
						1279
					]
				}
			],
			"sources": [
				{
					"fileName": "src/RadioButton/RadioButton.tsx",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 1270,
			"name": "\"RadioButton/RadioButtonIndicator\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "/Users/harry/Projects/personal/preshape/src/RadioButton/RadioButtonIndicator.tsx",
			"children": [
				{
					"id": 1271,
					"name": "RadioButtonIndicator",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "src/RadioButton/RadioButtonIndicator.tsx",
							"line": 3,
							"character": 26
						}
					],
					"type": {
						"type": "reference",
						"name": "ForwardRefExoticComponent",
						"typeArguments": [
							{
								"type": "intersection",
								"types": [
									{
										"type": "reference",
										"name": "InputHTMLAttributes",
										"typeArguments": [
											{
												"type": "reference",
												"name": "HTMLInputElement"
											}
										]
									},
									{
										"type": "reference",
										"name": "RefAttributes",
										"typeArguments": [
											{
												"type": "reference",
												"name": "HTMLInputElement"
											}
										]
									}
								]
							}
						]
					},
					"defaultValue": " React.forwardRef<HTMLInputElement, React.InputHTMLAttributes<HTMLInputElement>>((props, ref) => {\n  return (\n    <div className=\"RadioButton\">\n      <input { ...props }\n          className=\"RadioButton__input\"\n          ref={ ref }\n          type=\"radio\" />\n      <div className=\"RadioButton__indicator\" />\n    </div>\n  );\n})"
				}
			],
			"groups": [
				{
					"title": "Variables",
					"kind": 32,
					"children": [
						1271
					]
				}
			],
			"sources": [
				{
					"fileName": "src/RadioButton/RadioButtonIndicator.tsx",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 498,
			"name": "\"SelectInputLabel/SelectInputLabel\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "/Users/harry/Projects/personal/preshape/src/SelectInputLabel/SelectInputLabel.tsx",
			"children": [
				{
					"id": 499,
					"name": "SelectInputLabelProps",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"children": [
						{
							"id": 511,
							"name": "absolute",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Quick way of absolutely position to common places"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 58,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "fullscreen"
									},
									{
										"type": "stringLiteral",
										"value": "top"
									},
									{
										"type": "stringLiteral",
										"value": "top-left"
									},
									{
										"type": "stringLiteral",
										"value": "top-right"
									},
									{
										"type": "stringLiteral",
										"value": "bottom"
									},
									{
										"type": "stringLiteral",
										"value": "bottom-left"
									},
									{
										"type": "stringLiteral",
										"value": "bottom-right"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.absolute",
								"id": 3
							}
						},
						{
							"id": 501,
							"name": "alignChildren",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Short cut child alignment property for both alignChildrenHorizontal and\nalignChildrenVertical."
							},
							"sources": [
								{
									"fileName": "src/Flex/Flex.tsx",
									"line": 11,
									"character": 15
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "start"
									},
									{
										"type": "stringLiteral",
										"value": "middle"
									},
									{
										"type": "stringLiteral",
										"value": "end"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "FlexProps.alignChildren",
								"id": 175
							}
						},
						{
							"id": 502,
							"name": "alignChildrenHorizontal",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Horizontal alignment of children flex items."
							},
							"sources": [
								{
									"fileName": "src/Flex/Flex.tsx",
									"line": 13,
									"character": 25
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "start"
									},
									{
										"type": "stringLiteral",
										"value": "middle"
									},
									{
										"type": "stringLiteral",
										"value": "end"
									},
									{
										"type": "stringLiteral",
										"value": "around"
									},
									{
										"type": "stringLiteral",
										"value": "between"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "FlexProps.alignChildrenHorizontal",
								"id": 176
							}
						},
						{
							"id": 503,
							"name": "alignChildrenVertical",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Vertical alignment of children flex items."
							},
							"sources": [
								{
									"fileName": "src/Flex/Flex.tsx",
									"line": 15,
									"character": 23
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "start"
									},
									{
										"type": "stringLiteral",
										"value": "middle"
									},
									{
										"type": "stringLiteral",
										"value": "end"
									},
									{
										"type": "stringLiteral",
										"value": "around"
									},
									{
										"type": "stringLiteral",
										"value": "between"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "FlexProps.alignChildrenVertical",
								"id": 177
							}
						},
						{
							"id": 504,
							"name": "alignSelf",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Flex item alignment property (changes with parent direction)."
							},
							"sources": [
								{
									"fileName": "src/Flex/Flex.tsx",
									"line": 17,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "start"
									},
									{
										"type": "stringLiteral",
										"value": "middle"
									},
									{
										"type": "stringLiteral",
										"value": "end"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "FlexProps.alignSelf",
								"id": 178
							}
						},
						{
							"id": 512,
							"name": "backgroundColor",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Background colour to be applied, shades are taken from the current\ntheme."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 70,
									"character": 17
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeColor",
								"id": 30
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.backgroundColor",
								"id": 4
							}
						},
						{
							"id": 513,
							"name": "borderColor",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Border colour to be applied, shades are taken from the current\ntheme."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 75,
									"character": 13
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeColor",
								"id": 30
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.borderColor",
								"id": 5
							}
						},
						{
							"id": 514,
							"name": "borderRadius",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Adds styling of a border radius to one of the size multiples."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 79,
									"character": 14
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "x1"
									},
									{
										"type": "stringLiteral",
										"value": "x2"
									},
									{
										"type": "stringLiteral",
										"value": "x3"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.borderRadius",
								"id": 6
							}
						},
						{
							"id": 515,
							"name": "borderSize",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Thickness of the border to be applied"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 81,
									"character": 12
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "x1"
									},
									{
										"type": "stringLiteral",
										"value": "x2"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.borderSize",
								"id": 7
							}
						},
						{
							"id": 516,
							"name": "clickable",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Adds styling to indicate that the element is clickable"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 83,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.clickable",
								"id": 8
							}
						},
						{
							"id": 517,
							"name": "container",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies relative positioning to contain child elements."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 85,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.container",
								"id": 9
							}
						},
						{
							"id": 505,
							"name": "direction",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Direction on which way to flex items."
							},
							"sources": [
								{
									"fileName": "src/Flex/Flex.tsx",
									"line": 19,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "horizontal"
									},
									{
										"type": "stringLiteral",
										"value": "vertical"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "FlexProps.direction",
								"id": 179
							}
						},
						{
							"id": 518,
							"name": "display",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies display styling"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 87,
									"character": 9
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "block"
									},
									{
										"type": "stringLiteral",
										"value": "inline-block"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.display",
								"id": 10
							}
						},
						{
							"id": 519,
							"name": "fixed",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Quick way of absolutely position to common places"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 89,
									"character": 7
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "fullscreen"
									},
									{
										"type": "stringLiteral",
										"value": "top"
									},
									{
										"type": "stringLiteral",
										"value": "top-left"
									},
									{
										"type": "stringLiteral",
										"value": "top-right"
									},
									{
										"type": "stringLiteral",
										"value": "bottom"
									},
									{
										"type": "stringLiteral",
										"value": "bottom-left"
									},
									{
										"type": "stringLiteral",
										"value": "bottom-right"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.fixed",
								"id": 11
							}
						},
						{
							"id": 506,
							"name": "gap",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Spacing applied between child flex items, values are global spacing variables."
							},
							"sources": [
								{
									"fileName": "src/Flex/Flex.tsx",
									"line": 21,
									"character": 5
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeSize",
								"id": 31
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "FlexProps.gap",
								"id": 180
							}
						},
						{
							"id": 507,
							"name": "grow",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Flex item property if it should grow with available space."
							},
							"sources": [
								{
									"fileName": "src/Flex/Flex.tsx",
									"line": 23,
									"character": 6
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "FlexProps.grow",
								"id": 181
							}
						},
						{
							"id": 520,
							"name": "height",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Fixed height applied through inline styling"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 98,
									"character": 8
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.height",
								"id": 12
							}
						},
						{
							"id": 508,
							"name": "initial",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Initial width to flex from for a child item."
							},
							"sources": [
								{
									"fileName": "src/Flex/Flex.tsx",
									"line": 25,
									"character": 9
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "content"
									},
									{
										"type": "stringLiteral",
										"value": "container"
									},
									{
										"type": "stringLiteral",
										"value": "none"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "FlexProps.initial",
								"id": 182
							}
						},
						{
							"id": 500,
							"name": "label",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/SelectInputLabel/SelectInputLabel.tsx",
									"line": 8,
									"character": 7
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 521,
							"name": "margin",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Margins applied for the global spacing variables"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 100,
									"character": 8
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeSize",
								"id": 31
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.margin",
								"id": 13
							}
						},
						{
							"id": 522,
							"name": "maxWidth",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Max width applied through inline styling"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 102,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.maxWidth",
								"id": 14
							}
						},
						{
							"id": 523,
							"name": "minHeight",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Max height applied through inline styling"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 104,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.minHeight",
								"id": 15
							}
						},
						{
							"id": 524,
							"name": "minWidth",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Min width applied through inline style"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 106,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.minWidth",
								"id": 16
							}
						},
						{
							"id": 525,
							"name": "overflow",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Overflow"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 108,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "stringLiteral",
										"value": "hidden"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.overflow",
								"id": 17
							}
						},
						{
							"id": 526,
							"name": "padding",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Padding applied for the global spacing variables"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 110,
									"character": 9
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeSize",
								"id": 31
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.padding",
								"id": 18
							}
						},
						{
							"id": 527,
							"name": "paddingHorizontal",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Horizontal padding applied for the global spacing variables"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 112,
									"character": 19
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeSize",
								"id": 31
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.paddingHorizontal",
								"id": 19
							}
						},
						{
							"id": 528,
							"name": "paddingVertical",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Vertical pa?dding applied for the global spacing variables"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 114,
									"character": 17
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeSize",
								"id": 31
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.paddingVertical",
								"id": 20
							}
						},
						{
							"id": 529,
							"name": "scrollable",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies overflow styling to enable/disable scrolling."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 116,
									"character": 12
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.scrollable",
								"id": 21
							}
						},
						{
							"id": 509,
							"name": "shrink",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Flex item property if it should shrink."
							},
							"sources": [
								{
									"fileName": "src/Flex/Flex.tsx",
									"line": 27,
									"character": 8
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "FlexProps.shrink",
								"id": 183
							}
						},
						{
							"id": 530,
							"name": "tag",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Any valid HTML or SVG element tag.",
								"tags": [
									{
										"tag": "reference",
										"text": "false\n"
									}
								]
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 122,
									"character": 5
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeAllElementTags",
								"id": 34
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.tag",
								"id": 22
							}
						},
						{
							"id": 531,
							"name": "textColor",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Text colour to be applied."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 126,
									"character": 11
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeColor",
								"id": 30
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.textColor",
								"id": 23
							}
						},
						{
							"id": 532,
							"name": "theme",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Theme applied to this element and inherited for child elements (until\na descendant theme is applied)."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 131,
									"character": 7
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeTheme",
								"id": 35
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.theme",
								"id": 24
							}
						},
						{
							"id": 533,
							"name": "width",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Fixed width applied through inline styling"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 133,
									"character": 7
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.width",
								"id": 25
							}
						},
						{
							"id": 510,
							"name": "wrap",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Flag to allow flex items to wrap over to new lines"
							},
							"sources": [
								{
									"fileName": "src/Flex/Flex.tsx",
									"line": 29,
									"character": 6
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "FlexProps.wrap",
								"id": 184
							}
						},
						{
							"id": 534,
							"name": "zIndex",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "z-index number for layering elements."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 135,
									"character": 8
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "number"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.zIndex",
								"id": 26
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								511,
								501,
								502,
								503,
								504,
								512,
								513,
								514,
								515,
								516,
								517,
								505,
								518,
								519,
								506,
								507,
								520,
								508,
								500,
								521,
								522,
								523,
								524,
								525,
								526,
								527,
								528,
								529,
								509,
								530,
								531,
								532,
								533,
								510,
								534
							]
						}
					],
					"sources": [
						{
							"fileName": "src/SelectInputLabel/SelectInputLabel.tsx",
							"line": 7,
							"character": 38
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"name": "FlexProps",
							"id": 174
						}
					]
				},
				{
					"id": 535,
					"name": "SelectInputLabel",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "src/SelectInputLabel/SelectInputLabel.tsx",
							"line": 11,
							"character": 22
						}
					],
					"type": {
						"type": "reference",
						"name": "ForwardRefExoticComponent",
						"typeArguments": [
							{
								"type": "intersection",
								"types": [
									{
										"type": "reference",
										"name": "SelectInputLabelProps",
										"id": 499
									},
									{
										"type": "reflection",
										"declaration": {
											"id": 536,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {}
										}
									},
									{
										"type": "reference",
										"name": "RefAttributes",
										"typeArguments": [
											{
												"type": "reference",
												"name": "HTMLLabelElement"
											}
										]
									}
								]
							}
						]
					},
					"defaultValue": " React.forwardRef<HTMLLabelElement, Attributes<HTMLLabelElement, SelectInputLabelProps>>((props, ref) => {\n  const {\n    children,\n    label,\n    ...rest\n  } = props;\n\n  return (\n    <Flex { ...rest }\n        alignChildrenVertical=\"middle\"\n        className=\"SelectInputLabel\"\n        direction=\"horizontal\"\n        gap=\"x2\"\n        ref={ ref }\n        tag=\"label\">\n      <Flex>\n        { children }\n      </Flex>\n\n      <Flex grow shrink textColor=\"text-shade-1\">\n        <Text ellipsis size=\"x1\" strong>{ label }</Text>\n      </Flex>\n    </Flex>\n  );\n})"
				}
			],
			"groups": [
				{
					"title": "Interfaces",
					"kind": 256,
					"children": [
						499
					]
				},
				{
					"title": "Variables",
					"kind": 32,
					"children": [
						535
					]
				}
			],
			"sources": [
				{
					"fileName": "src/SelectInputLabel/SelectInputLabel.tsx",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 1281,
			"name": "\"Separator/Separator\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "/Users/harry/Projects/personal/preshape/src/Separator/Separator.tsx",
			"children": [
				{
					"id": 1282,
					"name": "SeparatorProps",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"children": [
						{
							"id": 1283,
							"name": "absolute",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Quick way of absolutely position to common places"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 58,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "fullscreen"
									},
									{
										"type": "stringLiteral",
										"value": "top"
									},
									{
										"type": "stringLiteral",
										"value": "top-left"
									},
									{
										"type": "stringLiteral",
										"value": "top-right"
									},
									{
										"type": "stringLiteral",
										"value": "bottom"
									},
									{
										"type": "stringLiteral",
										"value": "bottom-left"
									},
									{
										"type": "stringLiteral",
										"value": "bottom-right"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.absolute",
								"id": 3
							}
						},
						{
							"id": 1284,
							"name": "backgroundColor",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Background colour to be applied, shades are taken from the current\ntheme."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 70,
									"character": 17
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeColor",
								"id": 30
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.backgroundColor",
								"id": 4
							}
						},
						{
							"id": 1285,
							"name": "borderColor",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Border colour to be applied, shades are taken from the current\ntheme."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 75,
									"character": 13
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeColor",
								"id": 30
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.borderColor",
								"id": 5
							}
						},
						{
							"id": 1286,
							"name": "borderRadius",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Adds styling of a border radius to one of the size multiples."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 79,
									"character": 14
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "x1"
									},
									{
										"type": "stringLiteral",
										"value": "x2"
									},
									{
										"type": "stringLiteral",
										"value": "x3"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.borderRadius",
								"id": 6
							}
						},
						{
							"id": 1287,
							"name": "borderSize",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Thickness of the border to be applied"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 81,
									"character": 12
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "x1"
									},
									{
										"type": "stringLiteral",
										"value": "x2"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.borderSize",
								"id": 7
							}
						},
						{
							"id": 1288,
							"name": "clickable",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Adds styling to indicate that the element is clickable"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 83,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.clickable",
								"id": 8
							}
						},
						{
							"id": 1289,
							"name": "container",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies relative positioning to contain child elements."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 85,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.container",
								"id": 9
							}
						},
						{
							"id": 1290,
							"name": "display",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies display styling"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 87,
									"character": 9
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "block"
									},
									{
										"type": "stringLiteral",
										"value": "inline-block"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.display",
								"id": 10
							}
						},
						{
							"id": 1291,
							"name": "fixed",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Quick way of absolutely position to common places"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 89,
									"character": 7
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "fullscreen"
									},
									{
										"type": "stringLiteral",
										"value": "top"
									},
									{
										"type": "stringLiteral",
										"value": "top-left"
									},
									{
										"type": "stringLiteral",
										"value": "top-right"
									},
									{
										"type": "stringLiteral",
										"value": "bottom"
									},
									{
										"type": "stringLiteral",
										"value": "bottom-left"
									},
									{
										"type": "stringLiteral",
										"value": "bottom-right"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.fixed",
								"id": 11
							}
						},
						{
							"id": 1292,
							"name": "height",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Fixed height applied through inline styling"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 98,
									"character": 8
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.height",
								"id": 12
							}
						},
						{
							"id": 1293,
							"name": "margin",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Margins applied for the global spacing variables"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 100,
									"character": 8
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeSize",
								"id": 31
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.margin",
								"id": 13
							}
						},
						{
							"id": 1294,
							"name": "maxWidth",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Max width applied through inline styling"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 102,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.maxWidth",
								"id": 14
							}
						},
						{
							"id": 1295,
							"name": "minHeight",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Max height applied through inline styling"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 104,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.minHeight",
								"id": 15
							}
						},
						{
							"id": 1296,
							"name": "minWidth",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Min width applied through inline style"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 106,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.minWidth",
								"id": 16
							}
						},
						{
							"id": 1297,
							"name": "overflow",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Overflow"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 108,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "stringLiteral",
										"value": "hidden"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.overflow",
								"id": 17
							}
						},
						{
							"id": 1298,
							"name": "padding",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Padding applied for the global spacing variables"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 110,
									"character": 9
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeSize",
								"id": 31
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.padding",
								"id": 18
							}
						},
						{
							"id": 1299,
							"name": "paddingHorizontal",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Horizontal padding applied for the global spacing variables"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 112,
									"character": 19
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeSize",
								"id": 31
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.paddingHorizontal",
								"id": 19
							}
						},
						{
							"id": 1300,
							"name": "paddingVertical",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Vertical pa?dding applied for the global spacing variables"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 114,
									"character": 17
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeSize",
								"id": 31
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.paddingVertical",
								"id": 20
							}
						},
						{
							"id": 1301,
							"name": "scrollable",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies overflow styling to enable/disable scrolling."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 116,
									"character": 12
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.scrollable",
								"id": 21
							}
						},
						{
							"id": 1302,
							"name": "tag",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Any valid HTML or SVG element tag.",
								"tags": [
									{
										"tag": "reference",
										"text": "false\n"
									}
								]
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 122,
									"character": 5
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeAllElementTags",
								"id": 34
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.tag",
								"id": 22
							}
						},
						{
							"id": 1303,
							"name": "textColor",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Text colour to be applied."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 126,
									"character": 11
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeColor",
								"id": 30
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.textColor",
								"id": 23
							}
						},
						{
							"id": 1304,
							"name": "theme",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Theme applied to this element and inherited for child elements (until\na descendant theme is applied)."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 131,
									"character": 7
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeTheme",
								"id": 35
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.theme",
								"id": 24
							}
						},
						{
							"id": 1305,
							"name": "width",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Fixed width applied through inline styling"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 133,
									"character": 7
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.width",
								"id": 25
							}
						},
						{
							"id": 1306,
							"name": "zIndex",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "z-index number for layering elements."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 135,
									"character": 8
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "number"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.zIndex",
								"id": 26
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								1283,
								1284,
								1285,
								1286,
								1287,
								1288,
								1289,
								1290,
								1291,
								1292,
								1293,
								1294,
								1295,
								1296,
								1297,
								1298,
								1299,
								1300,
								1301,
								1302,
								1303,
								1304,
								1305,
								1306
							]
						}
					],
					"sources": [
						{
							"fileName": "src/Separator/Separator.tsx",
							"line": 6,
							"character": 31
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"name": "BaseProps",
							"id": 2
						}
					]
				},
				{
					"id": 1307,
					"name": "Separator",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "src/Separator/Separator.tsx",
							"line": 8,
							"character": 15
						}
					],
					"type": {
						"type": "reference",
						"name": "ForwardRefExoticComponent",
						"typeArguments": [
							{
								"type": "intersection",
								"types": [
									{
										"type": "reference",
										"name": "SeparatorProps",
										"id": 1282
									},
									{
										"type": "reflection",
										"declaration": {
											"id": 1308,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {}
										}
									},
									{
										"type": "reference",
										"name": "RefAttributes",
										"typeArguments": [
											{
												"type": "reference",
												"name": "HTMLElement"
											}
										]
									}
								]
							}
						]
					},
					"defaultValue": " React.forwardRef<HTMLElement, Attributes<HTMLElement, SeparatorProps>>((props, ref) => {\n  const {\n    borderColor = 'text-shade-1',\n    borderSize = 'x1',\n    ...rest\n  } = props;\n\n  return (\n    <Base\n        { ...rest }\n        borderColor={ borderColor }\n        borderSize={ borderSize }\n        className=\"Separator\"\n        ref={ ref } />\n  );\n})"
				}
			],
			"groups": [
				{
					"title": "Interfaces",
					"kind": 256,
					"children": [
						1282
					]
				},
				{
					"title": "Variables",
					"kind": 32,
					"children": [
						1307
					]
				}
			],
			"sources": [
				{
					"fileName": "src/Separator/Separator.tsx",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 1309,
			"name": "\"Tab/Tab\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "/Users/harry/Projects/personal/preshape/src/Tab/Tab.tsx",
			"children": [
				{
					"id": 1310,
					"name": "TabProps",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"children": [
						{
							"id": 1312,
							"name": "absolute",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Quick way of absolutely position to common places"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 58,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "fullscreen"
									},
									{
										"type": "stringLiteral",
										"value": "top"
									},
									{
										"type": "stringLiteral",
										"value": "top-left"
									},
									{
										"type": "stringLiteral",
										"value": "top-right"
									},
									{
										"type": "stringLiteral",
										"value": "bottom"
									},
									{
										"type": "stringLiteral",
										"value": "bottom-left"
									},
									{
										"type": "stringLiteral",
										"value": "bottom-right"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.absolute",
								"id": 3
							}
						},
						{
							"id": 1311,
							"name": "active",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies the active styling to the Tab"
							},
							"sources": [
								{
									"fileName": "src/Tab/Tab.tsx",
									"line": 8,
									"character": 8
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							}
						},
						{
							"id": 1313,
							"name": "backgroundColor",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Background colour to be applied, shades are taken from the current\ntheme."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 70,
									"character": 17
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeColor",
								"id": 30
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.backgroundColor",
								"id": 4
							}
						},
						{
							"id": 1314,
							"name": "borderColor",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Border colour to be applied, shades are taken from the current\ntheme."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 75,
									"character": 13
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeColor",
								"id": 30
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.borderColor",
								"id": 5
							}
						},
						{
							"id": 1315,
							"name": "borderRadius",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Adds styling of a border radius to one of the size multiples."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 79,
									"character": 14
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "x1"
									},
									{
										"type": "stringLiteral",
										"value": "x2"
									},
									{
										"type": "stringLiteral",
										"value": "x3"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.borderRadius",
								"id": 6
							}
						},
						{
							"id": 1316,
							"name": "borderSize",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Thickness of the border to be applied"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 81,
									"character": 12
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "x1"
									},
									{
										"type": "stringLiteral",
										"value": "x2"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.borderSize",
								"id": 7
							}
						},
						{
							"id": 1317,
							"name": "clickable",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Adds styling to indicate that the element is clickable"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 83,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.clickable",
								"id": 8
							}
						},
						{
							"id": 1318,
							"name": "container",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies relative positioning to contain child elements."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 85,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.container",
								"id": 9
							}
						},
						{
							"id": 1319,
							"name": "display",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies display styling"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 87,
									"character": 9
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "block"
									},
									{
										"type": "stringLiteral",
										"value": "inline-block"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.display",
								"id": 10
							}
						},
						{
							"id": 1320,
							"name": "fixed",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Quick way of absolutely position to common places"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 89,
									"character": 7
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "fullscreen"
									},
									{
										"type": "stringLiteral",
										"value": "top"
									},
									{
										"type": "stringLiteral",
										"value": "top-left"
									},
									{
										"type": "stringLiteral",
										"value": "top-right"
									},
									{
										"type": "stringLiteral",
										"value": "bottom"
									},
									{
										"type": "stringLiteral",
										"value": "bottom-left"
									},
									{
										"type": "stringLiteral",
										"value": "bottom-right"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.fixed",
								"id": 11
							}
						},
						{
							"id": 1321,
							"name": "height",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Fixed height applied through inline styling"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 98,
									"character": 8
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.height",
								"id": 12
							}
						},
						{
							"id": 1322,
							"name": "margin",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Margins applied for the global spacing variables"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 100,
									"character": 8
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeSize",
								"id": 31
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.margin",
								"id": 13
							}
						},
						{
							"id": 1323,
							"name": "maxWidth",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Max width applied through inline styling"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 102,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.maxWidth",
								"id": 14
							}
						},
						{
							"id": 1324,
							"name": "minHeight",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Max height applied through inline styling"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 104,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.minHeight",
								"id": 15
							}
						},
						{
							"id": 1325,
							"name": "minWidth",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Min width applied through inline style"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 106,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.minWidth",
								"id": 16
							}
						},
						{
							"id": 1326,
							"name": "overflow",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Overflow"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 108,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "stringLiteral",
										"value": "hidden"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.overflow",
								"id": 17
							}
						},
						{
							"id": 1327,
							"name": "padding",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Padding applied for the global spacing variables"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 110,
									"character": 9
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeSize",
								"id": 31
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.padding",
								"id": 18
							}
						},
						{
							"id": 1328,
							"name": "paddingHorizontal",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Horizontal padding applied for the global spacing variables"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 112,
									"character": 19
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeSize",
								"id": 31
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.paddingHorizontal",
								"id": 19
							}
						},
						{
							"id": 1329,
							"name": "paddingVertical",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Vertical pa?dding applied for the global spacing variables"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 114,
									"character": 17
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeSize",
								"id": 31
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.paddingVertical",
								"id": 20
							}
						},
						{
							"id": 1330,
							"name": "scrollable",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies overflow styling to enable/disable scrolling."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 116,
									"character": 12
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.scrollable",
								"id": 21
							}
						},
						{
							"id": 1331,
							"name": "tag",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Any valid HTML or SVG element tag.",
								"tags": [
									{
										"tag": "reference",
										"text": "false\n"
									}
								]
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 122,
									"character": 5
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeAllElementTags",
								"id": 34
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.tag",
								"id": 22
							}
						},
						{
							"id": 1332,
							"name": "textColor",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Text colour to be applied."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 126,
									"character": 11
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeColor",
								"id": 30
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.textColor",
								"id": 23
							}
						},
						{
							"id": 1333,
							"name": "theme",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Theme applied to this element and inherited for child elements (until\na descendant theme is applied)."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 131,
									"character": 7
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeTheme",
								"id": 35
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.theme",
								"id": 24
							}
						},
						{
							"id": 1334,
							"name": "width",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Fixed width applied through inline styling"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 133,
									"character": 7
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.width",
								"id": 25
							}
						},
						{
							"id": 1335,
							"name": "zIndex",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "z-index number for layering elements."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 135,
									"character": 8
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "number"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.zIndex",
								"id": 26
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								1312,
								1311,
								1313,
								1314,
								1315,
								1316,
								1317,
								1318,
								1319,
								1320,
								1321,
								1322,
								1323,
								1324,
								1325,
								1326,
								1327,
								1328,
								1329,
								1330,
								1331,
								1332,
								1333,
								1334,
								1335
							]
						}
					],
					"sources": [
						{
							"fileName": "src/Tab/Tab.tsx",
							"line": 6,
							"character": 25
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"name": "BaseProps",
							"id": 2
						}
					]
				},
				{
					"id": 1336,
					"name": "Tab",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "src/Tab/Tab.tsx",
							"line": 11,
							"character": 9
						}
					],
					"type": {
						"type": "reference",
						"name": "ForwardRefExoticComponent",
						"typeArguments": [
							{
								"type": "intersection",
								"types": [
									{
										"type": "reference",
										"name": "TabProps",
										"id": 1310
									},
									{
										"type": "reflection",
										"declaration": {
											"id": 1337,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {}
										}
									},
									{
										"type": "reference",
										"name": "RefAttributes",
										"typeArguments": [
											{
												"type": "reference",
												"name": "HTMLElement"
											}
										]
									}
								]
							}
						]
					},
					"defaultValue": " React.forwardRef<HTMLElement, Attributes<HTMLElement, TabProps>>((props, ref) => {\n  const { active, children, ...rest } = props;\n  const classes = classnames('Tab', {\n    'Tab--active': active,\n  });\n\n  return (\n    <Base { ...rest } className={ classes } ref={ ref }>\n      <Base\n          backgroundColor={ active ? undefined : 'text-shade-1' }\n          className=\"Tab__background\"\n          textColor={ active ? undefined : 'background-shade-1' }>\n        <Link\n            display=\"block\"\n            padding=\"x3\"\n            size=\"x1\"\n            strong>\n          { children }\n        </Link>\n      </Base>\n    </Base>\n  );\n})"
				}
			],
			"groups": [
				{
					"title": "Interfaces",
					"kind": 256,
					"children": [
						1310
					]
				},
				{
					"title": "Variables",
					"kind": 32,
					"children": [
						1336
					]
				}
			],
			"sources": [
				{
					"fileName": "src/Tab/Tab.tsx",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 1338,
			"name": "\"Tab/TabContent\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "/Users/harry/Projects/personal/preshape/src/Tab/TabContent.tsx",
			"children": [
				{
					"id": 1339,
					"name": "TabContentProps",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"children": [
						{
							"id": 1350,
							"name": "absolute",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Quick way of absolutely position to common places"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 58,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "fullscreen"
									},
									{
										"type": "stringLiteral",
										"value": "top"
									},
									{
										"type": "stringLiteral",
										"value": "top-left"
									},
									{
										"type": "stringLiteral",
										"value": "top-right"
									},
									{
										"type": "stringLiteral",
										"value": "bottom"
									},
									{
										"type": "stringLiteral",
										"value": "bottom-left"
									},
									{
										"type": "stringLiteral",
										"value": "bottom-right"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.absolute",
								"id": 3
							}
						},
						{
							"id": 1340,
							"name": "alignChildren",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Short cut child alignment property for both alignChildrenHorizontal and\nalignChildrenVertical."
							},
							"sources": [
								{
									"fileName": "src/Flex/Flex.tsx",
									"line": 11,
									"character": 15
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "start"
									},
									{
										"type": "stringLiteral",
										"value": "middle"
									},
									{
										"type": "stringLiteral",
										"value": "end"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "FlexProps.alignChildren",
								"id": 175
							}
						},
						{
							"id": 1341,
							"name": "alignChildrenHorizontal",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Horizontal alignment of children flex items."
							},
							"sources": [
								{
									"fileName": "src/Flex/Flex.tsx",
									"line": 13,
									"character": 25
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "start"
									},
									{
										"type": "stringLiteral",
										"value": "middle"
									},
									{
										"type": "stringLiteral",
										"value": "end"
									},
									{
										"type": "stringLiteral",
										"value": "around"
									},
									{
										"type": "stringLiteral",
										"value": "between"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "FlexProps.alignChildrenHorizontal",
								"id": 176
							}
						},
						{
							"id": 1342,
							"name": "alignChildrenVertical",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Vertical alignment of children flex items."
							},
							"sources": [
								{
									"fileName": "src/Flex/Flex.tsx",
									"line": 15,
									"character": 23
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "start"
									},
									{
										"type": "stringLiteral",
										"value": "middle"
									},
									{
										"type": "stringLiteral",
										"value": "end"
									},
									{
										"type": "stringLiteral",
										"value": "around"
									},
									{
										"type": "stringLiteral",
										"value": "between"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "FlexProps.alignChildrenVertical",
								"id": 177
							}
						},
						{
							"id": 1343,
							"name": "alignSelf",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Flex item alignment property (changes with parent direction)."
							},
							"sources": [
								{
									"fileName": "src/Flex/Flex.tsx",
									"line": 17,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "start"
									},
									{
										"type": "stringLiteral",
										"value": "middle"
									},
									{
										"type": "stringLiteral",
										"value": "end"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "FlexProps.alignSelf",
								"id": 178
							}
						},
						{
							"id": 1351,
							"name": "backgroundColor",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Background colour to be applied, shades are taken from the current\ntheme."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 70,
									"character": 17
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeColor",
								"id": 30
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.backgroundColor",
								"id": 4
							}
						},
						{
							"id": 1352,
							"name": "borderColor",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Border colour to be applied, shades are taken from the current\ntheme."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 75,
									"character": 13
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeColor",
								"id": 30
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.borderColor",
								"id": 5
							}
						},
						{
							"id": 1353,
							"name": "borderRadius",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Adds styling of a border radius to one of the size multiples."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 79,
									"character": 14
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "x1"
									},
									{
										"type": "stringLiteral",
										"value": "x2"
									},
									{
										"type": "stringLiteral",
										"value": "x3"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.borderRadius",
								"id": 6
							}
						},
						{
							"id": 1354,
							"name": "borderSize",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Thickness of the border to be applied"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 81,
									"character": 12
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "x1"
									},
									{
										"type": "stringLiteral",
										"value": "x2"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.borderSize",
								"id": 7
							}
						},
						{
							"id": 1355,
							"name": "clickable",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Adds styling to indicate that the element is clickable"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 83,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.clickable",
								"id": 8
							}
						},
						{
							"id": 1356,
							"name": "container",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies relative positioning to contain child elements."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 85,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.container",
								"id": 9
							}
						},
						{
							"id": 1344,
							"name": "direction",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Direction on which way to flex items."
							},
							"sources": [
								{
									"fileName": "src/Flex/Flex.tsx",
									"line": 19,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "horizontal"
									},
									{
										"type": "stringLiteral",
										"value": "vertical"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "FlexProps.direction",
								"id": 179
							}
						},
						{
							"id": 1357,
							"name": "display",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies display styling"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 87,
									"character": 9
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "block"
									},
									{
										"type": "stringLiteral",
										"value": "inline-block"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.display",
								"id": 10
							}
						},
						{
							"id": 1358,
							"name": "fixed",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Quick way of absolutely position to common places"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 89,
									"character": 7
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "fullscreen"
									},
									{
										"type": "stringLiteral",
										"value": "top"
									},
									{
										"type": "stringLiteral",
										"value": "top-left"
									},
									{
										"type": "stringLiteral",
										"value": "top-right"
									},
									{
										"type": "stringLiteral",
										"value": "bottom"
									},
									{
										"type": "stringLiteral",
										"value": "bottom-left"
									},
									{
										"type": "stringLiteral",
										"value": "bottom-right"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.fixed",
								"id": 11
							}
						},
						{
							"id": 1345,
							"name": "gap",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Spacing applied between child flex items, values are global spacing variables."
							},
							"sources": [
								{
									"fileName": "src/Flex/Flex.tsx",
									"line": 21,
									"character": 5
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeSize",
								"id": 31
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "FlexProps.gap",
								"id": 180
							}
						},
						{
							"id": 1346,
							"name": "grow",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Flex item property if it should grow with available space."
							},
							"sources": [
								{
									"fileName": "src/Flex/Flex.tsx",
									"line": 23,
									"character": 6
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "FlexProps.grow",
								"id": 181
							}
						},
						{
							"id": 1359,
							"name": "height",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Fixed height applied through inline styling"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 98,
									"character": 8
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.height",
								"id": 12
							}
						},
						{
							"id": 1347,
							"name": "initial",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Initial width to flex from for a child item."
							},
							"sources": [
								{
									"fileName": "src/Flex/Flex.tsx",
									"line": 25,
									"character": 9
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "content"
									},
									{
										"type": "stringLiteral",
										"value": "container"
									},
									{
										"type": "stringLiteral",
										"value": "none"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "FlexProps.initial",
								"id": 182
							}
						},
						{
							"id": 1360,
							"name": "margin",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Margins applied for the global spacing variables"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 100,
									"character": 8
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeSize",
								"id": 31
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.margin",
								"id": 13
							}
						},
						{
							"id": 1361,
							"name": "maxWidth",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Max width applied through inline styling"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 102,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.maxWidth",
								"id": 14
							}
						},
						{
							"id": 1362,
							"name": "minHeight",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Max height applied through inline styling"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 104,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.minHeight",
								"id": 15
							}
						},
						{
							"id": 1363,
							"name": "minWidth",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Min width applied through inline style"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 106,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.minWidth",
								"id": 16
							}
						},
						{
							"id": 1364,
							"name": "overflow",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Overflow"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 108,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "stringLiteral",
										"value": "hidden"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.overflow",
								"id": 17
							}
						},
						{
							"id": 1365,
							"name": "padding",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Padding applied for the global spacing variables"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 110,
									"character": 9
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeSize",
								"id": 31
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.padding",
								"id": 18
							}
						},
						{
							"id": 1366,
							"name": "paddingHorizontal",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Horizontal padding applied for the global spacing variables"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 112,
									"character": 19
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeSize",
								"id": 31
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.paddingHorizontal",
								"id": 19
							}
						},
						{
							"id": 1367,
							"name": "paddingVertical",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Vertical pa?dding applied for the global spacing variables"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 114,
									"character": 17
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeSize",
								"id": 31
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.paddingVertical",
								"id": 20
							}
						},
						{
							"id": 1368,
							"name": "scrollable",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies overflow styling to enable/disable scrolling."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 116,
									"character": 12
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.scrollable",
								"id": 21
							}
						},
						{
							"id": 1348,
							"name": "shrink",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Flex item property if it should shrink."
							},
							"sources": [
								{
									"fileName": "src/Flex/Flex.tsx",
									"line": 27,
									"character": 8
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "FlexProps.shrink",
								"id": 183
							}
						},
						{
							"id": 1369,
							"name": "tag",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Any valid HTML or SVG element tag.",
								"tags": [
									{
										"tag": "reference",
										"text": "false\n"
									}
								]
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 122,
									"character": 5
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeAllElementTags",
								"id": 34
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.tag",
								"id": 22
							}
						},
						{
							"id": 1370,
							"name": "textColor",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Text colour to be applied."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 126,
									"character": 11
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeColor",
								"id": 30
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.textColor",
								"id": 23
							}
						},
						{
							"id": 1371,
							"name": "theme",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Theme applied to this element and inherited for child elements (until\na descendant theme is applied)."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 131,
									"character": 7
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeTheme",
								"id": 35
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.theme",
								"id": 24
							}
						},
						{
							"id": 1372,
							"name": "width",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Fixed width applied through inline styling"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 133,
									"character": 7
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.width",
								"id": 25
							}
						},
						{
							"id": 1349,
							"name": "wrap",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Flag to allow flex items to wrap over to new lines"
							},
							"sources": [
								{
									"fileName": "src/Flex/Flex.tsx",
									"line": 29,
									"character": 6
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "FlexProps.wrap",
								"id": 184
							}
						},
						{
							"id": 1373,
							"name": "zIndex",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "z-index number for layering elements."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 135,
									"character": 8
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "number"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.zIndex",
								"id": 26
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								1350,
								1340,
								1341,
								1342,
								1343,
								1351,
								1352,
								1353,
								1354,
								1355,
								1356,
								1344,
								1357,
								1358,
								1345,
								1346,
								1359,
								1347,
								1360,
								1361,
								1362,
								1363,
								1364,
								1365,
								1366,
								1367,
								1368,
								1348,
								1369,
								1370,
								1371,
								1372,
								1349,
								1373
							]
						}
					],
					"sources": [
						{
							"fileName": "src/Tab/TabContent.tsx",
							"line": 5,
							"character": 32
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"name": "FlexProps",
							"id": 174
						}
					]
				},
				{
					"id": 1374,
					"name": "TabContent",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "src/Tab/TabContent.tsx",
							"line": 7,
							"character": 16
						}
					],
					"type": {
						"type": "reference",
						"name": "ForwardRefExoticComponent",
						"typeArguments": [
							{
								"type": "intersection",
								"types": [
									{
										"type": "reference",
										"name": "TabContentProps",
										"id": 1339
									},
									{
										"type": "reflection",
										"declaration": {
											"id": 1375,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {}
										}
									},
									{
										"type": "reference",
										"name": "RefAttributes",
										"typeArguments": [
											{
												"type": "reference",
												"name": "HTMLElement"
											}
										]
									}
								]
							}
						]
					},
					"defaultValue": " React.forwardRef<HTMLElement, Attributes<HTMLElement, TabContentProps>>((props, ref) => {\n  return (\n    <Flex { ...props }\n        className=\"TabContent\"\n        ref={ ref } />\n  );\n})"
				}
			],
			"groups": [
				{
					"title": "Interfaces",
					"kind": 256,
					"children": [
						1339
					]
				},
				{
					"title": "Variables",
					"kind": 32,
					"children": [
						1374
					]
				}
			],
			"sources": [
				{
					"fileName": "src/Tab/TabContent.tsx",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 1376,
			"name": "\"Tab/Tabs\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "/Users/harry/Projects/personal/preshape/src/Tab/Tabs.tsx",
			"children": [
				{
					"id": 1377,
					"name": "TabsProps",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"children": [
						{
							"id": 1388,
							"name": "absolute",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Quick way of absolutely position to common places"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 58,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "fullscreen"
									},
									{
										"type": "stringLiteral",
										"value": "top"
									},
									{
										"type": "stringLiteral",
										"value": "top-left"
									},
									{
										"type": "stringLiteral",
										"value": "top-right"
									},
									{
										"type": "stringLiteral",
										"value": "bottom"
									},
									{
										"type": "stringLiteral",
										"value": "bottom-left"
									},
									{
										"type": "stringLiteral",
										"value": "bottom-right"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.absolute",
								"id": 3
							}
						},
						{
							"id": 1378,
							"name": "alignChildren",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Short cut child alignment property for both alignChildrenHorizontal and\nalignChildrenVertical."
							},
							"sources": [
								{
									"fileName": "src/Flex/Flex.tsx",
									"line": 11,
									"character": 15
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "start"
									},
									{
										"type": "stringLiteral",
										"value": "middle"
									},
									{
										"type": "stringLiteral",
										"value": "end"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "FlexProps.alignChildren",
								"id": 175
							}
						},
						{
							"id": 1379,
							"name": "alignChildrenHorizontal",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Horizontal alignment of children flex items."
							},
							"sources": [
								{
									"fileName": "src/Flex/Flex.tsx",
									"line": 13,
									"character": 25
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "start"
									},
									{
										"type": "stringLiteral",
										"value": "middle"
									},
									{
										"type": "stringLiteral",
										"value": "end"
									},
									{
										"type": "stringLiteral",
										"value": "around"
									},
									{
										"type": "stringLiteral",
										"value": "between"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "FlexProps.alignChildrenHorizontal",
								"id": 176
							}
						},
						{
							"id": 1380,
							"name": "alignChildrenVertical",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Vertical alignment of children flex items."
							},
							"sources": [
								{
									"fileName": "src/Flex/Flex.tsx",
									"line": 15,
									"character": 23
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "start"
									},
									{
										"type": "stringLiteral",
										"value": "middle"
									},
									{
										"type": "stringLiteral",
										"value": "end"
									},
									{
										"type": "stringLiteral",
										"value": "around"
									},
									{
										"type": "stringLiteral",
										"value": "between"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "FlexProps.alignChildrenVertical",
								"id": 177
							}
						},
						{
							"id": 1381,
							"name": "alignSelf",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Flex item alignment property (changes with parent direction)."
							},
							"sources": [
								{
									"fileName": "src/Flex/Flex.tsx",
									"line": 17,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "start"
									},
									{
										"type": "stringLiteral",
										"value": "middle"
									},
									{
										"type": "stringLiteral",
										"value": "end"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "FlexProps.alignSelf",
								"id": 178
							}
						},
						{
							"id": 1389,
							"name": "backgroundColor",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Background colour to be applied, shades are taken from the current\ntheme."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 70,
									"character": 17
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeColor",
								"id": 30
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.backgroundColor",
								"id": 4
							}
						},
						{
							"id": 1390,
							"name": "borderColor",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Border colour to be applied, shades are taken from the current\ntheme."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 75,
									"character": 13
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeColor",
								"id": 30
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.borderColor",
								"id": 5
							}
						},
						{
							"id": 1391,
							"name": "borderRadius",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Adds styling of a border radius to one of the size multiples."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 79,
									"character": 14
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "x1"
									},
									{
										"type": "stringLiteral",
										"value": "x2"
									},
									{
										"type": "stringLiteral",
										"value": "x3"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.borderRadius",
								"id": 6
							}
						},
						{
							"id": 1392,
							"name": "borderSize",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Thickness of the border to be applied"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 81,
									"character": 12
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "x1"
									},
									{
										"type": "stringLiteral",
										"value": "x2"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.borderSize",
								"id": 7
							}
						},
						{
							"id": 1393,
							"name": "clickable",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Adds styling to indicate that the element is clickable"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 83,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.clickable",
								"id": 8
							}
						},
						{
							"id": 1394,
							"name": "container",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies relative positioning to contain child elements."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 85,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.container",
								"id": 9
							}
						},
						{
							"id": 1382,
							"name": "direction",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Direction on which way to flex items."
							},
							"sources": [
								{
									"fileName": "src/Flex/Flex.tsx",
									"line": 19,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "horizontal"
									},
									{
										"type": "stringLiteral",
										"value": "vertical"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "FlexProps.direction",
								"id": 179
							}
						},
						{
							"id": 1395,
							"name": "display",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies display styling"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 87,
									"character": 9
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "block"
									},
									{
										"type": "stringLiteral",
										"value": "inline-block"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.display",
								"id": 10
							}
						},
						{
							"id": 1396,
							"name": "fixed",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Quick way of absolutely position to common places"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 89,
									"character": 7
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "fullscreen"
									},
									{
										"type": "stringLiteral",
										"value": "top"
									},
									{
										"type": "stringLiteral",
										"value": "top-left"
									},
									{
										"type": "stringLiteral",
										"value": "top-right"
									},
									{
										"type": "stringLiteral",
										"value": "bottom"
									},
									{
										"type": "stringLiteral",
										"value": "bottom-left"
									},
									{
										"type": "stringLiteral",
										"value": "bottom-right"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.fixed",
								"id": 11
							}
						},
						{
							"id": 1383,
							"name": "gap",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Spacing applied between child flex items, values are global spacing variables."
							},
							"sources": [
								{
									"fileName": "src/Flex/Flex.tsx",
									"line": 21,
									"character": 5
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeSize",
								"id": 31
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "FlexProps.gap",
								"id": 180
							}
						},
						{
							"id": 1384,
							"name": "grow",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Flex item property if it should grow with available space."
							},
							"sources": [
								{
									"fileName": "src/Flex/Flex.tsx",
									"line": 23,
									"character": 6
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "FlexProps.grow",
								"id": 181
							}
						},
						{
							"id": 1397,
							"name": "height",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Fixed height applied through inline styling"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 98,
									"character": 8
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.height",
								"id": 12
							}
						},
						{
							"id": 1385,
							"name": "initial",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Initial width to flex from for a child item."
							},
							"sources": [
								{
									"fileName": "src/Flex/Flex.tsx",
									"line": 25,
									"character": 9
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "content"
									},
									{
										"type": "stringLiteral",
										"value": "container"
									},
									{
										"type": "stringLiteral",
										"value": "none"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "FlexProps.initial",
								"id": 182
							}
						},
						{
							"id": 1398,
							"name": "margin",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Margins applied for the global spacing variables"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 100,
									"character": 8
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeSize",
								"id": 31
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.margin",
								"id": 13
							}
						},
						{
							"id": 1399,
							"name": "maxWidth",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Max width applied through inline styling"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 102,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.maxWidth",
								"id": 14
							}
						},
						{
							"id": 1400,
							"name": "minHeight",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Max height applied through inline styling"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 104,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.minHeight",
								"id": 15
							}
						},
						{
							"id": 1401,
							"name": "minWidth",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Min width applied through inline style"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 106,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.minWidth",
								"id": 16
							}
						},
						{
							"id": 1402,
							"name": "overflow",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Overflow"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 108,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "stringLiteral",
										"value": "hidden"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.overflow",
								"id": 17
							}
						},
						{
							"id": 1403,
							"name": "padding",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Padding applied for the global spacing variables"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 110,
									"character": 9
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeSize",
								"id": 31
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.padding",
								"id": 18
							}
						},
						{
							"id": 1404,
							"name": "paddingHorizontal",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Horizontal padding applied for the global spacing variables"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 112,
									"character": 19
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeSize",
								"id": 31
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.paddingHorizontal",
								"id": 19
							}
						},
						{
							"id": 1405,
							"name": "paddingVertical",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Vertical pa?dding applied for the global spacing variables"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 114,
									"character": 17
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeSize",
								"id": 31
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.paddingVertical",
								"id": 20
							}
						},
						{
							"id": 1406,
							"name": "scrollable",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies overflow styling to enable/disable scrolling."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 116,
									"character": 12
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.scrollable",
								"id": 21
							}
						},
						{
							"id": 1386,
							"name": "shrink",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Flex item property if it should shrink."
							},
							"sources": [
								{
									"fileName": "src/Flex/Flex.tsx",
									"line": 27,
									"character": 8
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "FlexProps.shrink",
								"id": 183
							}
						},
						{
							"id": 1407,
							"name": "tag",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Any valid HTML or SVG element tag.",
								"tags": [
									{
										"tag": "reference",
										"text": "false\n"
									}
								]
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 122,
									"character": 5
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeAllElementTags",
								"id": 34
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.tag",
								"id": 22
							}
						},
						{
							"id": 1408,
							"name": "textColor",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Text colour to be applied."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 126,
									"character": 11
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeColor",
								"id": 30
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.textColor",
								"id": 23
							}
						},
						{
							"id": 1409,
							"name": "theme",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Theme applied to this element and inherited for child elements (until\na descendant theme is applied)."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 131,
									"character": 7
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeTheme",
								"id": 35
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.theme",
								"id": 24
							}
						},
						{
							"id": 1410,
							"name": "width",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Fixed width applied through inline styling"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 133,
									"character": 7
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.width",
								"id": 25
							}
						},
						{
							"id": 1387,
							"name": "wrap",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Flag to allow flex items to wrap over to new lines"
							},
							"sources": [
								{
									"fileName": "src/Flex/Flex.tsx",
									"line": 29,
									"character": 6
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "FlexProps.wrap",
								"id": 184
							}
						},
						{
							"id": 1411,
							"name": "zIndex",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "z-index number for layering elements."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 135,
									"character": 8
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "number"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.zIndex",
								"id": 26
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								1388,
								1378,
								1379,
								1380,
								1381,
								1389,
								1390,
								1391,
								1392,
								1393,
								1394,
								1382,
								1395,
								1396,
								1383,
								1384,
								1397,
								1385,
								1398,
								1399,
								1400,
								1401,
								1402,
								1403,
								1404,
								1405,
								1406,
								1386,
								1407,
								1408,
								1409,
								1410,
								1387,
								1411
							]
						}
					],
					"sources": [
						{
							"fileName": "src/Tab/Tabs.tsx",
							"line": 6,
							"character": 26
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"name": "FlexProps",
							"id": 174
						}
					]
				},
				{
					"id": 1412,
					"name": "Tabs",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "src/Tab/Tabs.tsx",
							"line": 8,
							"character": 10
						}
					],
					"type": {
						"type": "reference",
						"name": "ForwardRefExoticComponent",
						"typeArguments": [
							{
								"type": "intersection",
								"types": [
									{
										"type": "reference",
										"name": "TabsProps",
										"id": 1377
									},
									{
										"type": "reflection",
										"declaration": {
											"id": 1413,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {}
										}
									},
									{
										"type": "reference",
										"name": "RefAttributes",
										"typeArguments": [
											{
												"type": "reference",
												"name": "HTMLElement"
											}
										]
									}
								]
							}
						]
					},
					"defaultValue": " React.forwardRef<HTMLElement, Attributes<HTMLElement, TabsProps>>((props, ref) => {\n  return (\n    <Flex { ...props } className=\"Tabs\" ref={ ref } />\n  );\n})"
				}
			],
			"groups": [
				{
					"title": "Interfaces",
					"kind": 256,
					"children": [
						1377
					]
				},
				{
					"title": "Variables",
					"kind": 32,
					"children": [
						1412
					]
				}
			],
			"sources": [
				{
					"fileName": "src/Tab/Tabs.tsx",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 1414,
			"name": "\"Table/Table\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "/Users/harry/Projects/personal/preshape/src/Table/Table.tsx",
			"children": [
				{
					"id": 1415,
					"name": "TableProps",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"children": [
						{
							"id": 1430,
							"name": "absolute",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Quick way of absolutely position to common places"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 58,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "fullscreen"
									},
									{
										"type": "stringLiteral",
										"value": "top"
									},
									{
										"type": "stringLiteral",
										"value": "top-left"
									},
									{
										"type": "stringLiteral",
										"value": "top-right"
									},
									{
										"type": "stringLiteral",
										"value": "bottom"
									},
									{
										"type": "stringLiteral",
										"value": "bottom-left"
									},
									{
										"type": "stringLiteral",
										"value": "bottom-right"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.absolute",
								"id": 3
							}
						},
						{
							"id": 1416,
							"name": "align",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Text alignment"
							},
							"sources": [
								{
									"fileName": "src/Text/Text.tsx",
									"line": 32,
									"character": 7
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "start"
									},
									{
										"type": "stringLiteral",
										"value": "middle"
									},
									{
										"type": "stringLiteral",
										"value": "end"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TextProps.align",
								"id": 266
							}
						},
						{
							"id": 1431,
							"name": "backgroundColor",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Background colour to be applied, shades are taken from the current\ntheme."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 70,
									"character": 17
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeColor",
								"id": 30
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.backgroundColor",
								"id": 4
							}
						},
						{
							"id": 1432,
							"name": "borderColor",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Border colour to be applied, shades are taken from the current\ntheme."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 75,
									"character": 13
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeColor",
								"id": 30
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.borderColor",
								"id": 5
							}
						},
						{
							"id": 1433,
							"name": "borderRadius",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Adds styling of a border radius to one of the size multiples."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 79,
									"character": 14
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "x1"
									},
									{
										"type": "stringLiteral",
										"value": "x2"
									},
									{
										"type": "stringLiteral",
										"value": "x3"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.borderRadius",
								"id": 6
							}
						},
						{
							"id": 1434,
							"name": "borderSize",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Thickness of the border to be applied"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 81,
									"character": 12
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "x1"
									},
									{
										"type": "stringLiteral",
										"value": "x2"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.borderSize",
								"id": 7
							}
						},
						{
							"id": 1417,
							"name": "breakOn",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "How the block of text should break onto new lines."
							},
							"sources": [
								{
									"fileName": "src/Text/Text.tsx",
									"line": 34,
									"character": 9
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "all"
									},
									{
										"type": "stringLiteral",
										"value": "none"
									},
									{
										"type": "stringLiteral",
										"value": "word"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TextProps.breakOn",
								"id": 267
							}
						},
						{
							"id": 1435,
							"name": "clickable",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Adds styling to indicate that the element is clickable"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 83,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.clickable",
								"id": 8
							}
						},
						{
							"id": 1436,
							"name": "container",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies relative positioning to contain child elements."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 85,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.container",
								"id": 9
							}
						},
						{
							"id": 1437,
							"name": "display",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies display styling"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 87,
									"character": 9
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "block"
									},
									{
										"type": "stringLiteral",
										"value": "inline-block"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.display",
								"id": 10
							}
						},
						{
							"id": 1418,
							"name": "ellipsis",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Replaces the overflow of text with the ellipsis character"
							},
							"sources": [
								{
									"fileName": "src/Text/Text.tsx",
									"line": 36,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TextProps.ellipsis",
								"id": 268
							}
						},
						{
							"id": 1419,
							"name": "emphasis",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies emphasis styling"
							},
							"sources": [
								{
									"fileName": "src/Text/Text.tsx",
									"line": 38,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TextProps.emphasis",
								"id": 269
							}
						},
						{
							"id": 1438,
							"name": "fixed",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Quick way of absolutely position to common places"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 89,
									"character": 7
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "fullscreen"
									},
									{
										"type": "stringLiteral",
										"value": "top"
									},
									{
										"type": "stringLiteral",
										"value": "top-left"
									},
									{
										"type": "stringLiteral",
										"value": "top-right"
									},
									{
										"type": "stringLiteral",
										"value": "bottom"
									},
									{
										"type": "stringLiteral",
										"value": "bottom-left"
									},
									{
										"type": "stringLiteral",
										"value": "bottom-right"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.fixed",
								"id": 11
							}
						},
						{
							"id": 1420,
							"name": "heading",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies a heading font family style"
							},
							"sources": [
								{
									"fileName": "src/Text/Text.tsx",
									"line": 40,
									"character": 9
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TextProps.heading",
								"id": 270
							}
						},
						{
							"id": 1439,
							"name": "height",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Fixed height applied through inline styling"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 98,
									"character": 8
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.height",
								"id": 12
							}
						},
						{
							"id": 1421,
							"name": "inline",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Text default to block display, this will apply inline display."
							},
							"sources": [
								{
									"fileName": "src/Text/Text.tsx",
									"line": 42,
									"character": 8
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TextProps.inline",
								"id": 271
							}
						},
						{
							"id": 1440,
							"name": "margin",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Margins applied for the global spacing variables"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 100,
									"character": 8
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeSize",
								"id": 31
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.margin",
								"id": 13
							}
						},
						{
							"id": 1441,
							"name": "maxWidth",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Max width applied through inline styling"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 102,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.maxWidth",
								"id": 14
							}
						},
						{
							"id": 1442,
							"name": "minHeight",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Max height applied through inline styling"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 104,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.minHeight",
								"id": 15
							}
						},
						{
							"id": 1443,
							"name": "minWidth",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Min width applied through inline style"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 106,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.minWidth",
								"id": 16
							}
						},
						{
							"id": 1422,
							"name": "monospace",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies a monospace font family style"
							},
							"sources": [
								{
									"fileName": "src/Text/Text.tsx",
									"line": 44,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TextProps.monospace",
								"id": 272
							}
						},
						{
							"id": 1444,
							"name": "overflow",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Overflow"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 108,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "stringLiteral",
										"value": "hidden"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.overflow",
								"id": 17
							}
						},
						{
							"id": 1445,
							"name": "padding",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Padding applied for the global spacing variables"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 110,
									"character": 9
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeSize",
								"id": 31
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.padding",
								"id": 18
							}
						},
						{
							"id": 1446,
							"name": "paddingHorizontal",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Horizontal padding applied for the global spacing variables"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 112,
									"character": 19
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeSize",
								"id": 31
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.paddingHorizontal",
								"id": 19
							}
						},
						{
							"id": 1447,
							"name": "paddingVertical",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Vertical pa?dding applied for the global spacing variables"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 114,
									"character": 17
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeSize",
								"id": 31
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.paddingVertical",
								"id": 20
							}
						},
						{
							"id": 1448,
							"name": "scrollable",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies overflow styling to enable/disable scrolling."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 116,
									"character": 12
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.scrollable",
								"id": 21
							}
						},
						{
							"id": 1423,
							"name": "size",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Size of the text"
							},
							"sources": [
								{
									"fileName": "src/Text/Text.tsx",
									"line": 46,
									"character": 6
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeTextSize",
								"id": 304
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TextProps.size",
								"id": 273
							}
						},
						{
							"id": 1424,
							"name": "strong",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies strong weight styling"
							},
							"sources": [
								{
									"fileName": "src/Text/Text.tsx",
									"line": 48,
									"character": 8
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TextProps.strong",
								"id": 274
							}
						},
						{
							"id": 1425,
							"name": "subscript",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies subscript baseline styling"
							},
							"sources": [
								{
									"fileName": "src/Text/Text.tsx",
									"line": 50,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TextProps.subscript",
								"id": 275
							}
						},
						{
							"id": 1426,
							"name": "superscript",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies superscript baseline styling"
							},
							"sources": [
								{
									"fileName": "src/Text/Text.tsx",
									"line": 52,
									"character": 13
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TextProps.superscript",
								"id": 276
							}
						},
						{
							"id": 1449,
							"name": "tag",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Any valid HTML or SVG element tag.",
								"tags": [
									{
										"tag": "reference",
										"text": "false\n"
									}
								]
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 122,
									"character": 5
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeAllElementTags",
								"id": 34
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.tag",
								"id": 22
							}
						},
						{
							"id": 1450,
							"name": "textColor",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Text colour to be applied."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 126,
									"character": 11
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeColor",
								"id": 30
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.textColor",
								"id": 23
							}
						},
						{
							"id": 1451,
							"name": "theme",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Theme applied to this element and inherited for child elements (until\na descendant theme is applied)."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 131,
									"character": 7
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeTheme",
								"id": 35
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.theme",
								"id": 24
							}
						},
						{
							"id": 1427,
							"name": "titlecase",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies title casing styling"
							},
							"sources": [
								{
									"fileName": "src/Text/Text.tsx",
									"line": 54,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TextProps.titlecase",
								"id": 277
							}
						},
						{
							"id": 1428,
							"name": "uppercase",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies uppercasing styling"
							},
							"sources": [
								{
									"fileName": "src/Text/Text.tsx",
									"line": 56,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TextProps.uppercase",
								"id": 278
							}
						},
						{
							"id": 1429,
							"name": "weak",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies weak weight styling"
							},
							"sources": [
								{
									"fileName": "src/Text/Text.tsx",
									"line": 58,
									"character": 6
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TextProps.weak",
								"id": 279
							}
						},
						{
							"id": 1452,
							"name": "width",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Fixed width applied through inline styling"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 133,
									"character": 7
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.width",
								"id": 25
							}
						},
						{
							"id": 1453,
							"name": "zIndex",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "z-index number for layering elements."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 135,
									"character": 8
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "number"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.zIndex",
								"id": 26
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								1430,
								1416,
								1431,
								1432,
								1433,
								1434,
								1417,
								1435,
								1436,
								1437,
								1418,
								1419,
								1438,
								1420,
								1439,
								1421,
								1440,
								1441,
								1442,
								1443,
								1422,
								1444,
								1445,
								1446,
								1447,
								1448,
								1423,
								1424,
								1425,
								1426,
								1449,
								1450,
								1451,
								1427,
								1428,
								1429,
								1452,
								1453
							]
						}
					],
					"sources": [
						{
							"fileName": "src/Table/Table.tsx",
							"line": 6,
							"character": 27
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"name": "TextProps",
							"id": 265
						}
					]
				},
				{
					"id": 1454,
					"name": "Table",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "src/Table/Table.tsx",
							"line": 8,
							"character": 11
						}
					],
					"type": {
						"type": "reference",
						"name": "ForwardRefExoticComponent",
						"typeArguments": [
							{
								"type": "intersection",
								"types": [
									{
										"type": "reference",
										"name": "TableProps",
										"id": 1415
									},
									{
										"type": "reflection",
										"declaration": {
											"id": 1455,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {}
										}
									},
									{
										"type": "reference",
										"name": "RefAttributes",
										"typeArguments": [
											{
												"type": "reference",
												"name": "HTMLTableElement"
											}
										]
									}
								]
							}
						]
					},
					"defaultValue": " React.forwardRef<HTMLTableElement, Attributes<HTMLTableElement, TableProps>>((props, ref) => {\n  return (\n    <Text { ...props } className=\"Table\" ref={ ref } tag=\"table\" />\n  );\n})"
				}
			],
			"groups": [
				{
					"title": "Interfaces",
					"kind": 256,
					"children": [
						1415
					]
				},
				{
					"title": "Variables",
					"kind": 32,
					"children": [
						1454
					]
				}
			],
			"sources": [
				{
					"fileName": "src/Table/Table.tsx",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 1456,
			"name": "\"Table/TableBody\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "/Users/harry/Projects/personal/preshape/src/Table/TableBody.tsx",
			"children": [
				{
					"id": 1457,
					"name": "TableBodyProps",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"children": [
						{
							"id": 1458,
							"name": "absolute",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Quick way of absolutely position to common places"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 58,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "fullscreen"
									},
									{
										"type": "stringLiteral",
										"value": "top"
									},
									{
										"type": "stringLiteral",
										"value": "top-left"
									},
									{
										"type": "stringLiteral",
										"value": "top-right"
									},
									{
										"type": "stringLiteral",
										"value": "bottom"
									},
									{
										"type": "stringLiteral",
										"value": "bottom-left"
									},
									{
										"type": "stringLiteral",
										"value": "bottom-right"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.absolute",
								"id": 3
							}
						},
						{
							"id": 1459,
							"name": "backgroundColor",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Background colour to be applied, shades are taken from the current\ntheme."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 70,
									"character": 17
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeColor",
								"id": 30
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.backgroundColor",
								"id": 4
							}
						},
						{
							"id": 1460,
							"name": "borderColor",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Border colour to be applied, shades are taken from the current\ntheme."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 75,
									"character": 13
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeColor",
								"id": 30
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.borderColor",
								"id": 5
							}
						},
						{
							"id": 1461,
							"name": "borderRadius",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Adds styling of a border radius to one of the size multiples."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 79,
									"character": 14
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "x1"
									},
									{
										"type": "stringLiteral",
										"value": "x2"
									},
									{
										"type": "stringLiteral",
										"value": "x3"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.borderRadius",
								"id": 6
							}
						},
						{
							"id": 1462,
							"name": "borderSize",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Thickness of the border to be applied"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 81,
									"character": 12
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "x1"
									},
									{
										"type": "stringLiteral",
										"value": "x2"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.borderSize",
								"id": 7
							}
						},
						{
							"id": 1463,
							"name": "clickable",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Adds styling to indicate that the element is clickable"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 83,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.clickable",
								"id": 8
							}
						},
						{
							"id": 1464,
							"name": "container",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies relative positioning to contain child elements."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 85,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.container",
								"id": 9
							}
						},
						{
							"id": 1465,
							"name": "display",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies display styling"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 87,
									"character": 9
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "block"
									},
									{
										"type": "stringLiteral",
										"value": "inline-block"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.display",
								"id": 10
							}
						},
						{
							"id": 1466,
							"name": "fixed",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Quick way of absolutely position to common places"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 89,
									"character": 7
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "fullscreen"
									},
									{
										"type": "stringLiteral",
										"value": "top"
									},
									{
										"type": "stringLiteral",
										"value": "top-left"
									},
									{
										"type": "stringLiteral",
										"value": "top-right"
									},
									{
										"type": "stringLiteral",
										"value": "bottom"
									},
									{
										"type": "stringLiteral",
										"value": "bottom-left"
									},
									{
										"type": "stringLiteral",
										"value": "bottom-right"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.fixed",
								"id": 11
							}
						},
						{
							"id": 1467,
							"name": "height",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Fixed height applied through inline styling"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 98,
									"character": 8
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.height",
								"id": 12
							}
						},
						{
							"id": 1468,
							"name": "margin",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Margins applied for the global spacing variables"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 100,
									"character": 8
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeSize",
								"id": 31
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.margin",
								"id": 13
							}
						},
						{
							"id": 1469,
							"name": "maxWidth",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Max width applied through inline styling"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 102,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.maxWidth",
								"id": 14
							}
						},
						{
							"id": 1470,
							"name": "minHeight",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Max height applied through inline styling"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 104,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.minHeight",
								"id": 15
							}
						},
						{
							"id": 1471,
							"name": "minWidth",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Min width applied through inline style"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 106,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.minWidth",
								"id": 16
							}
						},
						{
							"id": 1472,
							"name": "overflow",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Overflow"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 108,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "stringLiteral",
										"value": "hidden"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.overflow",
								"id": 17
							}
						},
						{
							"id": 1473,
							"name": "padding",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Padding applied for the global spacing variables"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 110,
									"character": 9
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeSize",
								"id": 31
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.padding",
								"id": 18
							}
						},
						{
							"id": 1474,
							"name": "paddingHorizontal",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Horizontal padding applied for the global spacing variables"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 112,
									"character": 19
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeSize",
								"id": 31
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.paddingHorizontal",
								"id": 19
							}
						},
						{
							"id": 1475,
							"name": "paddingVertical",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Vertical pa?dding applied for the global spacing variables"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 114,
									"character": 17
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeSize",
								"id": 31
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.paddingVertical",
								"id": 20
							}
						},
						{
							"id": 1476,
							"name": "scrollable",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies overflow styling to enable/disable scrolling."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 116,
									"character": 12
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.scrollable",
								"id": 21
							}
						},
						{
							"id": 1477,
							"name": "tag",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Any valid HTML or SVG element tag.",
								"tags": [
									{
										"tag": "reference",
										"text": "false\n"
									}
								]
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 122,
									"character": 5
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeAllElementTags",
								"id": 34
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.tag",
								"id": 22
							}
						},
						{
							"id": 1478,
							"name": "textColor",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Text colour to be applied."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 126,
									"character": 11
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeColor",
								"id": 30
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.textColor",
								"id": 23
							}
						},
						{
							"id": 1479,
							"name": "theme",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Theme applied to this element and inherited for child elements (until\na descendant theme is applied)."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 131,
									"character": 7
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeTheme",
								"id": 35
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.theme",
								"id": 24
							}
						},
						{
							"id": 1480,
							"name": "width",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Fixed width applied through inline styling"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 133,
									"character": 7
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.width",
								"id": 25
							}
						},
						{
							"id": 1481,
							"name": "zIndex",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "z-index number for layering elements."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 135,
									"character": 8
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "number"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.zIndex",
								"id": 26
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								1458,
								1459,
								1460,
								1461,
								1462,
								1463,
								1464,
								1465,
								1466,
								1467,
								1468,
								1469,
								1470,
								1471,
								1472,
								1473,
								1474,
								1475,
								1476,
								1477,
								1478,
								1479,
								1480,
								1481
							]
						}
					],
					"sources": [
						{
							"fileName": "src/Table/TableBody.tsx",
							"line": 4,
							"character": 31
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"name": "BaseProps",
							"id": 2
						}
					]
				},
				{
					"id": 1482,
					"name": "TableBody",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "src/Table/TableBody.tsx",
							"line": 6,
							"character": 15
						}
					],
					"type": {
						"type": "reference",
						"name": "ForwardRefExoticComponent",
						"typeArguments": [
							{
								"type": "intersection",
								"types": [
									{
										"type": "reference",
										"name": "TableBodyProps",
										"id": 1457
									},
									{
										"type": "reflection",
										"declaration": {
											"id": 1483,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {}
										}
									},
									{
										"type": "reference",
										"name": "RefAttributes",
										"typeArguments": [
											{
												"type": "reference",
												"name": "HTMLTableSectionElement"
											}
										]
									}
								]
							}
						]
					},
					"defaultValue": " React.forwardRef<HTMLTableSectionElement, Attributes<HTMLTableSectionElement, TableBodyProps>>((props, ref) => {\n  return (\n    <Base { ...props } className=\"Table__body\" ref={ ref } tag=\"tbody\" />\n  );\n})"
				}
			],
			"groups": [
				{
					"title": "Interfaces",
					"kind": 256,
					"children": [
						1457
					]
				},
				{
					"title": "Variables",
					"kind": 32,
					"children": [
						1482
					]
				}
			],
			"sources": [
				{
					"fileName": "src/Table/TableBody.tsx",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 1484,
			"name": "\"Table/TableCell\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "/Users/harry/Projects/personal/preshape/src/Table/TableCell.tsx",
			"children": [
				{
					"id": 1485,
					"name": "TableCellProps",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"children": [
						{
							"id": 1501,
							"name": "absolute",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Quick way of absolutely position to common places"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 58,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "fullscreen"
									},
									{
										"type": "stringLiteral",
										"value": "top"
									},
									{
										"type": "stringLiteral",
										"value": "top-left"
									},
									{
										"type": "stringLiteral",
										"value": "top-right"
									},
									{
										"type": "stringLiteral",
										"value": "bottom"
									},
									{
										"type": "stringLiteral",
										"value": "bottom-left"
									},
									{
										"type": "stringLiteral",
										"value": "bottom-right"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.absolute",
								"id": 3
							}
						},
						{
							"id": 1487,
							"name": "align",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Text alignment"
							},
							"sources": [
								{
									"fileName": "src/Text/Text.tsx",
									"line": 32,
									"character": 7
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "start"
									},
									{
										"type": "stringLiteral",
										"value": "middle"
									},
									{
										"type": "stringLiteral",
										"value": "end"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TextProps.align",
								"id": 266
							}
						},
						{
							"id": 1502,
							"name": "backgroundColor",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Background colour to be applied, shades are taken from the current\ntheme."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 70,
									"character": 17
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeColor",
								"id": 30
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.backgroundColor",
								"id": 4
							}
						},
						{
							"id": 1503,
							"name": "borderColor",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Border colour to be applied, shades are taken from the current\ntheme."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 75,
									"character": 13
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeColor",
								"id": 30
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.borderColor",
								"id": 5
							}
						},
						{
							"id": 1504,
							"name": "borderRadius",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Adds styling of a border radius to one of the size multiples."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 79,
									"character": 14
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "x1"
									},
									{
										"type": "stringLiteral",
										"value": "x2"
									},
									{
										"type": "stringLiteral",
										"value": "x3"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.borderRadius",
								"id": 6
							}
						},
						{
							"id": 1505,
							"name": "borderSize",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Thickness of the border to be applied"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 81,
									"character": 12
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "x1"
									},
									{
										"type": "stringLiteral",
										"value": "x2"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.borderSize",
								"id": 7
							}
						},
						{
							"id": 1488,
							"name": "breakOn",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "How the block of text should break onto new lines."
							},
							"sources": [
								{
									"fileName": "src/Text/Text.tsx",
									"line": 34,
									"character": 9
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "all"
									},
									{
										"type": "stringLiteral",
										"value": "none"
									},
									{
										"type": "stringLiteral",
										"value": "word"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TextProps.breakOn",
								"id": 267
							}
						},
						{
							"id": 1506,
							"name": "clickable",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Adds styling to indicate that the element is clickable"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 83,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.clickable",
								"id": 8
							}
						},
						{
							"id": 1507,
							"name": "container",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies relative positioning to contain child elements."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 85,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.container",
								"id": 9
							}
						},
						{
							"id": 1508,
							"name": "display",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies display styling"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 87,
									"character": 9
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "block"
									},
									{
										"type": "stringLiteral",
										"value": "inline-block"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.display",
								"id": 10
							}
						},
						{
							"id": 1489,
							"name": "ellipsis",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Replaces the overflow of text with the ellipsis character"
							},
							"sources": [
								{
									"fileName": "src/Text/Text.tsx",
									"line": 36,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TextProps.ellipsis",
								"id": 268
							}
						},
						{
							"id": 1490,
							"name": "emphasis",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies emphasis styling"
							},
							"sources": [
								{
									"fileName": "src/Text/Text.tsx",
									"line": 38,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TextProps.emphasis",
								"id": 269
							}
						},
						{
							"id": 1509,
							"name": "fixed",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Quick way of absolutely position to common places"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 89,
									"character": 7
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "fullscreen"
									},
									{
										"type": "stringLiteral",
										"value": "top"
									},
									{
										"type": "stringLiteral",
										"value": "top-left"
									},
									{
										"type": "stringLiteral",
										"value": "top-right"
									},
									{
										"type": "stringLiteral",
										"value": "bottom"
									},
									{
										"type": "stringLiteral",
										"value": "bottom-left"
									},
									{
										"type": "stringLiteral",
										"value": "bottom-right"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.fixed",
								"id": 11
							}
						},
						{
							"id": 1491,
							"name": "heading",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies a heading font family style"
							},
							"sources": [
								{
									"fileName": "src/Text/Text.tsx",
									"line": 40,
									"character": 9
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TextProps.heading",
								"id": 270
							}
						},
						{
							"id": 1510,
							"name": "height",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Fixed height applied through inline styling"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 98,
									"character": 8
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.height",
								"id": 12
							}
						},
						{
							"id": 1492,
							"name": "inline",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Text default to block display, this will apply inline display."
							},
							"sources": [
								{
									"fileName": "src/Text/Text.tsx",
									"line": 42,
									"character": 8
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TextProps.inline",
								"id": 271
							}
						},
						{
							"id": 1511,
							"name": "margin",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Margins applied for the global spacing variables"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 100,
									"character": 8
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeSize",
								"id": 31
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.margin",
								"id": 13
							}
						},
						{
							"id": 1512,
							"name": "maxWidth",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Max width applied through inline styling"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 102,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.maxWidth",
								"id": 14
							}
						},
						{
							"id": 1513,
							"name": "minHeight",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Max height applied through inline styling"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 104,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.minHeight",
								"id": 15
							}
						},
						{
							"id": 1514,
							"name": "minWidth",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Min width applied through inline style"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 106,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.minWidth",
								"id": 16
							}
						},
						{
							"id": 1493,
							"name": "monospace",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies a monospace font family style"
							},
							"sources": [
								{
									"fileName": "src/Text/Text.tsx",
									"line": 44,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TextProps.monospace",
								"id": 272
							}
						},
						{
							"id": 1515,
							"name": "overflow",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Overflow"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 108,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "stringLiteral",
										"value": "hidden"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.overflow",
								"id": 17
							}
						},
						{
							"id": 1516,
							"name": "padding",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Padding applied for the global spacing variables"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 110,
									"character": 9
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeSize",
								"id": 31
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.padding",
								"id": 18
							}
						},
						{
							"id": 1517,
							"name": "paddingHorizontal",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Horizontal padding applied for the global spacing variables"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 112,
									"character": 19
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeSize",
								"id": 31
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.paddingHorizontal",
								"id": 19
							}
						},
						{
							"id": 1518,
							"name": "paddingVertical",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Vertical pa?dding applied for the global spacing variables"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 114,
									"character": 17
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeSize",
								"id": 31
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.paddingVertical",
								"id": 20
							}
						},
						{
							"id": 1519,
							"name": "scrollable",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies overflow styling to enable/disable scrolling."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 116,
									"character": 12
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.scrollable",
								"id": 21
							}
						},
						{
							"id": 1494,
							"name": "size",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Size of the text"
							},
							"sources": [
								{
									"fileName": "src/Text/Text.tsx",
									"line": 46,
									"character": 6
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeTextSize",
								"id": 304
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TextProps.size",
								"id": 273
							}
						},
						{
							"id": 1486,
							"name": "sorted",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies styling indication that this column is currently being sorted"
							},
							"sources": [
								{
									"fileName": "src/Table/TableCell.tsx",
									"line": 7,
									"character": 8
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							}
						},
						{
							"id": 1495,
							"name": "strong",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies strong weight styling"
							},
							"sources": [
								{
									"fileName": "src/Text/Text.tsx",
									"line": 48,
									"character": 8
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TextProps.strong",
								"id": 274
							}
						},
						{
							"id": 1496,
							"name": "subscript",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies subscript baseline styling"
							},
							"sources": [
								{
									"fileName": "src/Text/Text.tsx",
									"line": 50,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TextProps.subscript",
								"id": 275
							}
						},
						{
							"id": 1497,
							"name": "superscript",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies superscript baseline styling"
							},
							"sources": [
								{
									"fileName": "src/Text/Text.tsx",
									"line": 52,
									"character": 13
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TextProps.superscript",
								"id": 276
							}
						},
						{
							"id": 1520,
							"name": "tag",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Any valid HTML or SVG element tag.",
								"tags": [
									{
										"tag": "reference",
										"text": "false\n"
									}
								]
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 122,
									"character": 5
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeAllElementTags",
								"id": 34
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.tag",
								"id": 22
							}
						},
						{
							"id": 1521,
							"name": "textColor",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Text colour to be applied."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 126,
									"character": 11
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeColor",
								"id": 30
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.textColor",
								"id": 23
							}
						},
						{
							"id": 1522,
							"name": "theme",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Theme applied to this element and inherited for child elements (until\na descendant theme is applied)."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 131,
									"character": 7
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeTheme",
								"id": 35
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.theme",
								"id": 24
							}
						},
						{
							"id": 1498,
							"name": "titlecase",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies title casing styling"
							},
							"sources": [
								{
									"fileName": "src/Text/Text.tsx",
									"line": 54,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TextProps.titlecase",
								"id": 277
							}
						},
						{
							"id": 1499,
							"name": "uppercase",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies uppercasing styling"
							},
							"sources": [
								{
									"fileName": "src/Text/Text.tsx",
									"line": 56,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TextProps.uppercase",
								"id": 278
							}
						},
						{
							"id": 1500,
							"name": "weak",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies weak weight styling"
							},
							"sources": [
								{
									"fileName": "src/Text/Text.tsx",
									"line": 58,
									"character": 6
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TextProps.weak",
								"id": 279
							}
						},
						{
							"id": 1523,
							"name": "width",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Fixed width applied through inline styling"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 133,
									"character": 7
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.width",
								"id": 25
							}
						},
						{
							"id": 1524,
							"name": "zIndex",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "z-index number for layering elements."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 135,
									"character": 8
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "number"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.zIndex",
								"id": 26
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								1501,
								1487,
								1502,
								1503,
								1504,
								1505,
								1488,
								1506,
								1507,
								1508,
								1489,
								1490,
								1509,
								1491,
								1510,
								1492,
								1511,
								1512,
								1513,
								1514,
								1493,
								1515,
								1516,
								1517,
								1518,
								1519,
								1494,
								1486,
								1495,
								1496,
								1497,
								1520,
								1521,
								1522,
								1498,
								1499,
								1500,
								1523,
								1524
							]
						}
					],
					"sources": [
						{
							"fileName": "src/Table/TableCell.tsx",
							"line": 5,
							"character": 31
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"name": "TextProps",
							"id": 265
						}
					]
				},
				{
					"id": 1525,
					"name": "TableCell",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "src/Table/TableCell.tsx",
							"line": 10,
							"character": 15
						}
					],
					"type": {
						"type": "reference",
						"name": "ForwardRefExoticComponent",
						"typeArguments": [
							{
								"type": "intersection",
								"types": [
									{
										"type": "reference",
										"name": "TableCellProps",
										"id": 1485
									},
									{
										"type": "reflection",
										"declaration": {
											"id": 1526,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {}
										}
									},
									{
										"type": "reference",
										"name": "RefAttributes",
										"typeArguments": [
											{
												"type": "reference",
												"name": "HTMLTableDataCellElement"
											}
										]
									}
								]
							}
						]
					},
					"defaultValue": " React.forwardRef<HTMLTableDataCellElement, Attributes<HTMLTableDataCellElement, TableCellProps>>((props, ref) => {\n  const { sorted, ...rest } = props;\n\n  return (\n    <Text { ...rest }\n        className=\"Table__cell\"\n        ref={ ref }\n        strong={ sorted }\n        tag=\"td\" />\n  );\n})"
				}
			],
			"groups": [
				{
					"title": "Interfaces",
					"kind": 256,
					"children": [
						1485
					]
				},
				{
					"title": "Variables",
					"kind": 32,
					"children": [
						1525
					]
				}
			],
			"sources": [
				{
					"fileName": "src/Table/TableCell.tsx",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 1527,
			"name": "\"Table/TableHeader\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "/Users/harry/Projects/personal/preshape/src/Table/TableHeader.tsx",
			"children": [
				{
					"id": 1528,
					"name": "TableHeaderProps",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"children": [
						{
							"id": 1529,
							"name": "absolute",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Quick way of absolutely position to common places"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 58,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "fullscreen"
									},
									{
										"type": "stringLiteral",
										"value": "top"
									},
									{
										"type": "stringLiteral",
										"value": "top-left"
									},
									{
										"type": "stringLiteral",
										"value": "top-right"
									},
									{
										"type": "stringLiteral",
										"value": "bottom"
									},
									{
										"type": "stringLiteral",
										"value": "bottom-left"
									},
									{
										"type": "stringLiteral",
										"value": "bottom-right"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.absolute",
								"id": 3
							}
						},
						{
							"id": 1530,
							"name": "backgroundColor",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Background colour to be applied, shades are taken from the current\ntheme."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 70,
									"character": 17
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeColor",
								"id": 30
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.backgroundColor",
								"id": 4
							}
						},
						{
							"id": 1531,
							"name": "borderColor",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Border colour to be applied, shades are taken from the current\ntheme."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 75,
									"character": 13
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeColor",
								"id": 30
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.borderColor",
								"id": 5
							}
						},
						{
							"id": 1532,
							"name": "borderRadius",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Adds styling of a border radius to one of the size multiples."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 79,
									"character": 14
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "x1"
									},
									{
										"type": "stringLiteral",
										"value": "x2"
									},
									{
										"type": "stringLiteral",
										"value": "x3"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.borderRadius",
								"id": 6
							}
						},
						{
							"id": 1533,
							"name": "borderSize",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Thickness of the border to be applied"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 81,
									"character": 12
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "x1"
									},
									{
										"type": "stringLiteral",
										"value": "x2"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.borderSize",
								"id": 7
							}
						},
						{
							"id": 1534,
							"name": "clickable",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Adds styling to indicate that the element is clickable"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 83,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.clickable",
								"id": 8
							}
						},
						{
							"id": 1535,
							"name": "container",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies relative positioning to contain child elements."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 85,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.container",
								"id": 9
							}
						},
						{
							"id": 1536,
							"name": "display",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies display styling"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 87,
									"character": 9
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "block"
									},
									{
										"type": "stringLiteral",
										"value": "inline-block"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.display",
								"id": 10
							}
						},
						{
							"id": 1537,
							"name": "fixed",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Quick way of absolutely position to common places"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 89,
									"character": 7
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "fullscreen"
									},
									{
										"type": "stringLiteral",
										"value": "top"
									},
									{
										"type": "stringLiteral",
										"value": "top-left"
									},
									{
										"type": "stringLiteral",
										"value": "top-right"
									},
									{
										"type": "stringLiteral",
										"value": "bottom"
									},
									{
										"type": "stringLiteral",
										"value": "bottom-left"
									},
									{
										"type": "stringLiteral",
										"value": "bottom-right"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.fixed",
								"id": 11
							}
						},
						{
							"id": 1538,
							"name": "height",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Fixed height applied through inline styling"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 98,
									"character": 8
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.height",
								"id": 12
							}
						},
						{
							"id": 1539,
							"name": "margin",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Margins applied for the global spacing variables"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 100,
									"character": 8
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeSize",
								"id": 31
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.margin",
								"id": 13
							}
						},
						{
							"id": 1540,
							"name": "maxWidth",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Max width applied through inline styling"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 102,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.maxWidth",
								"id": 14
							}
						},
						{
							"id": 1541,
							"name": "minHeight",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Max height applied through inline styling"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 104,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.minHeight",
								"id": 15
							}
						},
						{
							"id": 1542,
							"name": "minWidth",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Min width applied through inline style"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 106,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.minWidth",
								"id": 16
							}
						},
						{
							"id": 1543,
							"name": "overflow",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Overflow"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 108,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "stringLiteral",
										"value": "hidden"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.overflow",
								"id": 17
							}
						},
						{
							"id": 1544,
							"name": "padding",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Padding applied for the global spacing variables"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 110,
									"character": 9
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeSize",
								"id": 31
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.padding",
								"id": 18
							}
						},
						{
							"id": 1545,
							"name": "paddingHorizontal",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Horizontal padding applied for the global spacing variables"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 112,
									"character": 19
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeSize",
								"id": 31
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.paddingHorizontal",
								"id": 19
							}
						},
						{
							"id": 1546,
							"name": "paddingVertical",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Vertical pa?dding applied for the global spacing variables"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 114,
									"character": 17
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeSize",
								"id": 31
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.paddingVertical",
								"id": 20
							}
						},
						{
							"id": 1547,
							"name": "scrollable",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies overflow styling to enable/disable scrolling."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 116,
									"character": 12
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.scrollable",
								"id": 21
							}
						},
						{
							"id": 1548,
							"name": "tag",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Any valid HTML or SVG element tag.",
								"tags": [
									{
										"tag": "reference",
										"text": "false\n"
									}
								]
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 122,
									"character": 5
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeAllElementTags",
								"id": 34
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.tag",
								"id": 22
							}
						},
						{
							"id": 1549,
							"name": "textColor",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Text colour to be applied."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 126,
									"character": 11
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeColor",
								"id": 30
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.textColor",
								"id": 23
							}
						},
						{
							"id": 1550,
							"name": "theme",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Theme applied to this element and inherited for child elements (until\na descendant theme is applied)."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 131,
									"character": 7
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeTheme",
								"id": 35
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.theme",
								"id": 24
							}
						},
						{
							"id": 1551,
							"name": "width",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Fixed width applied through inline styling"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 133,
									"character": 7
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.width",
								"id": 25
							}
						},
						{
							"id": 1552,
							"name": "zIndex",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "z-index number for layering elements."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 135,
									"character": 8
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "number"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.zIndex",
								"id": 26
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								1529,
								1530,
								1531,
								1532,
								1533,
								1534,
								1535,
								1536,
								1537,
								1538,
								1539,
								1540,
								1541,
								1542,
								1543,
								1544,
								1545,
								1546,
								1547,
								1548,
								1549,
								1550,
								1551,
								1552
							]
						}
					],
					"sources": [
						{
							"fileName": "src/Table/TableHeader.tsx",
							"line": 5,
							"character": 33
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"name": "BaseProps",
							"id": 2
						}
					]
				},
				{
					"id": 1553,
					"name": "TableHeader",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "src/Table/TableHeader.tsx",
							"line": 7,
							"character": 17
						}
					],
					"type": {
						"type": "reference",
						"name": "ForwardRefExoticComponent",
						"typeArguments": [
							{
								"type": "intersection",
								"types": [
									{
										"type": "reference",
										"name": "TableHeaderProps",
										"id": 1528
									},
									{
										"type": "reflection",
										"declaration": {
											"id": 1554,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {}
										}
									},
									{
										"type": "reference",
										"name": "RefAttributes",
										"typeArguments": [
											{
												"type": "reference",
												"name": "HTMLTableSectionElement"
											}
										]
									}
								]
							}
						]
					},
					"defaultValue": " React.forwardRef<HTMLTableSectionElement, Attributes<HTMLTableSectionElement, TableHeaderProps>>((props, ref) => {\n  return (\n    <Base { ...props }\n        className=\"Table__header\"\n        ref={ ref }\n        tag=\"thead\" />\n  );\n})"
				}
			],
			"groups": [
				{
					"title": "Interfaces",
					"kind": 256,
					"children": [
						1528
					]
				},
				{
					"title": "Variables",
					"kind": 32,
					"children": [
						1553
					]
				}
			],
			"sources": [
				{
					"fileName": "src/Table/TableHeader.tsx",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 1555,
			"name": "\"Table/TableHeaderCell\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "/Users/harry/Projects/personal/preshape/src/Table/TableHeaderCell.tsx",
			"children": [
				{
					"id": 1556,
					"name": "TableHeaderCellProps",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"children": [
						{
							"id": 1573,
							"name": "absolute",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Quick way of absolutely position to common places"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 58,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "fullscreen"
									},
									{
										"type": "stringLiteral",
										"value": "top"
									},
									{
										"type": "stringLiteral",
										"value": "top-left"
									},
									{
										"type": "stringLiteral",
										"value": "top-right"
									},
									{
										"type": "stringLiteral",
										"value": "bottom"
									},
									{
										"type": "stringLiteral",
										"value": "bottom-left"
									},
									{
										"type": "stringLiteral",
										"value": "bottom-right"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.absolute",
								"id": 3
							}
						},
						{
							"id": 1559,
							"name": "align",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Text alignment"
							},
							"sources": [
								{
									"fileName": "src/Text/Text.tsx",
									"line": 32,
									"character": 7
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "start"
									},
									{
										"type": "stringLiteral",
										"value": "middle"
									},
									{
										"type": "stringLiteral",
										"value": "end"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TextProps.align",
								"id": 266
							}
						},
						{
							"id": 1574,
							"name": "backgroundColor",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Background colour to be applied, shades are taken from the current\ntheme."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 70,
									"character": 17
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeColor",
								"id": 30
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.backgroundColor",
								"id": 4
							}
						},
						{
							"id": 1575,
							"name": "borderColor",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Border colour to be applied, shades are taken from the current\ntheme."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 75,
									"character": 13
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeColor",
								"id": 30
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.borderColor",
								"id": 5
							}
						},
						{
							"id": 1576,
							"name": "borderRadius",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Adds styling of a border radius to one of the size multiples."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 79,
									"character": 14
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "x1"
									},
									{
										"type": "stringLiteral",
										"value": "x2"
									},
									{
										"type": "stringLiteral",
										"value": "x3"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.borderRadius",
								"id": 6
							}
						},
						{
							"id": 1577,
							"name": "borderSize",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Thickness of the border to be applied"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 81,
									"character": 12
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "x1"
									},
									{
										"type": "stringLiteral",
										"value": "x2"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.borderSize",
								"id": 7
							}
						},
						{
							"id": 1560,
							"name": "breakOn",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "How the block of text should break onto new lines."
							},
							"sources": [
								{
									"fileName": "src/Text/Text.tsx",
									"line": 34,
									"character": 9
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "all"
									},
									{
										"type": "stringLiteral",
										"value": "none"
									},
									{
										"type": "stringLiteral",
										"value": "word"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TextProps.breakOn",
								"id": 267
							}
						},
						{
							"id": 1578,
							"name": "clickable",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Adds styling to indicate that the element is clickable"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 83,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.clickable",
								"id": 8
							}
						},
						{
							"id": 1579,
							"name": "container",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies relative positioning to contain child elements."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 85,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.container",
								"id": 9
							}
						},
						{
							"id": 1580,
							"name": "display",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies display styling"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 87,
									"character": 9
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "block"
									},
									{
										"type": "stringLiteral",
										"value": "inline-block"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.display",
								"id": 10
							}
						},
						{
							"id": 1561,
							"name": "ellipsis",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Replaces the overflow of text with the ellipsis character"
							},
							"sources": [
								{
									"fileName": "src/Text/Text.tsx",
									"line": 36,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TextProps.ellipsis",
								"id": 268
							}
						},
						{
							"id": 1562,
							"name": "emphasis",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies emphasis styling"
							},
							"sources": [
								{
									"fileName": "src/Text/Text.tsx",
									"line": 38,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TextProps.emphasis",
								"id": 269
							}
						},
						{
							"id": 1581,
							"name": "fixed",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Quick way of absolutely position to common places"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 89,
									"character": 7
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "fullscreen"
									},
									{
										"type": "stringLiteral",
										"value": "top"
									},
									{
										"type": "stringLiteral",
										"value": "top-left"
									},
									{
										"type": "stringLiteral",
										"value": "top-right"
									},
									{
										"type": "stringLiteral",
										"value": "bottom"
									},
									{
										"type": "stringLiteral",
										"value": "bottom-left"
									},
									{
										"type": "stringLiteral",
										"value": "bottom-right"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.fixed",
								"id": 11
							}
						},
						{
							"id": 1563,
							"name": "heading",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies a heading font family style"
							},
							"sources": [
								{
									"fileName": "src/Text/Text.tsx",
									"line": 40,
									"character": 9
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TextProps.heading",
								"id": 270
							}
						},
						{
							"id": 1582,
							"name": "height",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Fixed height applied through inline styling"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 98,
									"character": 8
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.height",
								"id": 12
							}
						},
						{
							"id": 1564,
							"name": "inline",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Text default to block display, this will apply inline display."
							},
							"sources": [
								{
									"fileName": "src/Text/Text.tsx",
									"line": 42,
									"character": 8
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TextProps.inline",
								"id": 271
							}
						},
						{
							"id": 1583,
							"name": "margin",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Margins applied for the global spacing variables"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 100,
									"character": 8
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeSize",
								"id": 31
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.margin",
								"id": 13
							}
						},
						{
							"id": 1584,
							"name": "maxWidth",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Max width applied through inline styling"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 102,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.maxWidth",
								"id": 14
							}
						},
						{
							"id": 1585,
							"name": "minHeight",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Max height applied through inline styling"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 104,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.minHeight",
								"id": 15
							}
						},
						{
							"id": 1586,
							"name": "minWidth",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Min width applied through inline style"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 106,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.minWidth",
								"id": 16
							}
						},
						{
							"id": 1565,
							"name": "monospace",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies a monospace font family style"
							},
							"sources": [
								{
									"fileName": "src/Text/Text.tsx",
									"line": 44,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TextProps.monospace",
								"id": 272
							}
						},
						{
							"id": 1587,
							"name": "overflow",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Overflow"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 108,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "stringLiteral",
										"value": "hidden"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.overflow",
								"id": 17
							}
						},
						{
							"id": 1588,
							"name": "padding",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Padding applied for the global spacing variables"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 110,
									"character": 9
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeSize",
								"id": 31
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.padding",
								"id": 18
							}
						},
						{
							"id": 1589,
							"name": "paddingHorizontal",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Horizontal padding applied for the global spacing variables"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 112,
									"character": 19
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeSize",
								"id": 31
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.paddingHorizontal",
								"id": 19
							}
						},
						{
							"id": 1590,
							"name": "paddingVertical",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Vertical pa?dding applied for the global spacing variables"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 114,
									"character": 17
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeSize",
								"id": 31
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.paddingVertical",
								"id": 20
							}
						},
						{
							"id": 1591,
							"name": "scrollable",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies overflow styling to enable/disable scrolling."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 116,
									"character": 12
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.scrollable",
								"id": 21
							}
						},
						{
							"id": 1566,
							"name": "size",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Size of the text"
							},
							"sources": [
								{
									"fileName": "src/Text/Text.tsx",
									"line": 46,
									"character": 6
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeTextSize",
								"id": 304
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TextProps.size",
								"id": 273
							}
						},
						{
							"id": 1557,
							"name": "sortable",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies styling indication that this column is sortable"
							},
							"sources": [
								{
									"fileName": "src/Table/TableHeaderCell.tsx",
									"line": 8,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							}
						},
						{
							"id": 1558,
							"name": "sorted",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies styling indication that this column is currently being sorted"
							},
							"sources": [
								{
									"fileName": "src/Table/TableHeaderCell.tsx",
									"line": 10,
									"character": 8
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							}
						},
						{
							"id": 1567,
							"name": "strong",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies strong weight styling"
							},
							"sources": [
								{
									"fileName": "src/Text/Text.tsx",
									"line": 48,
									"character": 8
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TextProps.strong",
								"id": 274
							}
						},
						{
							"id": 1568,
							"name": "subscript",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies subscript baseline styling"
							},
							"sources": [
								{
									"fileName": "src/Text/Text.tsx",
									"line": 50,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TextProps.subscript",
								"id": 275
							}
						},
						{
							"id": 1569,
							"name": "superscript",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies superscript baseline styling"
							},
							"sources": [
								{
									"fileName": "src/Text/Text.tsx",
									"line": 52,
									"character": 13
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TextProps.superscript",
								"id": 276
							}
						},
						{
							"id": 1592,
							"name": "tag",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Any valid HTML or SVG element tag.",
								"tags": [
									{
										"tag": "reference",
										"text": "false\n"
									}
								]
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 122,
									"character": 5
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeAllElementTags",
								"id": 34
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.tag",
								"id": 22
							}
						},
						{
							"id": 1593,
							"name": "textColor",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Text colour to be applied."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 126,
									"character": 11
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeColor",
								"id": 30
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.textColor",
								"id": 23
							}
						},
						{
							"id": 1594,
							"name": "theme",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Theme applied to this element and inherited for child elements (until\na descendant theme is applied)."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 131,
									"character": 7
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeTheme",
								"id": 35
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.theme",
								"id": 24
							}
						},
						{
							"id": 1570,
							"name": "titlecase",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies title casing styling"
							},
							"sources": [
								{
									"fileName": "src/Text/Text.tsx",
									"line": 54,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TextProps.titlecase",
								"id": 277
							}
						},
						{
							"id": 1571,
							"name": "uppercase",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies uppercasing styling"
							},
							"sources": [
								{
									"fileName": "src/Text/Text.tsx",
									"line": 56,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TextProps.uppercase",
								"id": 278
							}
						},
						{
							"id": 1572,
							"name": "weak",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies weak weight styling"
							},
							"sources": [
								{
									"fileName": "src/Text/Text.tsx",
									"line": 58,
									"character": 6
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TextProps.weak",
								"id": 279
							}
						},
						{
							"id": 1595,
							"name": "width",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Fixed width applied through inline styling"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 133,
									"character": 7
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.width",
								"id": 25
							}
						},
						{
							"id": 1596,
							"name": "zIndex",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "z-index number for layering elements."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 135,
									"character": 8
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "number"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.zIndex",
								"id": 26
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								1573,
								1559,
								1574,
								1575,
								1576,
								1577,
								1560,
								1578,
								1579,
								1580,
								1561,
								1562,
								1581,
								1563,
								1582,
								1564,
								1583,
								1584,
								1585,
								1586,
								1565,
								1587,
								1588,
								1589,
								1590,
								1591,
								1566,
								1557,
								1558,
								1567,
								1568,
								1569,
								1592,
								1593,
								1594,
								1570,
								1571,
								1572,
								1595,
								1596
							]
						}
					],
					"sources": [
						{
							"fileName": "src/Table/TableHeaderCell.tsx",
							"line": 6,
							"character": 37
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"name": "TextProps",
							"id": 265
						}
					]
				},
				{
					"id": 1597,
					"name": "TableHeaderCell",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "src/Table/TableHeaderCell.tsx",
							"line": 13,
							"character": 21
						}
					],
					"type": {
						"type": "reference",
						"name": "ForwardRefExoticComponent",
						"typeArguments": [
							{
								"type": "intersection",
								"types": [
									{
										"type": "reference",
										"name": "TableHeaderCellProps",
										"id": 1556
									},
									{
										"type": "reflection",
										"declaration": {
											"id": 1598,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {}
										}
									},
									{
										"type": "reference",
										"name": "RefAttributes",
										"typeArguments": [
											{
												"type": "reference",
												"name": "HTMLTableHeaderCellElement"
											}
										]
									}
								]
							}
						]
					},
					"defaultValue": " React.forwardRef<HTMLTableHeaderCellElement, Attributes<HTMLTableHeaderCellElement, TableHeaderCellProps>>((props, ref) => {\n  const { children, sortable, sorted, ...rest } = props;\n\n  return (\n    <Text { ...rest }\n        className=\"Table__header-cell\"\n        ref={ ref }\n        size=\"x1\"\n        strong\n        tag=\"th\"\n        uppercase>\n      { sortable ? (\n        <Link active={ sorted }>\n          { children }\n        </Link>\n      ) : (\n        children\n      ) }\n    </Text>\n  );\n})"
				}
			],
			"groups": [
				{
					"title": "Interfaces",
					"kind": 256,
					"children": [
						1556
					]
				},
				{
					"title": "Variables",
					"kind": 32,
					"children": [
						1597
					]
				}
			],
			"sources": [
				{
					"fileName": "src/Table/TableHeaderCell.tsx",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 1599,
			"name": "\"Table/TableRow\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "/Users/harry/Projects/personal/preshape/src/Table/TableRow.tsx",
			"children": [
				{
					"id": 1600,
					"name": "TableRowProps",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"children": [
						{
							"id": 1601,
							"name": "absolute",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Quick way of absolutely position to common places"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 58,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "fullscreen"
									},
									{
										"type": "stringLiteral",
										"value": "top"
									},
									{
										"type": "stringLiteral",
										"value": "top-left"
									},
									{
										"type": "stringLiteral",
										"value": "top-right"
									},
									{
										"type": "stringLiteral",
										"value": "bottom"
									},
									{
										"type": "stringLiteral",
										"value": "bottom-left"
									},
									{
										"type": "stringLiteral",
										"value": "bottom-right"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.absolute",
								"id": 3
							}
						},
						{
							"id": 1602,
							"name": "backgroundColor",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Background colour to be applied, shades are taken from the current\ntheme."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 70,
									"character": 17
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeColor",
								"id": 30
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.backgroundColor",
								"id": 4
							}
						},
						{
							"id": 1603,
							"name": "borderColor",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Border colour to be applied, shades are taken from the current\ntheme."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 75,
									"character": 13
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeColor",
								"id": 30
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.borderColor",
								"id": 5
							}
						},
						{
							"id": 1604,
							"name": "borderRadius",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Adds styling of a border radius to one of the size multiples."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 79,
									"character": 14
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "x1"
									},
									{
										"type": "stringLiteral",
										"value": "x2"
									},
									{
										"type": "stringLiteral",
										"value": "x3"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.borderRadius",
								"id": 6
							}
						},
						{
							"id": 1605,
							"name": "borderSize",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Thickness of the border to be applied"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 81,
									"character": 12
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "x1"
									},
									{
										"type": "stringLiteral",
										"value": "x2"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.borderSize",
								"id": 7
							}
						},
						{
							"id": 1606,
							"name": "clickable",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Adds styling to indicate that the element is clickable"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 83,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.clickable",
								"id": 8
							}
						},
						{
							"id": 1607,
							"name": "container",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies relative positioning to contain child elements."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 85,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.container",
								"id": 9
							}
						},
						{
							"id": 1608,
							"name": "display",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies display styling"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 87,
									"character": 9
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "block"
									},
									{
										"type": "stringLiteral",
										"value": "inline-block"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.display",
								"id": 10
							}
						},
						{
							"id": 1609,
							"name": "fixed",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Quick way of absolutely position to common places"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 89,
									"character": 7
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "fullscreen"
									},
									{
										"type": "stringLiteral",
										"value": "top"
									},
									{
										"type": "stringLiteral",
										"value": "top-left"
									},
									{
										"type": "stringLiteral",
										"value": "top-right"
									},
									{
										"type": "stringLiteral",
										"value": "bottom"
									},
									{
										"type": "stringLiteral",
										"value": "bottom-left"
									},
									{
										"type": "stringLiteral",
										"value": "bottom-right"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.fixed",
								"id": 11
							}
						},
						{
							"id": 1610,
							"name": "height",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Fixed height applied through inline styling"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 98,
									"character": 8
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.height",
								"id": 12
							}
						},
						{
							"id": 1611,
							"name": "margin",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Margins applied for the global spacing variables"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 100,
									"character": 8
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeSize",
								"id": 31
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.margin",
								"id": 13
							}
						},
						{
							"id": 1612,
							"name": "maxWidth",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Max width applied through inline styling"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 102,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.maxWidth",
								"id": 14
							}
						},
						{
							"id": 1613,
							"name": "minHeight",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Max height applied through inline styling"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 104,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.minHeight",
								"id": 15
							}
						},
						{
							"id": 1614,
							"name": "minWidth",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Min width applied through inline style"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 106,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.minWidth",
								"id": 16
							}
						},
						{
							"id": 1615,
							"name": "overflow",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Overflow"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 108,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "stringLiteral",
										"value": "hidden"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.overflow",
								"id": 17
							}
						},
						{
							"id": 1616,
							"name": "padding",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Padding applied for the global spacing variables"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 110,
									"character": 9
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeSize",
								"id": 31
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.padding",
								"id": 18
							}
						},
						{
							"id": 1617,
							"name": "paddingHorizontal",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Horizontal padding applied for the global spacing variables"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 112,
									"character": 19
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeSize",
								"id": 31
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.paddingHorizontal",
								"id": 19
							}
						},
						{
							"id": 1618,
							"name": "paddingVertical",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Vertical pa?dding applied for the global spacing variables"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 114,
									"character": 17
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeSize",
								"id": 31
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.paddingVertical",
								"id": 20
							}
						},
						{
							"id": 1619,
							"name": "scrollable",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies overflow styling to enable/disable scrolling."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 116,
									"character": 12
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.scrollable",
								"id": 21
							}
						},
						{
							"id": 1620,
							"name": "tag",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Any valid HTML or SVG element tag.",
								"tags": [
									{
										"tag": "reference",
										"text": "false\n"
									}
								]
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 122,
									"character": 5
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeAllElementTags",
								"id": 34
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.tag",
								"id": 22
							}
						},
						{
							"id": 1621,
							"name": "textColor",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Text colour to be applied."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 126,
									"character": 11
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeColor",
								"id": 30
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.textColor",
								"id": 23
							}
						},
						{
							"id": 1622,
							"name": "theme",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Theme applied to this element and inherited for child elements (until\na descendant theme is applied)."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 131,
									"character": 7
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeTheme",
								"id": 35
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.theme",
								"id": 24
							}
						},
						{
							"id": 1623,
							"name": "width",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Fixed width applied through inline styling"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 133,
									"character": 7
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.width",
								"id": 25
							}
						},
						{
							"id": 1624,
							"name": "zIndex",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "z-index number for layering elements."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 135,
									"character": 8
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "number"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.zIndex",
								"id": 26
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								1601,
								1602,
								1603,
								1604,
								1605,
								1606,
								1607,
								1608,
								1609,
								1610,
								1611,
								1612,
								1613,
								1614,
								1615,
								1616,
								1617,
								1618,
								1619,
								1620,
								1621,
								1622,
								1623,
								1624
							]
						}
					],
					"sources": [
						{
							"fileName": "src/Table/TableRow.tsx",
							"line": 5,
							"character": 30
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"name": "BaseProps",
							"id": 2
						}
					]
				},
				{
					"id": 1625,
					"name": "TableRow",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "src/Table/TableRow.tsx",
							"line": 7,
							"character": 14
						}
					],
					"type": {
						"type": "reference",
						"name": "ForwardRefExoticComponent",
						"typeArguments": [
							{
								"type": "intersection",
								"types": [
									{
										"type": "reference",
										"name": "TableRowProps",
										"id": 1600
									},
									{
										"type": "reflection",
										"declaration": {
											"id": 1626,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {}
										}
									},
									{
										"type": "reference",
										"name": "RefAttributes",
										"typeArguments": [
											{
												"type": "reference",
												"name": "HTMLTableRowElement"
											}
										]
									}
								]
							}
						]
					},
					"defaultValue": " React.forwardRef<HTMLTableRowElement, Attributes<HTMLTableRowElement, TableRowProps>>((props, ref) => {\n  const classes = classnames('Table__row', {\n    'Table__row--clickable': props.onClick,\n  });\n\n  return (\n    <Base { ...props }\n        className={ classes }\n        ref={ ref }\n        tag=\"tr\" />\n  );\n})"
				}
			],
			"groups": [
				{
					"title": "Interfaces",
					"kind": 256,
					"children": [
						1600
					]
				},
				{
					"title": "Variables",
					"kind": 32,
					"children": [
						1625
					]
				}
			],
			"sources": [
				{
					"fileName": "src/Table/TableRow.tsx",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 264,
			"name": "\"Text/Text\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "/Users/harry/Projects/personal/preshape/src/Text/Text.tsx",
			"children": [
				{
					"id": 265,
					"name": "TextProps",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"children": [
						{
							"id": 280,
							"name": "absolute",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Quick way of absolutely position to common places"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 58,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "fullscreen"
									},
									{
										"type": "stringLiteral",
										"value": "top"
									},
									{
										"type": "stringLiteral",
										"value": "top-left"
									},
									{
										"type": "stringLiteral",
										"value": "top-right"
									},
									{
										"type": "stringLiteral",
										"value": "bottom"
									},
									{
										"type": "stringLiteral",
										"value": "bottom-left"
									},
									{
										"type": "stringLiteral",
										"value": "bottom-right"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.absolute",
								"id": 3
							}
						},
						{
							"id": 266,
							"name": "align",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Text alignment"
							},
							"sources": [
								{
									"fileName": "src/Text/Text.tsx",
									"line": 32,
									"character": 7
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "start"
									},
									{
										"type": "stringLiteral",
										"value": "middle"
									},
									{
										"type": "stringLiteral",
										"value": "end"
									}
								]
							}
						},
						{
							"id": 281,
							"name": "backgroundColor",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Background colour to be applied, shades are taken from the current\ntheme."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 70,
									"character": 17
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeColor",
								"id": 30
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.backgroundColor",
								"id": 4
							}
						},
						{
							"id": 282,
							"name": "borderColor",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Border colour to be applied, shades are taken from the current\ntheme."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 75,
									"character": 13
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeColor",
								"id": 30
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.borderColor",
								"id": 5
							}
						},
						{
							"id": 283,
							"name": "borderRadius",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Adds styling of a border radius to one of the size multiples."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 79,
									"character": 14
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "x1"
									},
									{
										"type": "stringLiteral",
										"value": "x2"
									},
									{
										"type": "stringLiteral",
										"value": "x3"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.borderRadius",
								"id": 6
							}
						},
						{
							"id": 284,
							"name": "borderSize",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Thickness of the border to be applied"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 81,
									"character": 12
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "x1"
									},
									{
										"type": "stringLiteral",
										"value": "x2"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.borderSize",
								"id": 7
							}
						},
						{
							"id": 267,
							"name": "breakOn",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "How the block of text should break onto new lines."
							},
							"sources": [
								{
									"fileName": "src/Text/Text.tsx",
									"line": 34,
									"character": 9
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "all"
									},
									{
										"type": "stringLiteral",
										"value": "none"
									},
									{
										"type": "stringLiteral",
										"value": "word"
									}
								]
							}
						},
						{
							"id": 285,
							"name": "clickable",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Adds styling to indicate that the element is clickable"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 83,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.clickable",
								"id": 8
							}
						},
						{
							"id": 286,
							"name": "container",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies relative positioning to contain child elements."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 85,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.container",
								"id": 9
							}
						},
						{
							"id": 287,
							"name": "display",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies display styling"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 87,
									"character": 9
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "block"
									},
									{
										"type": "stringLiteral",
										"value": "inline-block"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.display",
								"id": 10
							}
						},
						{
							"id": 268,
							"name": "ellipsis",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Replaces the overflow of text with the ellipsis character"
							},
							"sources": [
								{
									"fileName": "src/Text/Text.tsx",
									"line": 36,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							}
						},
						{
							"id": 269,
							"name": "emphasis",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies emphasis styling"
							},
							"sources": [
								{
									"fileName": "src/Text/Text.tsx",
									"line": 38,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							}
						},
						{
							"id": 288,
							"name": "fixed",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Quick way of absolutely position to common places"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 89,
									"character": 7
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "fullscreen"
									},
									{
										"type": "stringLiteral",
										"value": "top"
									},
									{
										"type": "stringLiteral",
										"value": "top-left"
									},
									{
										"type": "stringLiteral",
										"value": "top-right"
									},
									{
										"type": "stringLiteral",
										"value": "bottom"
									},
									{
										"type": "stringLiteral",
										"value": "bottom-left"
									},
									{
										"type": "stringLiteral",
										"value": "bottom-right"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.fixed",
								"id": 11
							}
						},
						{
							"id": 270,
							"name": "heading",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies a heading font family style"
							},
							"sources": [
								{
									"fileName": "src/Text/Text.tsx",
									"line": 40,
									"character": 9
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							}
						},
						{
							"id": 289,
							"name": "height",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Fixed height applied through inline styling"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 98,
									"character": 8
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.height",
								"id": 12
							}
						},
						{
							"id": 271,
							"name": "inline",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Text default to block display, this will apply inline display."
							},
							"sources": [
								{
									"fileName": "src/Text/Text.tsx",
									"line": 42,
									"character": 8
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							}
						},
						{
							"id": 290,
							"name": "margin",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Margins applied for the global spacing variables"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 100,
									"character": 8
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeSize",
								"id": 31
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.margin",
								"id": 13
							}
						},
						{
							"id": 291,
							"name": "maxWidth",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Max width applied through inline styling"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 102,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.maxWidth",
								"id": 14
							}
						},
						{
							"id": 292,
							"name": "minHeight",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Max height applied through inline styling"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 104,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.minHeight",
								"id": 15
							}
						},
						{
							"id": 293,
							"name": "minWidth",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Min width applied through inline style"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 106,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.minWidth",
								"id": 16
							}
						},
						{
							"id": 272,
							"name": "monospace",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies a monospace font family style"
							},
							"sources": [
								{
									"fileName": "src/Text/Text.tsx",
									"line": 44,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							}
						},
						{
							"id": 294,
							"name": "overflow",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Overflow"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 108,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "stringLiteral",
										"value": "hidden"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.overflow",
								"id": 17
							}
						},
						{
							"id": 295,
							"name": "padding",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Padding applied for the global spacing variables"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 110,
									"character": 9
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeSize",
								"id": 31
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.padding",
								"id": 18
							}
						},
						{
							"id": 296,
							"name": "paddingHorizontal",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Horizontal padding applied for the global spacing variables"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 112,
									"character": 19
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeSize",
								"id": 31
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.paddingHorizontal",
								"id": 19
							}
						},
						{
							"id": 297,
							"name": "paddingVertical",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Vertical pa?dding applied for the global spacing variables"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 114,
									"character": 17
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeSize",
								"id": 31
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.paddingVertical",
								"id": 20
							}
						},
						{
							"id": 298,
							"name": "scrollable",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies overflow styling to enable/disable scrolling."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 116,
									"character": 12
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.scrollable",
								"id": 21
							}
						},
						{
							"id": 273,
							"name": "size",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Size of the text"
							},
							"sources": [
								{
									"fileName": "src/Text/Text.tsx",
									"line": 46,
									"character": 6
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeTextSize",
								"id": 304
							}
						},
						{
							"id": 274,
							"name": "strong",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies strong weight styling"
							},
							"sources": [
								{
									"fileName": "src/Text/Text.tsx",
									"line": 48,
									"character": 8
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							}
						},
						{
							"id": 275,
							"name": "subscript",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies subscript baseline styling"
							},
							"sources": [
								{
									"fileName": "src/Text/Text.tsx",
									"line": 50,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							}
						},
						{
							"id": 276,
							"name": "superscript",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies superscript baseline styling"
							},
							"sources": [
								{
									"fileName": "src/Text/Text.tsx",
									"line": 52,
									"character": 13
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							}
						},
						{
							"id": 299,
							"name": "tag",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Any valid HTML or SVG element tag.",
								"tags": [
									{
										"tag": "reference",
										"text": "false\n"
									}
								]
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 122,
									"character": 5
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeAllElementTags",
								"id": 34
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.tag",
								"id": 22
							}
						},
						{
							"id": 300,
							"name": "textColor",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Text colour to be applied."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 126,
									"character": 11
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeColor",
								"id": 30
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.textColor",
								"id": 23
							}
						},
						{
							"id": 301,
							"name": "theme",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Theme applied to this element and inherited for child elements (until\na descendant theme is applied)."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 131,
									"character": 7
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeTheme",
								"id": 35
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.theme",
								"id": 24
							}
						},
						{
							"id": 277,
							"name": "titlecase",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies title casing styling"
							},
							"sources": [
								{
									"fileName": "src/Text/Text.tsx",
									"line": 54,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							}
						},
						{
							"id": 278,
							"name": "uppercase",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies uppercasing styling"
							},
							"sources": [
								{
									"fileName": "src/Text/Text.tsx",
									"line": 56,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							}
						},
						{
							"id": 279,
							"name": "weak",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies weak weight styling"
							},
							"sources": [
								{
									"fileName": "src/Text/Text.tsx",
									"line": 58,
									"character": 6
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							}
						},
						{
							"id": 302,
							"name": "width",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Fixed width applied through inline styling"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 133,
									"character": 7
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.width",
								"id": 25
							}
						},
						{
							"id": 303,
							"name": "zIndex",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "z-index number for layering elements."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 135,
									"character": 8
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "number"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.zIndex",
								"id": 26
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								280,
								266,
								281,
								282,
								283,
								284,
								267,
								285,
								286,
								287,
								268,
								269,
								288,
								270,
								289,
								271,
								290,
								291,
								292,
								293,
								272,
								294,
								295,
								296,
								297,
								298,
								273,
								274,
								275,
								276,
								299,
								300,
								301,
								277,
								278,
								279,
								302,
								303
							]
						}
					],
					"sources": [
						{
							"fileName": "src/Text/Text.tsx",
							"line": 30,
							"character": 26
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"name": "BaseProps",
							"id": 2
						}
					],
					"extendedBy": [
						{
							"type": "reference",
							"name": "BlockQuoteProps",
							"id": 317
						},
						{
							"type": "reference",
							"name": "CodeProps",
							"id": 548
						},
						{
							"type": "reference",
							"name": "CodeBlockProps",
							"id": 590
						},
						{
							"type": "reference",
							"name": "InputProps",
							"id": 886
						},
						{
							"type": "reference",
							"name": "LabelProps",
							"id": 929
						},
						{
							"type": "reference",
							"name": "LinkProps",
							"id": 999
						},
						{
							"type": "reference",
							"name": "TableProps",
							"id": 1415
						},
						{
							"type": "reference",
							"name": "TableCellProps",
							"id": 1485
						},
						{
							"type": "reference",
							"name": "TableHeaderCellProps",
							"id": 1556
						},
						{
							"type": "reference",
							"name": "TextAreaProps",
							"id": 1628
						}
					]
				},
				{
					"id": 304,
					"name": "TypeTextSize",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {
						"isExported": true
					},
					"sources": [
						{
							"fileName": "src/Text/Text.tsx",
							"line": 6,
							"character": 24
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "stringLiteral",
								"value": "x1"
							},
							{
								"type": "stringLiteral",
								"value": "x2"
							},
							{
								"type": "stringLiteral",
								"value": "x3"
							},
							{
								"type": "stringLiteral",
								"value": "x4"
							},
							{
								"type": "stringLiteral",
								"value": "x5"
							}
						]
					}
				},
				{
					"id": 314,
					"name": "Text",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "src/Text/Text.tsx",
							"line": 61,
							"character": 10
						}
					],
					"type": {
						"type": "reference",
						"name": "ForwardRefExoticComponent",
						"typeArguments": [
							{
								"type": "intersection",
								"types": [
									{
										"type": "reference",
										"name": "TextProps",
										"id": 265
									},
									{
										"type": "reflection",
										"declaration": {
											"id": 315,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {}
										}
									},
									{
										"type": "reference",
										"name": "RefAttributes",
										"typeArguments": [
											{
												"type": "reference",
												"name": "HTMLElement"
											}
										]
									}
								]
							}
						]
					},
					"defaultValue": " React.forwardRef<HTMLElement, Attributes<HTMLElement, TextProps>>((props, ref) => {\n  const {\n    align,\n    breakOn,\n    className,\n    ellipsis,\n    emphasis,\n    heading,\n    inline,\n    monospace,\n    size,\n    strong,\n    subscript,\n    superscript,\n    tag,\n    titlecase,\n    uppercase,\n    weak,\n    ...rest\n  } = props;\n\n  const classes = classnames(className, 'Text', {\n    'Text--ellipsis': ellipsis,\n    'Text--emphasis': emphasis,\n    'Text--heading': heading,\n    'Text--monospace': monospace,\n    'Text--subscript': subscript,\n    'Text--superscript': superscript,\n    'Text--strong': strong,\n    'Text--titlecase': titlecase,\n    'Text--uppercase': uppercase,\n    'Text--weak': weak,\n    [`Text--align-${align}`]: align,\n    [`Text--break-${breakOn}`]: breakOn,\n    [`Text--size-${size}`]: size,\n  });\n\n  const finalTag = tag || (inline\n    ? TagInlineMap(props)\n    : (size && TagBlockMap[size])) || 'div';\n\n  return (\n    <Base { ...rest }\n        className={ classes }\n        ref={ ref }\n        tag={ finalTag } />\n  );\n})"
				},
				{
					"id": 311,
					"name": "TagInlineMap",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isConst": true
					},
					"signatures": [
						{
							"id": 312,
							"name": "TagInlineMap",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 313,
									"name": "props",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "TextProps",
										"id": 265
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeAllElementTags",
								"id": 34
							}
						}
					],
					"sources": [
						{
							"fileName": "src/Text/Text.tsx",
							"line": 23,
							"character": 18
						}
					]
				},
				{
					"id": 305,
					"name": "TagBlockMap",
					"kind": 2097152,
					"kindString": "Object literal",
					"flags": {
						"isConst": true
					},
					"children": [
						{
							"id": 306,
							"name": "x1",
							"kind": 32,
							"kindString": "Variable",
							"flags": {},
							"sources": [
								{
									"fileName": "src/Text/Text.tsx",
									"line": 16,
									"character": 4
								}
							],
							"type": {
								"type": "stringLiteral",
								"value": "p"
							},
							"defaultValue": "\"p\""
						},
						{
							"id": 307,
							"name": "x2",
							"kind": 32,
							"kindString": "Variable",
							"flags": {},
							"sources": [
								{
									"fileName": "src/Text/Text.tsx",
									"line": 17,
									"character": 4
								}
							],
							"type": {
								"type": "stringLiteral",
								"value": "p"
							},
							"defaultValue": "\"p\""
						},
						{
							"id": 308,
							"name": "x3",
							"kind": 32,
							"kindString": "Variable",
							"flags": {},
							"sources": [
								{
									"fileName": "src/Text/Text.tsx",
									"line": 18,
									"character": 4
								}
							],
							"type": {
								"type": "stringLiteral",
								"value": "h3"
							},
							"defaultValue": "\"h3\""
						},
						{
							"id": 309,
							"name": "x4",
							"kind": 32,
							"kindString": "Variable",
							"flags": {},
							"sources": [
								{
									"fileName": "src/Text/Text.tsx",
									"line": 19,
									"character": 4
								}
							],
							"type": {
								"type": "stringLiteral",
								"value": "h2"
							},
							"defaultValue": "\"h2\""
						},
						{
							"id": 310,
							"name": "x5",
							"kind": 32,
							"kindString": "Variable",
							"flags": {},
							"sources": [
								{
									"fileName": "src/Text/Text.tsx",
									"line": 20,
									"character": 4
								}
							],
							"type": {
								"type": "stringLiteral",
								"value": "h1"
							},
							"defaultValue": "\"h1\""
						}
					],
					"groups": [
						{
							"title": "Variables",
							"kind": 32,
							"children": [
								306,
								307,
								308,
								309,
								310
							]
						}
					],
					"sources": [
						{
							"fileName": "src/Text/Text.tsx",
							"line": 13,
							"character": 17
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "object"
					}
				}
			],
			"groups": [
				{
					"title": "Interfaces",
					"kind": 256,
					"children": [
						265
					]
				},
				{
					"title": "Type aliases",
					"kind": 4194304,
					"children": [
						304
					]
				},
				{
					"title": "Variables",
					"kind": 32,
					"children": [
						314
					]
				},
				{
					"title": "Functions",
					"kind": 64,
					"children": [
						311
					]
				},
				{
					"title": "Object literals",
					"kind": 2097152,
					"children": [
						305
					]
				}
			],
			"sources": [
				{
					"fileName": "src/Text/Text.tsx",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 1627,
			"name": "\"TextArea/TextArea\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "/Users/harry/Projects/personal/preshape/src/TextArea/TextArea.tsx",
			"children": [
				{
					"id": 1628,
					"name": "TextAreaProps",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"children": [
						{
							"id": 1649,
							"name": "absolute",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Quick way of absolutely position to common places"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 58,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "fullscreen"
									},
									{
										"type": "stringLiteral",
										"value": "top"
									},
									{
										"type": "stringLiteral",
										"value": "top-left"
									},
									{
										"type": "stringLiteral",
										"value": "top-right"
									},
									{
										"type": "stringLiteral",
										"value": "bottom"
									},
									{
										"type": "stringLiteral",
										"value": "bottom-left"
									},
									{
										"type": "stringLiteral",
										"value": "bottom-right"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.absolute",
								"id": 3
							}
						},
						{
							"id": 1635,
							"name": "align",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Text alignment"
							},
							"sources": [
								{
									"fileName": "src/Text/Text.tsx",
									"line": 32,
									"character": 7
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "start"
									},
									{
										"type": "stringLiteral",
										"value": "middle"
									},
									{
										"type": "stringLiteral",
										"value": "end"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TextProps.align",
								"id": 266
							}
						},
						{
							"id": 1650,
							"name": "backgroundColor",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Background colour to be applied, shades are taken from the current\ntheme."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 70,
									"character": 17
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeColor",
								"id": 30
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.backgroundColor",
								"id": 4
							}
						},
						{
							"id": 1651,
							"name": "borderColor",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Border colour to be applied, shades are taken from the current\ntheme."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 75,
									"character": 13
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeColor",
								"id": 30
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.borderColor",
								"id": 5
							}
						},
						{
							"id": 1652,
							"name": "borderRadius",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Adds styling of a border radius to one of the size multiples."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 79,
									"character": 14
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "x1"
									},
									{
										"type": "stringLiteral",
										"value": "x2"
									},
									{
										"type": "stringLiteral",
										"value": "x3"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.borderRadius",
								"id": 6
							}
						},
						{
							"id": 1653,
							"name": "borderSize",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Thickness of the border to be applied"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 81,
									"character": 12
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "x1"
									},
									{
										"type": "stringLiteral",
										"value": "x2"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.borderSize",
								"id": 7
							}
						},
						{
							"id": 1636,
							"name": "breakOn",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "How the block of text should break onto new lines."
							},
							"sources": [
								{
									"fileName": "src/Text/Text.tsx",
									"line": 34,
									"character": 9
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "all"
									},
									{
										"type": "stringLiteral",
										"value": "none"
									},
									{
										"type": "stringLiteral",
										"value": "word"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TextProps.breakOn",
								"id": 267
							}
						},
						{
							"id": 1654,
							"name": "clickable",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Adds styling to indicate that the element is clickable"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 83,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.clickable",
								"id": 8
							}
						},
						{
							"id": 1655,
							"name": "container",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies relative positioning to contain child elements."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 85,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.container",
								"id": 9
							}
						},
						{
							"id": 1629,
							"name": "disabled",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "A styled disabled state that disables all interactions"
							},
							"sources": [
								{
									"fileName": "src/TextArea/TextArea.tsx",
									"line": 9,
									"character": 12
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							}
						},
						{
							"id": 1656,
							"name": "display",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies display styling"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 87,
									"character": 9
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "block"
									},
									{
										"type": "stringLiteral",
										"value": "inline-block"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.display",
								"id": 10
							}
						},
						{
							"id": 1637,
							"name": "ellipsis",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Replaces the overflow of text with the ellipsis character"
							},
							"sources": [
								{
									"fileName": "src/Text/Text.tsx",
									"line": 36,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TextProps.ellipsis",
								"id": 268
							}
						},
						{
							"id": 1638,
							"name": "emphasis",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies emphasis styling"
							},
							"sources": [
								{
									"fileName": "src/Text/Text.tsx",
									"line": 38,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TextProps.emphasis",
								"id": 269
							}
						},
						{
							"id": 1657,
							"name": "fixed",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Quick way of absolutely position to common places"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 89,
									"character": 7
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "fullscreen"
									},
									{
										"type": "stringLiteral",
										"value": "top"
									},
									{
										"type": "stringLiteral",
										"value": "top-left"
									},
									{
										"type": "stringLiteral",
										"value": "top-right"
									},
									{
										"type": "stringLiteral",
										"value": "bottom"
									},
									{
										"type": "stringLiteral",
										"value": "bottom-left"
									},
									{
										"type": "stringLiteral",
										"value": "bottom-right"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.fixed",
								"id": 11
							}
						},
						{
							"id": 1639,
							"name": "heading",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies a heading font family style"
							},
							"sources": [
								{
									"fileName": "src/Text/Text.tsx",
									"line": 40,
									"character": 9
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TextProps.heading",
								"id": 270
							}
						},
						{
							"id": 1658,
							"name": "height",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Fixed height applied through inline styling"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 98,
									"character": 8
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.height",
								"id": 12
							}
						},
						{
							"id": 1640,
							"name": "inline",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Text default to block display, this will apply inline display."
							},
							"sources": [
								{
									"fileName": "src/Text/Text.tsx",
									"line": 42,
									"character": 8
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TextProps.inline",
								"id": 271
							}
						},
						{
							"id": 1630,
							"name": "label",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "A label that gives describes what the input is for"
							},
							"sources": [
								{
									"fileName": "src/TextArea/TextArea.tsx",
									"line": 11,
									"character": 9
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							}
						},
						{
							"id": 1659,
							"name": "maxWidth",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Max width applied through inline styling"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 102,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.maxWidth",
								"id": 14
							}
						},
						{
							"id": 1660,
							"name": "minHeight",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Max height applied through inline styling"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 104,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.minHeight",
								"id": 15
							}
						},
						{
							"id": 1661,
							"name": "minWidth",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Min width applied through inline style"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 106,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.minWidth",
								"id": 16
							}
						},
						{
							"id": 1641,
							"name": "monospace",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies a monospace font family style"
							},
							"sources": [
								{
									"fileName": "src/Text/Text.tsx",
									"line": 44,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TextProps.monospace",
								"id": 272
							}
						},
						{
							"id": 1662,
							"name": "overflow",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Overflow"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 108,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "stringLiteral",
										"value": "hidden"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.overflow",
								"id": 17
							}
						},
						{
							"id": 1663,
							"name": "scrollable",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies overflow styling to enable/disable scrolling."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 116,
									"character": 12
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.scrollable",
								"id": 21
							}
						},
						{
							"id": 1642,
							"name": "size",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Size of the text"
							},
							"sources": [
								{
									"fileName": "src/Text/Text.tsx",
									"line": 46,
									"character": 6
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeTextSize",
								"id": 304
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TextProps.size",
								"id": 273
							}
						},
						{
							"id": 1643,
							"name": "strong",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies strong weight styling"
							},
							"sources": [
								{
									"fileName": "src/Text/Text.tsx",
									"line": 48,
									"character": 8
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TextProps.strong",
								"id": 274
							}
						},
						{
							"id": 1644,
							"name": "subscript",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies subscript baseline styling"
							},
							"sources": [
								{
									"fileName": "src/Text/Text.tsx",
									"line": 50,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TextProps.subscript",
								"id": 275
							}
						},
						{
							"id": 1645,
							"name": "superscript",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies superscript baseline styling"
							},
							"sources": [
								{
									"fileName": "src/Text/Text.tsx",
									"line": 52,
									"character": 13
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TextProps.superscript",
								"id": 276
							}
						},
						{
							"id": 1664,
							"name": "tag",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Any valid HTML or SVG element tag.",
								"tags": [
									{
										"tag": "reference",
										"text": "false\n"
									}
								]
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 122,
									"character": 5
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeAllElementTags",
								"id": 34
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.tag",
								"id": 22
							}
						},
						{
							"id": 1665,
							"name": "textColor",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Text colour to be applied."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 126,
									"character": 11
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeColor",
								"id": 30
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.textColor",
								"id": 23
							}
						},
						{
							"id": 1666,
							"name": "theme",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Theme applied to this element and inherited for child elements (until\na descendant theme is applied)."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 131,
									"character": 7
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeTheme",
								"id": 35
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.theme",
								"id": 24
							}
						},
						{
							"id": 1646,
							"name": "titlecase",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies title casing styling"
							},
							"sources": [
								{
									"fileName": "src/Text/Text.tsx",
									"line": 54,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TextProps.titlecase",
								"id": 277
							}
						},
						{
							"id": 1647,
							"name": "uppercase",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies uppercasing styling"
							},
							"sources": [
								{
									"fileName": "src/Text/Text.tsx",
									"line": 56,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TextProps.uppercase",
								"id": 278
							}
						},
						{
							"id": 1648,
							"name": "weak",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies weak weight styling"
							},
							"sources": [
								{
									"fileName": "src/Text/Text.tsx",
									"line": 58,
									"character": 6
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TextProps.weak",
								"id": 279
							}
						},
						{
							"id": 1667,
							"name": "width",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Fixed width applied through inline styling"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 133,
									"character": 7
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.width",
								"id": 25
							}
						},
						{
							"id": 1668,
							"name": "zIndex",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "z-index number for layering elements."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 135,
									"character": 8
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "number"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.zIndex",
								"id": 26
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								1649,
								1635,
								1650,
								1651,
								1652,
								1653,
								1636,
								1654,
								1655,
								1629,
								1656,
								1637,
								1638,
								1657,
								1639,
								1658,
								1640,
								1630,
								1659,
								1660,
								1661,
								1641,
								1662,
								1663,
								1642,
								1643,
								1644,
								1645,
								1664,
								1665,
								1666,
								1646,
								1647,
								1648,
								1667,
								1668
							]
						}
					],
					"sources": [
						{
							"fileName": "src/TextArea/TextArea.tsx",
							"line": 7,
							"character": 30
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"name": "TextProps",
							"id": 265
						}
					]
				},
				{
					"id": 1669,
					"name": "TextArea",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "src/TextArea/TextArea.tsx",
							"line": 22,
							"character": 14
						}
					],
					"type": {
						"type": "reference",
						"name": "ForwardRefExoticComponent",
						"typeArguments": [
							{
								"type": "intersection",
								"types": [
									{
										"type": "reference",
										"name": "TextAreaProps",
										"id": 1628
									},
									{
										"type": "reflection",
										"declaration": {
											"id": 1670,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {}
										}
									},
									{
										"type": "reference",
										"name": "RefAttributes",
										"typeArguments": [
											{
												"type": "reference",
												"name": "HTMLTextAreaElement"
											}
										]
									}
								]
							}
						]
					},
					"defaultValue": " React.forwardRef<HTMLTextAreaElement, Attributes<HTMLTextAreaElement, TextAreaProps>>((props, ref) => {\n  const {\n    disabled,\n    label,\n    margin,\n    padding,\n    paddingHorizontal = 'x3',\n    paddingVertical = 'x2',\n    ...rest\n  } = props;\n\n  return (\n    <InputLabel\n        disabled={ disabled }\n        label={ label }\n        margin={ margin }\n        paddingHorizontal={ padding || paddingHorizontal }\n        paddingVertical={ padding || paddingVertical }>\n      <Text { ...rest }\n          className=\"TextArea\"\n          disabled={ disabled }\n          paddingHorizontal={ padding || paddingHorizontal }\n          paddingVertical={ padding || paddingVertical }\n          ref={ ref }\n          size=\"x1\"\n          strong\n          tag=\"textarea\" />\n    </InputLabel>\n  );\n})"
				}
			],
			"groups": [
				{
					"title": "Interfaces",
					"kind": 256,
					"children": [
						1628
					]
				},
				{
					"title": "Variables",
					"kind": 32,
					"children": [
						1669
					]
				}
			],
			"sources": [
				{
					"fileName": "src/TextArea/TextArea.tsx",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 1671,
			"name": "\"ThemeSwitcher/ThemeSwitcher\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "/Users/harry/Projects/personal/preshape/src/ThemeSwitcher/ThemeSwitcher.tsx",
			"children": [
				{
					"id": 1672,
					"name": "ThemeSwitcherProps",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"children": [
						{
							"id": 1688,
							"name": "absolute",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Quick way of absolutely position to common places"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 58,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "fullscreen"
									},
									{
										"type": "stringLiteral",
										"value": "top"
									},
									{
										"type": "stringLiteral",
										"value": "top-left"
									},
									{
										"type": "stringLiteral",
										"value": "top-right"
									},
									{
										"type": "stringLiteral",
										"value": "bottom"
									},
									{
										"type": "stringLiteral",
										"value": "bottom-left"
									},
									{
										"type": "stringLiteral",
										"value": "bottom-right"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.absolute",
								"id": 3
							}
						},
						{
							"id": 1679,
							"name": "alignChildren",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Short cut child alignment property for both alignChildrenHorizontal and\nalignChildrenVertical."
							},
							"sources": [
								{
									"fileName": "src/Flex/Flex.tsx",
									"line": 11,
									"character": 15
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "start"
									},
									{
										"type": "stringLiteral",
										"value": "middle"
									},
									{
										"type": "stringLiteral",
										"value": "end"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "FlexProps.alignChildren",
								"id": 175
							}
						},
						{
							"id": 1680,
							"name": "alignChildrenHorizontal",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Horizontal alignment of children flex items."
							},
							"sources": [
								{
									"fileName": "src/Flex/Flex.tsx",
									"line": 13,
									"character": 25
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "start"
									},
									{
										"type": "stringLiteral",
										"value": "middle"
									},
									{
										"type": "stringLiteral",
										"value": "end"
									},
									{
										"type": "stringLiteral",
										"value": "around"
									},
									{
										"type": "stringLiteral",
										"value": "between"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "FlexProps.alignChildrenHorizontal",
								"id": 176
							}
						},
						{
							"id": 1681,
							"name": "alignChildrenVertical",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Vertical alignment of children flex items."
							},
							"sources": [
								{
									"fileName": "src/Flex/Flex.tsx",
									"line": 15,
									"character": 23
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "start"
									},
									{
										"type": "stringLiteral",
										"value": "middle"
									},
									{
										"type": "stringLiteral",
										"value": "end"
									},
									{
										"type": "stringLiteral",
										"value": "around"
									},
									{
										"type": "stringLiteral",
										"value": "between"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "FlexProps.alignChildrenVertical",
								"id": 177
							}
						},
						{
							"id": 1682,
							"name": "alignSelf",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Flex item alignment property (changes with parent direction)."
							},
							"sources": [
								{
									"fileName": "src/Flex/Flex.tsx",
									"line": 17,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "start"
									},
									{
										"type": "stringLiteral",
										"value": "middle"
									},
									{
										"type": "stringLiteral",
										"value": "end"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "FlexProps.alignSelf",
								"id": 178
							}
						},
						{
							"id": 1689,
							"name": "backgroundColor",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Background colour to be applied, shades are taken from the current\ntheme."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 70,
									"character": 17
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeColor",
								"id": 30
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.backgroundColor",
								"id": 4
							}
						},
						{
							"id": 1690,
							"name": "borderColor",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Border colour to be applied, shades are taken from the current\ntheme."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 75,
									"character": 13
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeColor",
								"id": 30
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.borderColor",
								"id": 5
							}
						},
						{
							"id": 1691,
							"name": "borderRadius",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Adds styling of a border radius to one of the size multiples."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 79,
									"character": 14
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "x1"
									},
									{
										"type": "stringLiteral",
										"value": "x2"
									},
									{
										"type": "stringLiteral",
										"value": "x3"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.borderRadius",
								"id": 6
							}
						},
						{
							"id": 1692,
							"name": "borderSize",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Thickness of the border to be applied"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 81,
									"character": 12
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "x1"
									},
									{
										"type": "stringLiteral",
										"value": "x2"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.borderSize",
								"id": 7
							}
						},
						{
							"id": 1693,
							"name": "clickable",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Adds styling to indicate that the element is clickable"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 83,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.clickable",
								"id": 8
							}
						},
						{
							"id": 1694,
							"name": "container",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies relative positioning to contain child elements."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 85,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.container",
								"id": 9
							}
						},
						{
							"id": 1683,
							"name": "direction",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Direction on which way to flex items."
							},
							"sources": [
								{
									"fileName": "src/Flex/Flex.tsx",
									"line": 19,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "horizontal"
									},
									{
										"type": "stringLiteral",
										"value": "vertical"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "FlexProps.direction",
								"id": 179
							}
						},
						{
							"id": 1695,
							"name": "display",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies display styling"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 87,
									"character": 9
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "block"
									},
									{
										"type": "stringLiteral",
										"value": "inline-block"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.display",
								"id": 10
							}
						},
						{
							"id": 1696,
							"name": "fixed",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Quick way of absolutely position to common places"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 89,
									"character": 7
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "fullscreen"
									},
									{
										"type": "stringLiteral",
										"value": "top"
									},
									{
										"type": "stringLiteral",
										"value": "top-left"
									},
									{
										"type": "stringLiteral",
										"value": "top-right"
									},
									{
										"type": "stringLiteral",
										"value": "bottom"
									},
									{
										"type": "stringLiteral",
										"value": "bottom-left"
									},
									{
										"type": "stringLiteral",
										"value": "bottom-right"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.fixed",
								"id": 11
							}
						},
						{
							"id": 1678,
							"name": "gap",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Spacing applied between child ListItems, values are global spacing variables.",
								"tags": [
									{
										"tag": "default",
										"text": "\"x1\"\n"
									}
								]
							},
							"sources": [
								{
									"fileName": "src/List/List.tsx",
									"line": 13,
									"character": 5
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeSize",
								"id": 31
							},
							"overwrites": {
								"type": "reference",
								"name": "FlexProps.gap",
								"id": 180
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "ListProps.gap",
								"id": 1051
							}
						},
						{
							"id": 1684,
							"name": "grow",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Flex item property if it should grow with available space."
							},
							"sources": [
								{
									"fileName": "src/Flex/Flex.tsx",
									"line": 23,
									"character": 6
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "FlexProps.grow",
								"id": 181
							}
						},
						{
							"id": 1697,
							"name": "height",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Fixed height applied through inline styling"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 98,
									"character": 8
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.height",
								"id": 12
							}
						},
						{
							"id": 1685,
							"name": "initial",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Initial width to flex from for a child item."
							},
							"sources": [
								{
									"fileName": "src/Flex/Flex.tsx",
									"line": 25,
									"character": 9
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "content"
									},
									{
										"type": "stringLiteral",
										"value": "container"
									},
									{
										"type": "stringLiteral",
										"value": "none"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "FlexProps.initial",
								"id": 182
							}
						},
						{
							"id": 1698,
							"name": "margin",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Margins applied for the global spacing variables"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 100,
									"character": 8
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeSize",
								"id": 31
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.margin",
								"id": 13
							}
						},
						{
							"id": 1699,
							"name": "maxWidth",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Max width applied through inline styling"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 102,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.maxWidth",
								"id": 14
							}
						},
						{
							"id": 1700,
							"name": "minHeight",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Max height applied through inline styling"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 104,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.minHeight",
								"id": 15
							}
						},
						{
							"id": 1701,
							"name": "minWidth",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Min width applied through inline style"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 106,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.minWidth",
								"id": 16
							}
						},
						{
							"id": 1673,
							"name": "onChange",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/ThemeSwitcher/ThemeSwitcher.tsx",
									"line": 9,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "reflection",
										"declaration": {
											"id": 1674,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"signatures": [
												{
													"id": 1675,
													"name": "__call",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"parameters": [
														{
															"id": 1676,
															"name": "theme",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "reference",
																"name": "TypeTheme",
																"id": 35
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								]
							}
						},
						{
							"id": 1702,
							"name": "overflow",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Overflow"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 108,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "stringLiteral",
										"value": "hidden"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.overflow",
								"id": 17
							}
						},
						{
							"id": 1703,
							"name": "padding",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Padding applied for the global spacing variables"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 110,
									"character": 9
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeSize",
								"id": 31
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.padding",
								"id": 18
							}
						},
						{
							"id": 1704,
							"name": "paddingHorizontal",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Horizontal padding applied for the global spacing variables"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 112,
									"character": 19
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeSize",
								"id": 31
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.paddingHorizontal",
								"id": 19
							}
						},
						{
							"id": 1705,
							"name": "paddingVertical",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Vertical pa?dding applied for the global spacing variables"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 114,
									"character": 17
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeSize",
								"id": 31
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.paddingVertical",
								"id": 20
							}
						},
						{
							"id": 1706,
							"name": "scrollable",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies overflow styling to enable/disable scrolling."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 116,
									"character": 12
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.scrollable",
								"id": 21
							}
						},
						{
							"id": 1686,
							"name": "shrink",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Flex item property if it should shrink."
							},
							"sources": [
								{
									"fileName": "src/Flex/Flex.tsx",
									"line": 27,
									"character": 8
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "FlexProps.shrink",
								"id": 183
							}
						},
						{
							"id": 1707,
							"name": "tag",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Any valid HTML or SVG element tag.",
								"tags": [
									{
										"tag": "reference",
										"text": "false\n"
									}
								]
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 122,
									"character": 5
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeAllElementTags",
								"id": 34
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.tag",
								"id": 22
							}
						},
						{
							"id": 1708,
							"name": "textColor",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Text colour to be applied."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 126,
									"character": 11
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeColor",
								"id": 30
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.textColor",
								"id": 23
							}
						},
						{
							"id": 1677,
							"name": "theme",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/ThemeSwitcher/ThemeSwitcher.tsx",
									"line": 10,
									"character": 7
								}
							],
							"type": {
								"type": "reference",
								"name": "TypeTheme",
								"id": 35
							},
							"overwrites": {
								"type": "reference",
								"name": "BaseProps.theme",
								"id": 24
							}
						},
						{
							"id": 1709,
							"name": "width",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Fixed width applied through inline styling"
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 133,
									"character": 7
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.width",
								"id": 25
							}
						},
						{
							"id": 1687,
							"name": "wrap",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Flag to allow flex items to wrap over to new lines"
							},
							"sources": [
								{
									"fileName": "src/Flex/Flex.tsx",
									"line": 29,
									"character": 6
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "FlexProps.wrap",
								"id": 184
							}
						},
						{
							"id": 1710,
							"name": "zIndex",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "z-index number for layering elements."
							},
							"sources": [
								{
									"fileName": "src/Base/Base.tsx",
									"line": 135,
									"character": 8
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "number"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseProps.zIndex",
								"id": 26
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								1688,
								1679,
								1680,
								1681,
								1682,
								1689,
								1690,
								1691,
								1692,
								1693,
								1694,
								1683,
								1695,
								1696,
								1678,
								1684,
								1697,
								1685,
								1698,
								1699,
								1700,
								1701,
								1673,
								1702,
								1703,
								1704,
								1705,
								1706,
								1686,
								1707,
								1708,
								1677,
								1709,
								1687,
								1710
							]
						}
					],
					"sources": [
						{
							"fileName": "src/ThemeSwitcher/ThemeSwitcher.tsx",
							"line": 8,
							"character": 35
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"name": "ListProps",
							"id": 1050
						}
					]
				},
				{
					"id": 1711,
					"name": "ThemeControls",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "src/ThemeSwitcher/ThemeSwitcher.tsx",
							"line": 13,
							"character": 19
						}
					],
					"type": {
						"type": "reference",
						"name": "ForwardRefExoticComponent",
						"typeArguments": [
							{
								"type": "intersection",
								"types": [
									{
										"type": "reference",
										"name": "ThemeSwitcherProps",
										"id": 1672
									},
									{
										"type": "reflection",
										"declaration": {
											"id": 1712,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {}
										}
									},
									{
										"type": "reference",
										"name": "RefAttributes",
										"typeArguments": [
											{
												"type": "reference",
												"name": "HTMLUListElement"
											}
										]
									}
								]
							}
						]
					},
					"defaultValue": " React.forwardRef<HTMLUListElement, Attributes<HTMLUListElement, ThemeSwitcherProps>>((props, ref) => {\n  const { onChange, theme, ...rest } = props;\n\n  return (\n    <List { ...rest } ref={ ref }>\n      <ListItem>\n        <Link\n            active={ theme === 'day' }\n            onClick={ onChange && (() => onChange('day')) }>\n          <Icon name=\"Sun\" size=\"1rem\" />\n        </Link>\n      </ListItem>\n\n      <ListItem>\n        <Link\n            active={ theme === 'night' }\n            onClick={ onChange && (() => onChange('night')) }>\n          <Icon name=\"Moon\" size=\"0.9rem\" />\n        </Link>\n      </ListItem>\n    </List>\n  );\n})"
				}
			],
			"groups": [
				{
					"title": "Interfaces",
					"kind": 256,
					"children": [
						1672
					]
				},
				{
					"title": "Variables",
					"kind": 32,
					"children": [
						1711
					]
				}
			],
			"sources": [
				{
					"fileName": "src/ThemeSwitcher/ThemeSwitcher.tsx",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 1756,
			"name": "\"hooks/index\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "/Users/harry/Projects/personal/preshape/src/hooks/index.ts",
			"sources": [
				{
					"fileName": "src/hooks/index.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 1713,
			"name": "\"hooks/useIsInView\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "/Users/harry/Projects/personal/preshape/src/hooks/useIsInView.ts",
			"children": [
				{
					"id": 1714,
					"name": "BUFFER",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isConst": true
					},
					"sources": [
						{
							"fileName": "src/hooks/useIsInView.ts",
							"line": 4,
							"character": 12
						}
					],
					"type": {
						"type": "unknown",
						"name": "20"
					},
					"defaultValue": "20"
				},
				{
					"id": 1715,
					"name": "isElementInViewport",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isConst": true
					},
					"signatures": [
						{
							"id": 1716,
							"name": "isElementInViewport",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 1717,
									"name": "el",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Element"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						}
					],
					"sources": [
						{
							"fileName": "src/hooks/useIsInView.ts",
							"line": 6,
							"character": 25
						}
					]
				}
			],
			"groups": [
				{
					"title": "Variables",
					"kind": 32,
					"children": [
						1714
					]
				},
				{
					"title": "Functions",
					"kind": 64,
					"children": [
						1715
					]
				}
			],
			"sources": [
				{
					"fileName": "src/hooks/useIsInView.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 1718,
			"name": "\"hooks/useMediaQuery\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "/Users/harry/Projects/personal/preshape/src/hooks/useMediaQuery.ts",
			"children": [
				{
					"id": 1722,
					"name": "Listener",
					"kind": 256,
					"kindString": "Interface",
					"flags": {},
					"children": [
						{
							"id": 1723,
							"name": "listener",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "src/hooks/useMediaQuery.ts",
									"line": 10,
									"character": 10
								}
							],
							"type": {
								"type": "reference",
								"name": "MediaQueryList"
							}
						},
						{
							"id": 1724,
							"name": "media",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "src/hooks/useMediaQuery.ts",
									"line": 11,
									"character": 7
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 1725,
							"name": "query",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "src/hooks/useMediaQuery.ts",
									"line": 12,
									"character": 7
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								1723,
								1724,
								1725
							]
						}
					],
					"sources": [
						{
							"fileName": "src/hooks/useMediaQuery.ts",
							"line": 9,
							"character": 18
						}
					]
				},
				{
					"id": 1719,
					"name": "MatchPatternConfig",
					"kind": 256,
					"kindString": "Interface",
					"flags": {},
					"indexSignature": [
						{
							"id": 1720,
							"name": "__index",
							"kind": 8192,
							"kindString": "Index signature",
							"flags": {},
							"parameters": [
								{
									"id": 1721,
									"name": "key",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "any"
							}
						}
					],
					"sources": [
						{
							"fileName": "src/hooks/useMediaQuery.ts",
							"line": 5,
							"character": 28
						}
					]
				},
				{
					"id": 1726,
					"name": "Handler",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {},
					"sources": [
						{
							"fileName": "src/hooks/useMediaQuery.ts",
							"line": 15,
							"character": 12
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 1727,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"signatures": [
								{
									"id": 1728,
									"name": "__call",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 1729,
											"name": "e",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "MediaQueryListEvent"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							],
							"sources": [
								{
									"fileName": "src/hooks/useMediaQuery.ts",
									"line": 15,
									"character": 14
								}
							]
						}
					}
				},
				{
					"id": 1730,
					"name": "getListeners",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isConst": true
					},
					"signatures": [
						{
							"id": 1731,
							"name": "getListeners",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 1732,
									"name": "queries",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "string"
										}
									}
								},
								{
									"id": 1733,
									"name": "handler",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Handler",
										"id": 1726
									}
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reflection",
									"declaration": {
										"id": 1734,
										"name": "__type",
										"kind": 65536,
										"kindString": "Type literal",
										"flags": {},
										"children": [
											{
												"id": 1735,
												"name": "listener",
												"kind": 32,
												"kindString": "Variable",
												"flags": {},
												"sources": [
													{
														"fileName": "src/hooks/useMediaQuery.ts",
														"line": 23,
														"character": 19
													}
												],
												"type": {
													"type": "reference",
													"name": "MediaQueryList"
												}
											},
											{
												"id": 1736,
												"name": "media",
												"kind": 32,
												"kindString": "Variable",
												"flags": {},
												"sources": [
													{
														"fileName": "src/hooks/useMediaQuery.ts",
														"line": 23,
														"character": 26
													}
												],
												"type": {
													"type": "intrinsic",
													"name": "string"
												}
											},
											{
												"id": 1737,
												"name": "query",
												"kind": 32,
												"kindString": "Variable",
												"flags": {},
												"sources": [
													{
														"fileName": "src/hooks/useMediaQuery.ts",
														"line": 23,
														"character": 33
													}
												],
												"type": {
													"type": "intrinsic",
													"name": "string"
												}
											}
										],
										"groups": [
											{
												"title": "Variables",
												"kind": 32,
												"children": [
													1735,
													1736,
													1737
												]
											}
										]
									}
								}
							}
						}
					],
					"sources": [
						{
							"fileName": "src/hooks/useMediaQuery.ts",
							"line": 17,
							"character": 18
						}
					]
				},
				{
					"id": 1738,
					"name": "getMatchQueryIndex",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isConst": true
					},
					"signatures": [
						{
							"id": 1739,
							"name": "getMatchQueryIndex",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 1740,
									"name": "queries",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "string"
										}
									}
								},
								{
									"id": 1741,
									"name": "listeners",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "array",
										"elementType": {
											"type": "reference",
											"name": "Listener",
											"id": 1722
										}
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					],
					"sources": [
						{
							"fileName": "src/hooks/useMediaQuery.ts",
							"line": 26,
							"character": 24
						}
					]
				},
				{
					"id": 1742,
					"name": "removeListeners",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isConst": true
					},
					"signatures": [
						{
							"id": 1743,
							"name": "removeListeners",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 1744,
									"name": "listeners",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "array",
										"elementType": {
											"type": "reference",
											"name": "Listener",
											"id": 1722
										}
									}
								},
								{
									"id": 1745,
									"name": "handler",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Handler",
										"id": 1726
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					],
					"sources": [
						{
							"fileName": "src/hooks/useMediaQuery.ts",
							"line": 36,
							"character": 21
						}
					]
				}
			],
			"groups": [
				{
					"title": "Interfaces",
					"kind": 256,
					"children": [
						1722,
						1719
					]
				},
				{
					"title": "Type aliases",
					"kind": 4194304,
					"children": [
						1726
					]
				},
				{
					"title": "Functions",
					"kind": 64,
					"children": [
						1730,
						1738,
						1742
					]
				}
			],
			"sources": [
				{
					"fileName": "src/hooks/useMediaQuery.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 1746,
			"name": "\"hooks/useResizeObserver\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "/Users/harry/Projects/personal/preshape/src/hooks/useResizeObserver.ts",
			"sources": [
				{
					"fileName": "src/hooks/useResizeObserver.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 1747,
			"name": "\"hooks/useTheme\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "/Users/harry/Projects/personal/preshape/src/hooks/useTheme.ts",
			"sources": [
				{
					"fileName": "src/hooks/useTheme.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 1748,
			"name": "\"hooks/useWindowScrollTo\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "/Users/harry/Projects/personal/preshape/src/hooks/useWindowScrollTo.ts",
			"children": [
				{
					"id": 1749,
					"name": "Options",
					"kind": 256,
					"kindString": "Interface",
					"flags": {},
					"children": [
						{
							"id": 1750,
							"name": "ignorePaths",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/hooks/useWindowScrollTo.ts",
									"line": 6,
									"character": 13
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "string"
								}
							}
						},
						{
							"id": 1751,
							"name": "ignorePop",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/hooks/useWindowScrollTo.ts",
									"line": 7,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								1750,
								1751
							]
						}
					],
					"sources": [
						{
							"fileName": "src/hooks/useWindowScrollTo.ts",
							"line": 5,
							"character": 17
						}
					]
				},
				{
					"id": 1752,
					"name": "shouldScroll",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isConst": true
					},
					"signatures": [
						{
							"id": 1753,
							"name": "shouldScroll",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 1754,
									"name": "history",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "History"
									}
								},
								{
									"id": 1755,
									"name": "options",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Options",
										"id": 1749
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						}
					],
					"sources": [
						{
							"fileName": "src/hooks/useWindowScrollTo.ts",
							"line": 10,
							"character": 18
						}
					]
				}
			],
			"groups": [
				{
					"title": "Interfaces",
					"kind": 256,
					"children": [
						1749
					]
				},
				{
					"title": "Functions",
					"kind": 64,
					"children": [
						1752
					]
				}
			],
			"sources": [
				{
					"fileName": "src/hooks/useWindowScrollTo.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 1757,
			"name": "\"index\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "/Users/harry/Projects/personal/preshape/src/index.ts",
			"sources": [
				{
					"fileName": "src/index.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 70,
			"name": "\"variables\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "/Users/harry/Projects/personal/preshape/src/variables.ts",
			"children": [
				{
					"id": 89,
					"name": "borderSizeX1Px",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "src/variables.ts",
							"line": 23,
							"character": 27
						}
					],
					"type": {
						"type": "unknown",
						"name": "1"
					},
					"defaultValue": "1"
				},
				{
					"id": 91,
					"name": "borderSizeX1Rem",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "src/variables.ts",
							"line": 26,
							"character": 28
						}
					],
					"type": {
						"type": "unknown",
						"name": "0.0625"
					},
					"defaultValue": "0.0625"
				},
				{
					"id": 90,
					"name": "borderSizeX2Px",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "src/variables.ts",
							"line": 24,
							"character": 27
						}
					],
					"type": {
						"type": "unknown",
						"name": "2"
					},
					"defaultValue": "2"
				},
				{
					"id": 92,
					"name": "borderSizeX2Rem",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "src/variables.ts",
							"line": 27,
							"character": 28
						}
					],
					"type": {
						"type": "unknown",
						"name": "0.125"
					},
					"defaultValue": "0.125"
				},
				{
					"id": 99,
					"name": "colorAccent1Shade1",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "src/variables.ts",
							"line": 37,
							"character": 31
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"defaultValue": " color.blue[4]"
				},
				{
					"id": 100,
					"name": "colorAccent1Shade2",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "src/variables.ts",
							"line": 38,
							"character": 31
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"defaultValue": " color.blue[5]"
				},
				{
					"id": 101,
					"name": "colorAccent1Shade3",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "src/variables.ts",
							"line": 39,
							"character": 31
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"defaultValue": " color.blue[6]"
				},
				{
					"id": 102,
					"name": "colorAccent2Shade1",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "src/variables.ts",
							"line": 41,
							"character": 31
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"defaultValue": " color.violet[4]"
				},
				{
					"id": 103,
					"name": "colorAccent2Shade2",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "src/variables.ts",
							"line": 42,
							"character": 31
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"defaultValue": " color.violet[5]"
				},
				{
					"id": 104,
					"name": "colorAccent2Shade3",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "src/variables.ts",
							"line": 43,
							"character": 31
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"defaultValue": " color.violet[6]"
				},
				{
					"id": 93,
					"name": "colorDarkShade1",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "src/variables.ts",
							"line": 29,
							"character": 28
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"defaultValue": " color.gray[9]"
				},
				{
					"id": 94,
					"name": "colorDarkShade2",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "src/variables.ts",
							"line": 30,
							"character": 28
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"defaultValue": " color.gray[8]"
				},
				{
					"id": 95,
					"name": "colorDarkShade3",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "src/variables.ts",
							"line": 31,
							"character": 28
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"defaultValue": " color.gray[7]"
				},
				{
					"id": 96,
					"name": "colorLightShade1",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "src/variables.ts",
							"line": 33,
							"character": 29
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"defaultValue": " color.gray[0]"
				},
				{
					"id": 97,
					"name": "colorLightShade2",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "src/variables.ts",
							"line": 34,
							"character": 29
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"defaultValue": " color.gray[1]"
				},
				{
					"id": 98,
					"name": "colorLightShade3",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "src/variables.ts",
							"line": 35,
							"character": 29
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"defaultValue": " color.gray[2]"
				},
				{
					"id": 108,
					"name": "colorNegativeShade1",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "src/variables.ts",
							"line": 49,
							"character": 32
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"defaultValue": " color.red[4]"
				},
				{
					"id": 109,
					"name": "colorNegativeShade2",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "src/variables.ts",
							"line": 50,
							"character": 32
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"defaultValue": " color.red[5]"
				},
				{
					"id": 110,
					"name": "colorNegativeShade3",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "src/variables.ts",
							"line": 51,
							"character": 32
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"defaultValue": " color.red[6]"
				},
				{
					"id": 105,
					"name": "colorPositiveShade1",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "src/variables.ts",
							"line": 45,
							"character": 32
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"defaultValue": " color.green[4]"
				},
				{
					"id": 106,
					"name": "colorPositiveShade2",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "src/variables.ts",
							"line": 46,
							"character": 32
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"defaultValue": " color.green[5]"
				},
				{
					"id": 107,
					"name": "colorPositiveShade3",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "src/variables.ts",
							"line": 47,
							"character": 32
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"defaultValue": " color.green[6]"
				},
				{
					"id": 171,
					"name": "routeTransitionTime",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "src/variables.ts",
							"line": 104,
							"character": 32
						}
					],
					"type": {
						"type": "unknown",
						"name": "400"
					},
					"defaultValue": " transitionTimeBase"
				},
				{
					"id": 77,
					"name": "sizeX10Px",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "src/variables.ts",
							"line": 9,
							"character": 22
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					},
					"defaultValue": " sizeX1Px * 10"
				},
				{
					"id": 86,
					"name": "sizeX10Rem",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "src/variables.ts",
							"line": 19,
							"character": 23
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					},
					"defaultValue": " sizeX1Rem * 10"
				},
				{
					"id": 78,
					"name": "sizeX12Px",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "src/variables.ts",
							"line": 10,
							"character": 22
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					},
					"defaultValue": " sizeX1Px * 12"
				},
				{
					"id": 87,
					"name": "sizeX12Rem",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "src/variables.ts",
							"line": 20,
							"character": 23
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					},
					"defaultValue": " sizeX1Rem * 12"
				},
				{
					"id": 79,
					"name": "sizeX16Px",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "src/variables.ts",
							"line": 11,
							"character": 22
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					},
					"defaultValue": " sizeX1Px * 16"
				},
				{
					"id": 88,
					"name": "sizeX16Rem",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "src/variables.ts",
							"line": 21,
							"character": 23
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					},
					"defaultValue": " sizeX1Rem * 16"
				},
				{
					"id": 71,
					"name": "sizeX1Px",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "src/variables.ts",
							"line": 3,
							"character": 21
						}
					],
					"type": {
						"type": "unknown",
						"name": "4"
					},
					"defaultValue": "4"
				},
				{
					"id": 80,
					"name": "sizeX1Rem",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "src/variables.ts",
							"line": 13,
							"character": 22
						}
					],
					"type": {
						"type": "unknown",
						"name": "0.25"
					},
					"defaultValue": "0.25"
				},
				{
					"id": 72,
					"name": "sizeX2Px",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "src/variables.ts",
							"line": 4,
							"character": 21
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					},
					"defaultValue": " sizeX1Px * 2"
				},
				{
					"id": 81,
					"name": "sizeX2Rem",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "src/variables.ts",
							"line": 14,
							"character": 22
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					},
					"defaultValue": " sizeX1Rem * 2"
				},
				{
					"id": 73,
					"name": "sizeX3Px",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "src/variables.ts",
							"line": 5,
							"character": 21
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					},
					"defaultValue": " sizeX1Px * 3"
				},
				{
					"id": 82,
					"name": "sizeX3Rem",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "src/variables.ts",
							"line": 15,
							"character": 22
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					},
					"defaultValue": " sizeX1Rem * 3"
				},
				{
					"id": 74,
					"name": "sizeX4Px",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "src/variables.ts",
							"line": 6,
							"character": 21
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					},
					"defaultValue": " sizeX1Px * 4"
				},
				{
					"id": 83,
					"name": "sizeX4Rem",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "src/variables.ts",
							"line": 16,
							"character": 22
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					},
					"defaultValue": " sizeX1Rem * 4"
				},
				{
					"id": 75,
					"name": "sizeX6Px",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "src/variables.ts",
							"line": 7,
							"character": 21
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					},
					"defaultValue": " sizeX1Px * 6"
				},
				{
					"id": 84,
					"name": "sizeX6Rem",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "src/variables.ts",
							"line": 17,
							"character": 22
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					},
					"defaultValue": " sizeX1Rem * 6"
				},
				{
					"id": 76,
					"name": "sizeX8Px",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "src/variables.ts",
							"line": 8,
							"character": 21
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					},
					"defaultValue": " sizeX1Px * 8"
				},
				{
					"id": 85,
					"name": "sizeX8Rem",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "src/variables.ts",
							"line": 18,
							"character": 22
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					},
					"defaultValue": " sizeX1Rem * 8"
				},
				{
					"id": 168,
					"name": "transitionTimeBase",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "src/variables.ts",
							"line": 100,
							"character": 31
						}
					],
					"type": {
						"type": "unknown",
						"name": "400"
					},
					"defaultValue": "400"
				},
				{
					"id": 167,
					"name": "transitionTimeFast",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "src/variables.ts",
							"line": 99,
							"character": 31
						}
					],
					"type": {
						"type": "unknown",
						"name": "200"
					},
					"defaultValue": "200"
				},
				{
					"id": 169,
					"name": "transitionTimeSlow",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "src/variables.ts",
							"line": 101,
							"character": 31
						}
					],
					"type": {
						"type": "unknown",
						"name": "800"
					},
					"defaultValue": "800"
				},
				{
					"id": 170,
					"name": "transitionTimingFunction",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "src/variables.ts",
							"line": 102,
							"character": 37
						}
					],
					"type": {
						"type": "array",
						"elementType": {
							"type": "intrinsic",
							"name": "number"
						}
					},
					"defaultValue": " [0.25, 0.46, 0.45, 0.94]"
				},
				{
					"id": 172,
					"name": "zIndexPlacement",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "src/variables.ts",
							"line": 106,
							"character": 28
						}
					],
					"type": {
						"type": "unknown",
						"name": "1"
					},
					"defaultValue": "1"
				},
				{
					"id": 111,
					"name": "themeDay",
					"kind": 2097152,
					"kindString": "Object literal",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"children": [
						{
							"id": 118,
							"name": "colorAccentShade1",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/variables.ts",
									"line": 60,
									"character": 19
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"defaultValue": " colorAccent1Shade1"
						},
						{
							"id": 119,
							"name": "colorAccentShade2",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/variables.ts",
									"line": 61,
									"character": 19
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"defaultValue": " colorAccent1Shade2"
						},
						{
							"id": 120,
							"name": "colorAccentShade3",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/variables.ts",
									"line": 62,
									"character": 19
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"defaultValue": " colorAccent1Shade3"
						},
						{
							"id": 112,
							"name": "colorBackgroundShade1",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/variables.ts",
									"line": 54,
									"character": 23
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"defaultValue": " colorLightShade1"
						},
						{
							"id": 113,
							"name": "colorBackgroundShade2",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/variables.ts",
									"line": 55,
									"character": 23
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"defaultValue": " colorLightShade2"
						},
						{
							"id": 114,
							"name": "colorBackgroundShade3",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/variables.ts",
									"line": 56,
									"character": 23
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"defaultValue": " colorLightShade3"
						},
						{
							"id": 115,
							"name": "colorTextShade1",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/variables.ts",
									"line": 57,
									"character": 17
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"defaultValue": " colorDarkShade1"
						},
						{
							"id": 116,
							"name": "colorTextShade2",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/variables.ts",
									"line": 58,
									"character": 17
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"defaultValue": " colorDarkShade2"
						},
						{
							"id": 117,
							"name": "colorTextShade3",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/variables.ts",
									"line": 59,
									"character": 17
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"defaultValue": " colorDarkShade3"
						}
					],
					"groups": [
						{
							"title": "Variables",
							"kind": 32,
							"children": [
								118,
								119,
								120,
								112,
								113,
								114,
								115,
								116,
								117
							]
						}
					],
					"sources": [
						{
							"fileName": "src/variables.ts",
							"line": 53,
							"character": 21
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "object"
					}
				},
				{
					"id": 121,
					"name": "themeNight",
					"kind": 2097152,
					"kindString": "Object literal",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"children": [
						{
							"id": 128,
							"name": "colorAccentShade1",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/variables.ts",
									"line": 72,
									"character": 19
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"defaultValue": " colorAccent2Shade1"
						},
						{
							"id": 129,
							"name": "colorAccentShade2",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/variables.ts",
									"line": 73,
									"character": 19
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"defaultValue": " colorAccent2Shade2"
						},
						{
							"id": 130,
							"name": "colorAccentShade3",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/variables.ts",
									"line": 74,
									"character": 19
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"defaultValue": " colorAccent2Shade3"
						},
						{
							"id": 122,
							"name": "colorBackgroundShade1",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/variables.ts",
									"line": 66,
									"character": 23
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"defaultValue": " colorDarkShade1"
						},
						{
							"id": 123,
							"name": "colorBackgroundShade2",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/variables.ts",
									"line": 67,
									"character": 23
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"defaultValue": " colorDarkShade2"
						},
						{
							"id": 124,
							"name": "colorBackgroundShade3",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/variables.ts",
									"line": 68,
									"character": 23
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"defaultValue": " colorDarkShade3"
						},
						{
							"id": 125,
							"name": "colorTextShade1",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/variables.ts",
									"line": 69,
									"character": 17
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"defaultValue": " colorLightShade1"
						},
						{
							"id": 126,
							"name": "colorTextShade2",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/variables.ts",
									"line": 70,
									"character": 17
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"defaultValue": " colorLightShade2"
						},
						{
							"id": 127,
							"name": "colorTextShade3",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/variables.ts",
									"line": 71,
									"character": 17
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"defaultValue": " colorLightShade3"
						}
					],
					"groups": [
						{
							"title": "Variables",
							"kind": 32,
							"children": [
								128,
								129,
								130,
								122,
								123,
								124,
								125,
								126,
								127
							]
						}
					],
					"sources": [
						{
							"fileName": "src/variables.ts",
							"line": 65,
							"character": 23
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "object"
					}
				},
				{
					"id": 157,
					"name": "themePropNameCSSMap",
					"kind": 2097152,
					"kindString": "Object literal",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"children": [
						{
							"id": 164,
							"name": "colorAccentShade1",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/variables.ts",
									"line": 94,
									"character": 19
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"defaultValue": "\"color-accent--shade-1\""
						},
						{
							"id": 165,
							"name": "colorAccentShade2",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/variables.ts",
									"line": 95,
									"character": 19
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"defaultValue": "\"color-accent--shade-1\""
						},
						{
							"id": 166,
							"name": "colorAccentShade3",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/variables.ts",
									"line": 96,
									"character": 19
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"defaultValue": "\"color-accent--shade-1\""
						},
						{
							"id": 158,
							"name": "colorBackgroundShade1",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/variables.ts",
									"line": 88,
									"character": 23
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"defaultValue": "\"color-background--shade-1\""
						},
						{
							"id": 159,
							"name": "colorBackgroundShade2",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/variables.ts",
									"line": 89,
									"character": 23
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"defaultValue": "\"color-background--shade-2\""
						},
						{
							"id": 160,
							"name": "colorBackgroundShade3",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/variables.ts",
									"line": 90,
									"character": 23
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"defaultValue": "\"color-background--shade-3\""
						},
						{
							"id": 161,
							"name": "colorTextShade1",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/variables.ts",
									"line": 91,
									"character": 17
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"defaultValue": "\"color-text--shade-1\""
						},
						{
							"id": 162,
							"name": "colorTextShade2",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/variables.ts",
									"line": 92,
									"character": 17
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"defaultValue": "\"color-text--shade-1\""
						},
						{
							"id": 163,
							"name": "colorTextShade3",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/variables.ts",
									"line": 93,
									"character": 17
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"defaultValue": "\"color-text--shade-1\""
						}
					],
					"groups": [
						{
							"title": "Variables",
							"kind": 32,
							"children": [
								164,
								165,
								166,
								158,
								159,
								160,
								161,
								162,
								163
							]
						}
					],
					"sources": [
						{
							"fileName": "src/variables.ts",
							"line": 87,
							"character": 32
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "object"
					}
				},
				{
					"id": 131,
					"name": "themes",
					"kind": 2097152,
					"kindString": "Object literal",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"children": [
						{
							"id": 132,
							"name": "day",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/variables.ts",
									"line": 78,
									"character": 5
								}
							],
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 133,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {},
									"children": [
										{
											"id": 140,
											"name": "colorAccentShade1",
											"kind": 32,
											"kindString": "Variable",
											"flags": {},
											"sources": [
												{
													"fileName": "src/variables.ts",
													"line": 60,
													"character": 19
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											},
											"defaultValue": " colorAccent1Shade1"
										},
										{
											"id": 141,
											"name": "colorAccentShade2",
											"kind": 32,
											"kindString": "Variable",
											"flags": {},
											"sources": [
												{
													"fileName": "src/variables.ts",
													"line": 61,
													"character": 19
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											},
											"defaultValue": " colorAccent1Shade2"
										},
										{
											"id": 142,
											"name": "colorAccentShade3",
											"kind": 32,
											"kindString": "Variable",
											"flags": {},
											"sources": [
												{
													"fileName": "src/variables.ts",
													"line": 62,
													"character": 19
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											},
											"defaultValue": " colorAccent1Shade3"
										},
										{
											"id": 134,
											"name": "colorBackgroundShade1",
											"kind": 32,
											"kindString": "Variable",
											"flags": {},
											"sources": [
												{
													"fileName": "src/variables.ts",
													"line": 54,
													"character": 23
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											},
											"defaultValue": " colorLightShade1"
										},
										{
											"id": 135,
											"name": "colorBackgroundShade2",
											"kind": 32,
											"kindString": "Variable",
											"flags": {},
											"sources": [
												{
													"fileName": "src/variables.ts",
													"line": 55,
													"character": 23
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											},
											"defaultValue": " colorLightShade2"
										},
										{
											"id": 136,
											"name": "colorBackgroundShade3",
											"kind": 32,
											"kindString": "Variable",
											"flags": {},
											"sources": [
												{
													"fileName": "src/variables.ts",
													"line": 56,
													"character": 23
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											},
											"defaultValue": " colorLightShade3"
										},
										{
											"id": 137,
											"name": "colorTextShade1",
											"kind": 32,
											"kindString": "Variable",
											"flags": {},
											"sources": [
												{
													"fileName": "src/variables.ts",
													"line": 57,
													"character": 17
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											},
											"defaultValue": " colorDarkShade1"
										},
										{
											"id": 138,
											"name": "colorTextShade2",
											"kind": 32,
											"kindString": "Variable",
											"flags": {},
											"sources": [
												{
													"fileName": "src/variables.ts",
													"line": 58,
													"character": 17
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											},
											"defaultValue": " colorDarkShade2"
										},
										{
											"id": 139,
											"name": "colorTextShade3",
											"kind": 32,
											"kindString": "Variable",
											"flags": {},
											"sources": [
												{
													"fileName": "src/variables.ts",
													"line": 59,
													"character": 17
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											},
											"defaultValue": " colorDarkShade3"
										}
									],
									"groups": [
										{
											"title": "Variables",
											"kind": 32,
											"children": [
												140,
												141,
												142,
												134,
												135,
												136,
												137,
												138,
												139
											]
										}
									]
								}
							},
							"defaultValue": " themeDay"
						},
						{
							"id": 143,
							"name": "night",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/variables.ts",
									"line": 79,
									"character": 7
								}
							],
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 144,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {},
									"children": [
										{
											"id": 151,
											"name": "colorAccentShade1",
											"kind": 32,
											"kindString": "Variable",
											"flags": {},
											"sources": [
												{
													"fileName": "src/variables.ts",
													"line": 72,
													"character": 19
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											},
											"defaultValue": " colorAccent2Shade1"
										},
										{
											"id": 152,
											"name": "colorAccentShade2",
											"kind": 32,
											"kindString": "Variable",
											"flags": {},
											"sources": [
												{
													"fileName": "src/variables.ts",
													"line": 73,
													"character": 19
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											},
											"defaultValue": " colorAccent2Shade2"
										},
										{
											"id": 153,
											"name": "colorAccentShade3",
											"kind": 32,
											"kindString": "Variable",
											"flags": {},
											"sources": [
												{
													"fileName": "src/variables.ts",
													"line": 74,
													"character": 19
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											},
											"defaultValue": " colorAccent2Shade3"
										},
										{
											"id": 145,
											"name": "colorBackgroundShade1",
											"kind": 32,
											"kindString": "Variable",
											"flags": {},
											"sources": [
												{
													"fileName": "src/variables.ts",
													"line": 66,
													"character": 23
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											},
											"defaultValue": " colorDarkShade1"
										},
										{
											"id": 146,
											"name": "colorBackgroundShade2",
											"kind": 32,
											"kindString": "Variable",
											"flags": {},
											"sources": [
												{
													"fileName": "src/variables.ts",
													"line": 67,
													"character": 23
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											},
											"defaultValue": " colorDarkShade2"
										},
										{
											"id": 147,
											"name": "colorBackgroundShade3",
											"kind": 32,
											"kindString": "Variable",
											"flags": {},
											"sources": [
												{
													"fileName": "src/variables.ts",
													"line": 68,
													"character": 23
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											},
											"defaultValue": " colorDarkShade3"
										},
										{
											"id": 148,
											"name": "colorTextShade1",
											"kind": 32,
											"kindString": "Variable",
											"flags": {},
											"sources": [
												{
													"fileName": "src/variables.ts",
													"line": 69,
													"character": 17
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											},
											"defaultValue": " colorLightShade1"
										},
										{
											"id": 149,
											"name": "colorTextShade2",
											"kind": 32,
											"kindString": "Variable",
											"flags": {},
											"sources": [
												{
													"fileName": "src/variables.ts",
													"line": 70,
													"character": 17
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											},
											"defaultValue": " colorLightShade2"
										},
										{
											"id": 150,
											"name": "colorTextShade3",
											"kind": 32,
											"kindString": "Variable",
											"flags": {},
											"sources": [
												{
													"fileName": "src/variables.ts",
													"line": 71,
													"character": 17
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											},
											"defaultValue": " colorLightShade3"
										}
									],
									"groups": [
										{
											"title": "Variables",
											"kind": 32,
											"children": [
												151,
												152,
												153,
												145,
												146,
												147,
												148,
												149,
												150
											]
										}
									]
								}
							},
							"defaultValue": " themeNight"
						}
					],
					"groups": [
						{
							"title": "Variables",
							"kind": 32,
							"children": [
								132,
								143
							]
						}
					],
					"sources": [
						{
							"fileName": "src/variables.ts",
							"line": 77,
							"character": 19
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "object"
					}
				},
				{
					"id": 154,
					"name": "themesOpposite",
					"kind": 2097152,
					"kindString": "Object literal",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"children": [
						{
							"id": 155,
							"name": "day",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/variables.ts",
									"line": 83,
									"character": 5
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"defaultValue": "\"night\""
						},
						{
							"id": 156,
							"name": "night",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/variables.ts",
									"line": 84,
									"character": 7
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"defaultValue": "\"day\""
						}
					],
					"groups": [
						{
							"title": "Variables",
							"kind": 32,
							"children": [
								155,
								156
							]
						}
					],
					"sources": [
						{
							"fileName": "src/variables.ts",
							"line": 82,
							"character": 27
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "object"
					}
				}
			],
			"groups": [
				{
					"title": "Variables",
					"kind": 32,
					"children": [
						89,
						91,
						90,
						92,
						99,
						100,
						101,
						102,
						103,
						104,
						93,
						94,
						95,
						96,
						97,
						98,
						108,
						109,
						110,
						105,
						106,
						107,
						171,
						77,
						86,
						78,
						87,
						79,
						88,
						71,
						80,
						72,
						81,
						73,
						82,
						74,
						83,
						75,
						84,
						76,
						85,
						168,
						167,
						169,
						170,
						172
					]
				},
				{
					"title": "Object literals",
					"kind": 2097152,
					"children": [
						111,
						121,
						157,
						131,
						154
					]
				}
			],
			"sources": [
				{
					"fileName": "src/variables.ts",
					"line": 1,
					"character": 0
				}
			]
		}
	],
	"groups": [
		{
			"title": "External modules",
			"kind": 1,
			"children": [
				39,
				211,
				1,
				316,
				358,
				386,
				415,
				457,
				537,
				496,
				547,
				589,
				173,
				634,
				662,
				705,
				745,
				816,
				885,
				844,
				928,
				970,
				998,
				1049,
				1087,
				1126,
				1160,
				1191,
				1229,
				1234,
				1239,
				1272,
				1270,
				498,
				1281,
				1309,
				1338,
				1376,
				1414,
				1456,
				1484,
				1527,
				1555,
				1599,
				264,
				1627,
				1671,
				1756,
				1713,
				1718,
				1746,
				1747,
				1748,
				1757,
				70
			]
		}
	]
}